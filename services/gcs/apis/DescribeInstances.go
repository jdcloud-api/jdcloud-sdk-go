// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    gcs "github.com/jdcloud-api/jdcloud-sdk-go/services/gcs/models"
    common "github.com/jdcloud-api/jdcloud-sdk-go/services/common/models"
)

type DescribeInstancesRequest struct {

    core.JDCloudRequest

    /* 地域ID，可调用接口（describeRegiones）获取云物理服务器支持的地域  */
    RegionId string `json:"regionId"`

    /* 页码；默认为1 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 分页大小；默认为20；取值范围[20, 100] (Optional) */
    PageSize *int `json:"pageSize"`

    /* 可用区 (Optional) */
    Az *string `json:"az"`

    /* 名称空间 (Optional) */
    Namespace *string `json:"namespace"`

    /* gcs uuid (Optional) */
    InstanceId *string `json:"instanceId"`

    /* 实例名称 (Optional) */
    InstanceName *string `json:"instanceName"`

    /* 运行状态：running|stopped|creating (Optional) */
    Status *string `json:"status"`

    /* 订单渠道：aidc(默认)|yunding (Optional) */
    Channel *string `json:"channel"`

    /* instance id list 逗号分隔 (Optional) */
    Ids *string `json:"ids"`

    /* 容器实例ID，精确匹配，支持多个
 (Optional) */
    Filters []common.Filter `json:"filters"`
}

/*
 * param regionId: 地域ID，可调用接口（describeRegiones）获取云物理服务器支持的地域 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeInstancesRequest(
    regionId string,
) *DescribeInstancesRequest {

	return &DescribeInstancesRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/describeInstances",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: 地域ID，可调用接口（describeRegiones）获取云物理服务器支持的地域 (Required)
 * param pageNumber: 页码；默认为1 (Optional)
 * param pageSize: 分页大小；默认为20；取值范围[20, 100] (Optional)
 * param az: 可用区 (Optional)
 * param namespace: 名称空间 (Optional)
 * param instanceId: gcs uuid (Optional)
 * param instanceName: 实例名称 (Optional)
 * param status: 运行状态：running|stopped|creating (Optional)
 * param channel: 订单渠道：aidc(默认)|yunding (Optional)
 * param ids: instance id list 逗号分隔 (Optional)
 * param filters: 容器实例ID，精确匹配，支持多个
 (Optional)
 */
func NewDescribeInstancesRequestWithAllParams(
    regionId string,
    pageNumber *int,
    pageSize *int,
    az *string,
    namespace *string,
    instanceId *string,
    instanceName *string,
    status *string,
    channel *string,
    ids *string,
    filters []common.Filter,
) *DescribeInstancesRequest {

    return &DescribeInstancesRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/describeInstances",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        PageNumber: pageNumber,
        PageSize: pageSize,
        Az: az,
        Namespace: namespace,
        InstanceId: instanceId,
        InstanceName: instanceName,
        Status: status,
        Channel: channel,
        Ids: ids,
        Filters: filters,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeInstancesRequestWithoutParam() *DescribeInstancesRequest {

    return &DescribeInstancesRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/describeInstances",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID，可调用接口（describeRegiones）获取云物理服务器支持的地域(Required) */
func (r *DescribeInstancesRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param pageNumber: 页码；默认为1(Optional) */
func (r *DescribeInstancesRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}
/* param pageSize: 分页大小；默认为20；取值范围[20, 100](Optional) */
func (r *DescribeInstancesRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}
/* param az: 可用区(Optional) */
func (r *DescribeInstancesRequest) SetAz(az string) {
    r.Az = &az
}
/* param namespace: 名称空间(Optional) */
func (r *DescribeInstancesRequest) SetNamespace(namespace string) {
    r.Namespace = &namespace
}
/* param instanceId: gcs uuid(Optional) */
func (r *DescribeInstancesRequest) SetInstanceId(instanceId string) {
    r.InstanceId = &instanceId
}
/* param instanceName: 实例名称(Optional) */
func (r *DescribeInstancesRequest) SetInstanceName(instanceName string) {
    r.InstanceName = &instanceName
}
/* param status: 运行状态：running|stopped|creating(Optional) */
func (r *DescribeInstancesRequest) SetStatus(status string) {
    r.Status = &status
}
/* param channel: 订单渠道：aidc(默认)|yunding(Optional) */
func (r *DescribeInstancesRequest) SetChannel(channel string) {
    r.Channel = &channel
}
/* param ids: instance id list 逗号分隔(Optional) */
func (r *DescribeInstancesRequest) SetIds(ids string) {
    r.Ids = &ids
}
/* param filters: 容器实例ID，精确匹配，支持多个
(Optional) */
func (r *DescribeInstancesRequest) SetFilters(filters []common.Filter) {
    r.Filters = filters
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeInstancesRequest) GetRegionId() string {
    return r.RegionId
}

type DescribeInstancesResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeInstancesResult `json:"result"`
}

type DescribeInstancesResult struct {
    List []gcs.Instance `json:"list"`
    PageNumber int `json:"pageNumber"`
    PageSize int `json:"pageSize"`
    TotalCount int `json:"totalCount"`
}