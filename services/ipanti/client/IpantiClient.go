// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    ipanti "github.com/lshuining/jdcloud-sdk-go/services/ipanti/apis"
    "encoding/json"
    "errors"
)

type IpantiClient struct {
    core.JDCloudClient
}

func NewIpantiClient(credential *core.Credential) *IpantiClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("ipanti.jdcloud-api.com")

    return &IpantiClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "ipanti",
            Revision:    "1.12.0",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *IpantiClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *IpantiClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *IpantiClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 高防返回客户端状态码报表 */
func (c *IpantiClient) DescribeStatusGraph(request *ipanti.DescribeStatusGraphRequest) (*ipanti.DescribeStatusGraphResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeStatusGraphResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新实例弹性防护带宽 */
func (c *IpantiClient) ModifyEPB(request *ipanti.ModifyEPBRequest) (*ipanti.ModifyEPBResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyEPBResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量添加网站类规则允许插入JS指纹的页面 */
func (c *IpantiClient) CreateJsPagesOfWebRule(request *ipanti.CreateJsPagesOfWebRuleRequest) (*ipanti.CreateJsPagesOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.CreateJsPagesOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除自定义页面, 使用中的不允许删除 */
func (c *IpantiClient) DeleteCustomPage(request *ipanti.DeleteCustomPageRequest) (*ipanti.DeleteCustomPageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DeleteCustomPageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新防护调度规则 */
func (c *IpantiClient) ModifyDispatchRule(request *ipanti.ModifyDispatchRuleRequest) (*ipanti.ModifyDispatchRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyDispatchRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 实例全局访问控制配置可以恢复到上一次下发成功的配置时，调用此接口回滚到上一次下发成功的配置 */
func (c *IpantiClient) RecoverInstanceAcl(request *ipanti.RecoverInstanceAclRequest) (*ipanti.RecoverInstanceAclResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.RecoverInstanceAclResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改网站类规则 */
func (c *IpantiClient) ModifyWebRule(request *ipanti.ModifyWebRuleRequest) (*ipanti.ModifyWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 开启网站类规则的黑名单 */
func (c *IpantiClient) EnableWebRuleBlackList(request *ipanti.EnableWebRuleBlackListRequest) (*ipanti.EnableWebRuleBlackListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.EnableWebRuleBlackListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询实例的 IP 黑白名单库列表 */
func (c *IpantiClient) DescribeIpSets(request *ipanti.DescribeIpSetsRequest) (*ipanti.DescribeIpSetsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeIpSetsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 开启网站类规则的白名单规则, 批量操作时 webWhiteListRuleId 传多个, 以 ',' 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 */
func (c *IpantiClient) EnableWhiteListRuleOfWebRule(request *ipanti.EnableWhiteListRuleOfWebRuleRequest) (*ipanti.EnableWhiteListRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.EnableWhiteListRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除网站类规则的白名单规则, 批量操作时 webWhiteListRuleId 传多个, 以 ',' 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 */
func (c *IpantiClient) DeleteWhiteListRuleOfWebRule(request *ipanti.DeleteWhiteListRuleOfWebRuleRequest) (*ipanti.DeleteWhiteListRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DeleteWhiteListRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 关闭网站类规则的白名单 */
func (c *IpantiClient) DisableWebRuleWhiteList(request *ipanti.DisableWebRuleWhiteListRequest) (*ipanti.DisableWebRuleWhiteListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DisableWebRuleWhiteListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询实例列表 */
func (c *IpantiClient) DescribeInstances(request *ipanti.DescribeInstancesRequest) (*ipanti.DescribeInstancesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeInstancesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 新购或升级高防实例 */
func (c *IpantiClient) CreateInstance(request *ipanti.CreateInstanceRequest) (*ipanti.CreateInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.CreateInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询 CC 攻击日志详情.
- 参数 attackId 优先级高于 instanceId, attackId 不为空时, 忽略 instanceId
 */
func (c *IpantiClient) DescribeCCAttackLogDetails(request *ipanti.DescribeCCAttackLogDetailsRequest) (*ipanti.DescribeCCAttackLogDetailsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeCCAttackLogDetailsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 关闭网站类规则的 CC 防护规则 */
func (c *IpantiClient) DisableCCProtectionRuleOfWebRule(request *ipanti.DisableCCProtectionRuleOfWebRuleRequest) (*ipanti.DisableCCProtectionRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DisableCCProtectionRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量添加非网站类规则 */
func (c *IpantiClient) CreateForwardRules(request *ipanti.CreateForwardRulesRequest) (*ipanti.CreateForwardRulesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.CreateForwardRulesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询 CC 攻击日志 */
func (c *IpantiClient) DescribeCCAttackLogs(request *ipanti.DescribeCCAttackLogsRequest) (*ipanti.DescribeCCAttackLogsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeCCAttackLogsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除网站规则的 CC 防护规则 */
func (c *IpantiClient) DeleteCCProtectionRuleOfWebRule(request *ipanti.DeleteCCProtectionRuleOfWebRuleRequest) (*ipanti.DeleteCCProtectionRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DeleteCCProtectionRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新非网站类规则 */
func (c *IpantiClient) ModifyForwardRule(request *ipanti.ModifyForwardRuleRequest) (*ipanti.ModifyForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 关闭网站类规则 CC 观察者模式, 观察模式下, CC 防护只告警不防御。支持批量操作, 批量操作时 webRuleId 传多个, 以 ',' 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 */
func (c *IpantiClient) DisableWebRuleCCObserverMode(request *ipanti.DisableWebRuleCCObserverModeRequest) (*ipanti.DisableWebRuleCCObserverModeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DisableWebRuleCCObserverModeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询某个实例下的网站类规则 */
func (c *IpantiClient) DescribeWebRules(request *ipanti.DescribeWebRulesRequest) (*ipanti.DescribeWebRulesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeWebRulesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改实例页面错误状态码返回页面为为默认页面 */
func (c *IpantiClient) ModifyInstanceCustomPageDefault(request *ipanti.ModifyInstanceCustomPageDefaultRequest) (*ipanti.ModifyInstanceCustomPageDefaultResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyInstanceCustomPageDefaultResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改网站类规则的黑名单规则 */
func (c *IpantiClient) ModifyBlackListRuleOfWebRule(request *ipanti.ModifyBlackListRuleOfWebRuleRequest) (*ipanti.ModifyBlackListRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyBlackListRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 开启网站类规则的白名单 */
func (c *IpantiClient) EnableWebRuleWhiteList(request *ipanti.EnableWebRuleWhiteListRequest) (*ipanti.EnableWebRuleWhiteListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.EnableWebRuleWhiteListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询高防实例防护统计信息 */
func (c *IpantiClient) DescribeProtectionStatistics(request *ipanti.DescribeProtectionStatisticsRequest) (*ipanti.DescribeProtectionStatisticsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeProtectionStatisticsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询高防IP的 DDoS 攻击日志, 仅BGP实例返回的是IP级别的攻击记录, 非BGP实例返回的仍是实例级别的攻击记录(serviceIp 字段为空)
参数 serviceIp 优先级大于 instanceId.
- 指定 serviceIp 参数时, 忽略 instanceId 参数, 查询 ip 相关攻击记录.
- 未指定 serviceIp 时, 查询 instanceId 指定实例相关攻击记录.
- serviceIp 和 instanceId 均未指定时, 查询用户所有攻击记录
 */
func (c *IpantiClient) DescribeDDoSIpAttackLogs(request *ipanti.DescribeDDoSIpAttackLogsRequest) (*ipanti.DescribeDDoSIpAttackLogsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeDDoSIpAttackLogsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询网站类规则允许插入JS指纹的页面 */
func (c *IpantiClient) DescribeJsPagesOfWebRule(request *ipanti.DescribeJsPagesOfWebRuleRequest) (*ipanti.DescribeJsPagesOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeJsPagesOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询网站类转发规则 Geo 模式的白名单可设置区域编码 */
func (c *IpantiClient) DescribeWebRuleWhiteListGeoAreas(request *ipanti.DescribeWebRuleWhiteListGeoAreasRequest) (*ipanti.DescribeWebRuleWhiteListGeoAreasResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeWebRuleWhiteListGeoAreasResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改转发规则的黑名单规则 */
func (c *IpantiClient) ModifyBlackListRuleOfForwardRule(request *ipanti.ModifyBlackListRuleOfForwardRuleRequest) (*ipanti.ModifyBlackListRuleOfForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyBlackListRuleOfForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改网站类规则允许插入 JS 指纹的页面 */
func (c *IpantiClient) ModifyJsPageOfWebRule(request *ipanti.ModifyJsPageOfWebRuleRequest) (*ipanti.ModifyJsPageOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyJsPageOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 关闭网站类规则的黑名单 */
func (c *IpantiClient) DisableWebRuleBlackList(request *ipanti.DisableWebRuleBlackListRequest) (*ipanti.DisableWebRuleBlackListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DisableWebRuleBlackListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 非网站类规则切换成防御状态。支持批量操作, 批量操作时 forwardRuleId 传多个, 以 ',' 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 */
func (c *IpantiClient) SwitchForwardRuleProtect(request *ipanti.SwitchForwardRuleProtectRequest) (*ipanti.SwitchForwardRuleProtectResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.SwitchForwardRuleProtectResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询网站类规则的 CC 防护规则 */
func (c *IpantiClient) DescribeCCProtectionRuleOfWebRule(request *ipanti.DescribeCCProtectionRuleOfWebRuleRequest) (*ipanti.DescribeCCProtectionRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeCCProtectionRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改实例全局访问控制配置，包括全局的IP黑白名单和geo拦截配置 */
func (c *IpantiClient) ModifyInstanceAcl(request *ipanti.ModifyInstanceAclRequest) (*ipanti.ModifyInstanceAclResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyInstanceAclResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 插入JS指纹到所有页面, 需要打开网站类规则的JS指纹开关 */
func (c *IpantiClient) ModifyWebRuleJsPageToAll(request *ipanti.ModifyWebRuleJsPageToAllRequest) (*ipanti.ModifyWebRuleJsPageToAllResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyWebRuleJsPageToAllResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 网站类规则绑定 SSL 证书 */
func (c *IpantiClient) BindCert(request *ipanti.BindCertRequest) (*ipanti.BindCertResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.BindCertResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询用户可设置为网站类规则回源 IP 的京东云托管区公网 IP 资源 */
func (c *IpantiClient) DescribeCcsIpList(request *ipanti.DescribeCcsIpListRequest) (*ipanti.DescribeCcsIpListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeCcsIpListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询网站类规则的白名单规则 */
func (c *IpantiClient) DescribeWhiteListRuleOfWebRule(request *ipanti.DescribeWhiteListRuleOfWebRuleRequest) (*ipanti.DescribeWhiteListRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeWhiteListRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 关闭实例错误状态码返回页面, 透传错误状态码 */
func (c *IpantiClient) DisableInstanceCustomPage(request *ipanti.DisableInstanceCustomPageRequest) (*ipanti.DisableInstanceCustomPageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DisableInstanceCustomPageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询网站类规则的黑名单规则 */
func (c *IpantiClient) DescribeBlackListRuleOfWebRule(request *ipanti.DescribeBlackListRuleOfWebRuleRequest) (*ipanti.DescribeBlackListRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeBlackListRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询攻击次数及流量峰值
参数 serviceIp 优先级大于 instanceId.
- 指定 serviceIp 参数时, 忽略 instanceId 参数, 统计 ip 相关攻击
- 未指定 serviceIp 时, 统计 instanceId 指定实例相关攻击
- serviceIp 和 instanceId 均未指定时, 统计用户所有攻击记录
CC攻击为实例级别, 查询类型 type 为 cc 时, 参数 serviceIp 无效
 */
func (c *IpantiClient) DescribeAttackStatistics(request *ipanti.DescribeAttackStatisticsRequest) (*ipanti.DescribeAttackStatisticsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeAttackStatisticsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询 DDoS 攻击日志, 仅能查询非BGP实例的攻击记录, 同时查询BGP和非BGP实例请使用 <a href='http://docs.jdcloud.com/anti-ddos-pro/api/describeDDoSIpAttackLogs'>describeDDoSIpAttackLogs</a> */
func (c *IpantiClient) DescribeDDoSAttackLogs(request *ipanti.DescribeDDoSAttackLogsRequest) (*ipanti.DescribeDDoSAttackLogsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeDDoSAttackLogsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 关闭网站类规则的JS指纹开关 */
func (c *IpantiClient) DisableWebRuleJsPage(request *ipanti.DisableWebRuleJsPageRequest) (*ipanti.DisableWebRuleJsPageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DisableWebRuleJsPageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询自定义页面列表 */
func (c *IpantiClient) DescribeCustomPages(request *ipanti.DescribeCustomPagesRequest) (*ipanti.DescribeCustomPagesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeCustomPagesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 开启转发规则的白名单规则 */
func (c *IpantiClient) EnableWhiteListRuleOfForwardRule(request *ipanti.EnableWhiteListRuleOfForwardRuleRequest) (*ipanti.EnableWhiteListRuleOfForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.EnableWhiteListRuleOfForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 防护调度规则切换成防御状态 */
func (c *IpantiClient) SwitchDispatchRuleProtect(request *ipanti.SwitchDispatchRuleProtectRequest) (*ipanti.SwitchDispatchRuleProtectResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.SwitchDispatchRuleProtectResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询实例高防 IP 列表 */
func (c *IpantiClient) DescribeServiceIpList(request *ipanti.DescribeServiceIpListRequest) (*ipanti.DescribeServiceIpListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeServiceIpListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 关闭网站类规则的白名单规则, 批量操作时 webWhiteListRuleId 传多个, 以 ',' 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 */
func (c *IpantiClient) DisableWhiteListRuleOfWebRule(request *ipanti.DisableWhiteListRuleOfWebRuleRequest) (*ipanti.DisableWhiteListRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DisableWhiteListRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询高防实例防护概要 */
func (c *IpantiClient) DescribeProtectionOutline(request *ipanti.DescribeProtectionOutlineRequest) (*ipanti.DescribeProtectionOutlineResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeProtectionOutlineResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除防护调度规则 */
func (c *IpantiClient) DeleteDispatchRule(request *ipanti.DeleteDispatchRuleRequest) (*ipanti.DeleteDispatchRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DeleteDispatchRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加网站类规则 */
func (c *IpantiClient) CreateWebRule(request *ipanti.CreateWebRuleRequest) (*ipanti.CreateWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.CreateWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询网站类规则的 CC 防护配置 */
func (c *IpantiClient) DescribeCCProtectionConfigOfWebRule(request *ipanti.DescribeCCProtectionConfigOfWebRuleRequest) (*ipanti.DescribeCCProtectionConfigOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeCCProtectionConfigOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 关闭网站类规则 CC 防护, 网站类规则的 CC 防护规则和 CC 防护配置失效。支持批量操作, 批量操作时 webRuleId 传多个, 以 ',' 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 */
func (c *IpantiClient) DisableWebRuleCC(request *ipanti.DisableWebRuleCCRequest) (*ipanti.DisableWebRuleCCResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DisableWebRuleCCResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加网站类规则的白名单规则 */
func (c *IpantiClient) CreateWhiteListRuleOfWebRule(request *ipanti.CreateWhiteListRuleOfWebRuleRequest) (*ipanti.CreateWhiteListRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.CreateWhiteListRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 检测实例名称是否合法 */
func (c *IpantiClient) CheckName(request *ipanti.CheckNameRequest) (*ipanti.CheckNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.CheckNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 关闭网站类规则的自定义 CC 防护规则总开关, 所有自定义 CC 防护规则失效 */
func (c *IpantiClient) DisableWebRuleCCProtectionRule(request *ipanti.DisableWebRuleCCProtectionRuleRequest) (*ipanti.DisableWebRuleCCProtectionRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DisableWebRuleCCProtectionRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询实例的 IP 黑白名单用量信息 */
func (c *IpantiClient) DescribeIpSetUsage(request *ipanti.DescribeIpSetUsageRequest) (*ipanti.DescribeIpSetUsageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeIpSetUsageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加自定义页面 */
func (c *IpantiClient) CreateCustomPage(request *ipanti.CreateCustomPageRequest) (*ipanti.CreateCustomPageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.CreateCustomPageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 关闭转发规则的白名单规则 */
func (c *IpantiClient) DisableWhiteListRuleOfForwardRule(request *ipanti.DisableWhiteListRuleOfForwardRuleRequest) (*ipanti.DisableWhiteListRuleOfForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DisableWhiteListRuleOfForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 开启网站类规则的 CC 防护规则 */
func (c *IpantiClient) EnableCCProtectionRuleOfWebRule(request *ipanti.EnableCCProtectionRuleOfWebRuleRequest) (*ipanti.EnableCCProtectionRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.EnableCCProtectionRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询网站类规则 */
func (c *IpantiClient) DescribeWebRule(request *ipanti.DescribeWebRuleRequest) (*ipanti.DescribeWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询网站类转发规则 Geo 模式的黑名单可设置区域编码 */
func (c *IpantiClient) DescribeWebRuleBlackListGeoAreas(request *ipanti.DescribeWebRuleBlackListGeoAreasRequest) (*ipanti.DescribeWebRuleBlackListGeoAreasResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeWebRuleBlackListGeoAreasResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改实例名称 */
func (c *IpantiClient) ModifyInstanceName(request *ipanti.ModifyInstanceNameRequest) (*ipanti.ModifyInstanceNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyInstanceNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询非网站类规则 */
func (c *IpantiClient) DescribeForwardRule(request *ipanti.DescribeForwardRuleRequest) (*ipanti.DescribeForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询转发规则的白名单规则 */
func (c *IpantiClient) DescribeWhiteListRuleOfForwardRule(request *ipanti.DescribeWhiteListRuleOfForwardRuleRequest) (*ipanti.DescribeWhiteListRuleOfForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeWhiteListRuleOfForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* CC 防护流量报表 */
func (c *IpantiClient) DescribeCCGraph(request *ipanti.DescribeCCGraphRequest) (*ipanti.DescribeCCGraphResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeCCGraphResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询实例 */
func (c *IpantiClient) DescribeInstance(request *ipanti.DescribeInstanceRequest) (*ipanti.DescribeInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 开启转发规则的黑名单规则 */
func (c *IpantiClient) EnableBlackListRuleOfForwardRule(request *ipanti.EnableBlackListRuleOfForwardRuleRequest) (*ipanti.EnableBlackListRuleOfForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.EnableBlackListRuleOfForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询告警配置 */
func (c *IpantiClient) DescribeAlarmConfig(request *ipanti.DescribeAlarmConfigRequest) (*ipanti.DescribeAlarmConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeAlarmConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加实例的 IP 黑白名单, 预定义的 IP 黑白名单绑定到转发规则的黑名单或白名单后生效 */
func (c *IpantiClient) CreateIpSet(request *ipanti.CreateIpSetRequest) (*ipanti.CreateIpSetResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.CreateIpSetResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询非网站类转发规则的防护规则 */
func (c *IpantiClient) DescribeProtectionRuleOfForwardRule(request *ipanti.DescribeProtectionRuleOfForwardRuleRequest) (*ipanti.DescribeProtectionRuleOfForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeProtectionRuleOfForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询网站类防护规则的黑名单用量信息 */
func (c *IpantiClient) DescribeWebRuleBlackListUsage(request *ipanti.DescribeWebRuleBlackListUsageRequest) (*ipanti.DescribeWebRuleBlackListUsageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeWebRuleBlackListUsageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加网站类规则的 CC 防护规则 */
func (c *IpantiClient) CreateCCProtectionRuleOfWebRule(request *ipanti.CreateCCProtectionRuleOfWebRuleRequest) (*ipanti.CreateCCProtectionRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.CreateCCProtectionRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除网站类规则允许插入 JS 指纹的页面。支持批量操作, 批量操作时 jsPageId 传多个, 以 ',' 分隔 */
func (c *IpantiClient) DeleteJsPageOfWebRule(request *ipanti.DeleteJsPageOfWebRuleRequest) (*ipanti.DeleteJsPageOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DeleteJsPageOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询网站类规则的 CC 防护默认配置 */
func (c *IpantiClient) DescribeCCProtectionDefaultConfigOfWebRule(request *ipanti.DescribeCCProtectionDefaultConfigOfWebRuleRequest) (*ipanti.DescribeCCProtectionDefaultConfigOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeCCProtectionDefaultConfigOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改网站类规则的白名单规则 */
func (c *IpantiClient) ModifyWhiteListRuleOfWebRule(request *ipanti.ModifyWhiteListRuleOfWebRuleRequest) (*ipanti.ModifyWhiteListRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyWhiteListRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询高防实例回源 IP 白名单列表 */
func (c *IpantiClient) DescribeOriginWhiteIpList(request *ipanti.DescribeOriginWhiteIpListRequest) (*ipanti.DescribeOriginWhiteIpListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeOriginWhiteIpListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 开启网站类规则的黑名单规则, 批量操作时 webBlackListRuleId 传多个, 以 ',' 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 */
func (c *IpantiClient) EnableBlackListRuleOfWebRule(request *ipanti.EnableBlackListRuleOfWebRuleRequest) (*ipanti.EnableBlackListRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.EnableBlackListRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改实例错误状态码返回页面为自定义页面 */
func (c *IpantiClient) ModifyInstanceCustomPage(request *ipanti.ModifyInstanceCustomPageRequest) (*ipanti.ModifyInstanceCustomPageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyInstanceCustomPageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 开启实例错误状态码返回页面, 错误状态码返回默认页面或自定义页面 */
func (c *IpantiClient) EnableInstanceCustomPage(request *ipanti.EnableInstanceCustomPageRequest) (*ipanti.EnableInstanceCustomPageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.EnableInstanceCustomPageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询实例的 IP 黑白名单 */
func (c *IpantiClient) DescribeIpSet(request *ipanti.DescribeIpSetRequest) (*ipanti.DescribeIpSetResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeIpSetResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除非网站规则, 批量操作时, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 */
func (c *IpantiClient) DeleteForwardRule(request *ipanti.DeleteForwardRuleRequest) (*ipanti.DeleteForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DeleteForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 网站类规则切换成防御状态。支持批量操作, 批量操作时 webRuleId 传多个, 以 ',' 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 */
func (c *IpantiClient) SwitchWebRuleProtect(request *ipanti.SwitchWebRuleProtectRequest) (*ipanti.SwitchWebRuleProtectResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.SwitchWebRuleProtectResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 插入JS指纹到配置的自定义页面, 需要打开网站类规则的JS指纹开关 */
func (c *IpantiClient) ModifyWebRuleJsPageToCustom(request *ipanti.ModifyWebRuleJsPageToCustomRequest) (*ipanti.ModifyWebRuleJsPageToCustomResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyWebRuleJsPageToCustomResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询用户可设置为网站类规则回源 IP 的京东云云物理服务器公网 IP 资源 */
func (c *IpantiClient) DescribeCpsIpList(request *ipanti.DescribeCpsIpListRequest) (*ipanti.DescribeCpsIpListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeCpsIpListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询各类型攻击次数
参数 serviceIp 优先级大于 instanceId.
- 指定 serviceIp 参数时, 忽略 instanceId 参数, 统计 ip 相关攻击
- 未指定 serviceIp 时, 统计 instanceId 指定实例相关攻击
- serviceIp 和 instanceId 均未指定时, 统计用户所有攻击记录
 */
func (c *IpantiClient) DescribeAttackTypeCount(request *ipanti.DescribeAttackTypeCountRequest) (*ipanti.DescribeAttackTypeCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeAttackTypeCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 非网站类规则切换成回源状态。支持批量操作, 批量操作时 forwardRuleId 传多个, 以 ',' 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 */
func (c *IpantiClient) SwitchForwardRuleOrigin(request *ipanti.SwitchForwardRuleOriginRequest) (*ipanti.SwitchForwardRuleOriginResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.SwitchForwardRuleOriginResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询转发规则的黑名单规则 */
func (c *IpantiClient) DescribeBlackListRuleOfForwardRule(request *ipanti.DescribeBlackListRuleOfForwardRuleRequest) (*ipanti.DescribeBlackListRuleOfForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeBlackListRuleOfForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加网站类规则允许插入JS指纹的页面 */
func (c *IpantiClient) CreateJsPageOfWebRule(request *ipanti.CreateJsPageOfWebRuleRequest) (*ipanti.CreateJsPageOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.CreateJsPageOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询非网站类转发规则的防护规则 Geo 拦截可设置区域编码 */
func (c *IpantiClient) DescribeGeoAreas(request *ipanti.DescribeGeoAreasRequest) (*ipanti.DescribeGeoAreasResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeGeoAreasResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 网站类规则开启 CC 防护, 开启后网站类规则已配置的防护规则和 CC 防护配置生效, 若没有配置过 CC 防护, 默认的 CC 防护配置生效。支持批量操作, 批量操作时 webRuleId 传多个, 以 ',' 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 */
func (c *IpantiClient) EnableWebRuleCC(request *ipanti.EnableWebRuleCCRequest) (*ipanti.EnableWebRuleCCResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.EnableWebRuleCCResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 转发流量报表 */
func (c *IpantiClient) DescribeFwdGraph(request *ipanti.DescribeFwdGraphRequest) (*ipanti.DescribeFwdGraphResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeFwdGraphResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询高防实例名称列表 */
func (c *IpantiClient) DescribeNameList(request *ipanti.DescribeNameListRequest) (*ipanti.DescribeNameListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeNameListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询某个实例下的非网站转发配置 */
func (c *IpantiClient) DescribeForwardRules(request *ipanti.DescribeForwardRulesRequest) (*ipanti.DescribeForwardRulesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeForwardRulesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除实例的 IP 黑白名单. 支持批量操作, 批量操作时 ipSetId 传多个, 以 ',' 分隔. IP 黑白名单规则被引用时不允许删除 */
func (c *IpantiClient) DeleteIpSet(request *ipanti.DeleteIpSetRequest) (*ipanti.DeleteIpSetResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DeleteIpSetResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 打开网站类规则的JS指纹开关 */
func (c *IpantiClient) EnableWebRuleJsPage(request *ipanti.EnableWebRuleJsPageRequest) (*ipanti.EnableWebRuleJsPageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.EnableWebRuleJsPageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询网站类防护规则的白名单用量信息 */
func (c *IpantiClient) DescribeWebRuleWhiteListUsage(request *ipanti.DescribeWebRuleWhiteListUsageRequest) (*ipanti.DescribeWebRuleWhiteListUsageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeWebRuleWhiteListUsageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 编辑网站规则证书信息 */
func (c *IpantiClient) ModifyCertInfo(request *ipanti.ModifyCertInfoRequest) (*ipanti.ModifyCertInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyCertInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新告警配置 */
func (c *IpantiClient) ModifyAlarmConfig(request *ipanti.ModifyAlarmConfigRequest) (*ipanti.ModifyAlarmConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyAlarmConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除网站类规则的黑名单规则, 批量操作时 webBlackListRuleId 传多个, 以 ',' 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 */
func (c *IpantiClient) DeleteBlackListRuleOfWebRule(request *ipanti.DeleteBlackListRuleOfWebRuleRequest) (*ipanti.DeleteBlackListRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DeleteBlackListRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 关闭网站类规则的黑名单规则, 批量操作时 webBlackListRuleId 传多个, 以 ',' 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 */
func (c *IpantiClient) DisableBlackListRuleOfWebRule(request *ipanti.DisableBlackListRuleOfWebRuleRequest) (*ipanti.DisableBlackListRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DisableBlackListRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 网站类规则切换成回源状态。支持批量操作, 批量操作时 webRuleId 传多个, 以 ',' 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 */
func (c *IpantiClient) SwitchWebRuleOrigin(request *ipanti.SwitchWebRuleOriginRequest) (*ipanti.SwitchWebRuleOriginResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.SwitchWebRuleOriginResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 开启网站类规则的自定义 CC 防护规则总开关, 状态为开启的自定义 CC 防护规则生效 */
func (c *IpantiClient) EnableWebRuleCCProtectionRule(request *ipanti.EnableWebRuleCCProtectionRuleRequest) (*ipanti.EnableWebRuleCCProtectionRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.EnableWebRuleCCProtectionRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 防护调度规则切换成回源状态 */
func (c *IpantiClient) SwitchDispatchRuleOrigin(request *ipanti.SwitchDispatchRuleOriginRequest) (*ipanti.SwitchDispatchRuleOriginResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.SwitchDispatchRuleOriginResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询网站类规则的黑名单规则列表 */
func (c *IpantiClient) DescribeBlackListRulesOfWebRule(request *ipanti.DescribeBlackListRulesOfWebRuleRequest) (*ipanti.DescribeBlackListRulesOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeBlackListRulesOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询某个实例下的防护调度规则 */
func (c *IpantiClient) DescribeDispatchRules(request *ipanti.DescribeDispatchRulesRequest) (*ipanti.DescribeDispatchRulesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeDispatchRulesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 新建与并发连接数统计报表        
参数 serviceIp 优先级大于 instanceId.
- 指定 serviceIp 参数时, 忽略 instanceId 参数, 查询 ip 相关报表
- 未指定 serviceIp 时, 查询 instanceId 指定实例相关报表
- serviceIp 和 instanceId 均未指定时, 查询用户所有实例报表
 */
func (c *IpantiClient) DescribeConnStatGraph(request *ipanti.DescribeConnStatGraphRequest) (*ipanti.DescribeConnStatGraphResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeConnStatGraphResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改自定义页面 */
func (c *IpantiClient) ModifyCustomPage(request *ipanti.ModifyCustomPageRequest) (*ipanti.ModifyCustomPageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyCustomPageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量添加网站类规则 */
func (c *IpantiClient) CreateWebRules(request *ipanti.CreateWebRulesRequest) (*ipanti.CreateWebRulesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.CreateWebRulesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改转发规则的白名单规则 */
func (c *IpantiClient) ModifyWhiteListRuleOfForwardRule(request *ipanti.ModifyWhiteListRuleOfForwardRuleRequest) (*ipanti.ModifyWhiteListRuleOfForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyWhiteListRuleOfForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改网站类规则的 CC 防护规则 */
func (c *IpantiClient) ModifyCCProtectionRuleOfWebRule(request *ipanti.ModifyCCProtectionRuleOfWebRuleRequest) (*ipanti.ModifyCCProtectionRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyCCProtectionRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询网站类规则的 CC 防护规则列表 */
func (c *IpantiClient) DescribeCCProtectionRulesOfWebRule(request *ipanti.DescribeCCProtectionRulesOfWebRuleRequest) (*ipanti.DescribeCCProtectionRulesOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeCCProtectionRulesOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加网站类规则的黑名单规则 */
func (c *IpantiClient) CreateBlackListRuleOfWebRule(request *ipanti.CreateBlackListRuleOfWebRuleRequest) (*ipanti.CreateBlackListRuleOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.CreateBlackListRuleOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* DDos 防护流量报表
参数 serviceIp 优先级大于 instanceId.
- 指定 serviceIp 参数时, 忽略 instanceId 参数, 查询 ip 相关报表
- 未指定 serviceIp 时, 查询 instanceId 指定实例相关报表
- serviceIp 和 instanceId 均未指定时, 查询用户所有实例报表
 */
func (c *IpantiClient) DescribeDDoSGraph(request *ipanti.DescribeDDoSGraphRequest) (*ipanti.DescribeDDoSGraphResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeDDoSGraphResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加防护调度规则 */
func (c *IpantiClient) CreateDispatchRule(request *ipanti.CreateDispatchRuleRequest) (*ipanti.CreateDispatchRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.CreateDispatchRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 关闭转发规则的黑名单规则 */
func (c *IpantiClient) DisableBlackListRuleOfForwardRule(request *ipanti.DisableBlackListRuleOfForwardRuleRequest) (*ipanti.DisableBlackListRuleOfForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DisableBlackListRuleOfForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据高防计费资源ID查询对应的实例Id, 调用 <a href='http://docs.jdcloud.com/anti-ddos-pro/api/createInstance'>createInstance</a> 接口成功后，跟据message字段返回的计费资源Id查询对应的高防实例ID, 需要高防实例实际创建成功以后才可查询得到 */
func (c *IpantiClient) DescribeInstanceIdByResourceId(request *ipanti.DescribeInstanceIdByResourceIdRequest) (*ipanti.DescribeInstanceIdByResourceIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeInstanceIdByResourceIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改网站类规则的 CC 防护配置 */
func (c *IpantiClient) ModifyCCProtectionConfigOfWebRule(request *ipanti.ModifyCCProtectionConfigOfWebRuleRequest) (*ipanti.ModifyCCProtectionConfigOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyCCProtectionConfigOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询网站类转发规则按地域回源配置 geoRsRoute 可设置的区域 */
func (c *IpantiClient) DescribeWebRuleRSGeoAreas(request *ipanti.DescribeWebRuleRSGeoAreasRequest) (*ipanti.DescribeWebRuleRSGeoAreasResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeWebRuleRSGeoAreasResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询实例全局访问控制配置，包括全局的IP黑白名单和geo拦截配置 */
func (c *IpantiClient) DescribeInstanceAcl(request *ipanti.DescribeInstanceAclRequest) (*ipanti.DescribeInstanceAclResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeInstanceAclResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询网站类规则的白名单规则列表 */
func (c *IpantiClient) DescribeWhiteListRulesOfWebRule(request *ipanti.DescribeWhiteListRulesOfWebRuleRequest) (*ipanti.DescribeWhiteListRulesOfWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeWhiteListRulesOfWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加非网站类规则 */
func (c *IpantiClient) CreateForwardRule(request *ipanti.CreateForwardRuleRequest) (*ipanti.CreateForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.CreateForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询用户可设置为网站类规则回源 IP 的京东云云内弹性公网 IP 资源 */
func (c *IpantiClient) DescribeVpcIpList(request *ipanti.DescribeVpcIpListRequest) (*ipanti.DescribeVpcIpListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeVpcIpListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改非网站类转发规则的防护规则 */
func (c *IpantiClient) ModifyProtectionRuleOfForwardRule(request *ipanti.ModifyProtectionRuleOfForwardRuleRequest) (*ipanti.ModifyProtectionRuleOfForwardRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.ModifyProtectionRuleOfForwardRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除网站规则。支持批量操作, 批量操作时 webRuleId 传多个, 以 ',' 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 */
func (c *IpantiClient) DeleteWebRule(request *ipanti.DeleteWebRuleRequest) (*ipanti.DeleteWebRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DeleteWebRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量添加防护调度规则 */
func (c *IpantiClient) CreateDispatchRules(request *ipanti.CreateDispatchRulesRequest) (*ipanti.CreateDispatchRulesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.CreateDispatchRulesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 业务流量报表        
参数 serviceIp 优先级大于 instanceId.
- 指定 serviceIp 参数时, 忽略 instanceId 参数, 查询 ip 相关报表
- 未指定 serviceIp 时, 查询 instanceId 指定实例相关报表
- serviceIp 和 instanceId 均未指定时, 查询用户所有实例报表
 */
func (c *IpantiClient) DescribeBusinessGraph(request *ipanti.DescribeBusinessGraphRequest) (*ipanti.DescribeBusinessGraphResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.DescribeBusinessGraphResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 开启网站类规则 CC 观察者模式, 观察模式下, CC 防护只告警不防御。支持批量操作, 批量操作时 webRuleId 传多个, 以 ',' 分隔, 返回 result.code 为 1 表示操作成功, 为 0 时可能全部失败, 也可能部分失败 */
func (c *IpantiClient) EnableWebRuleCCObserverMode(request *ipanti.EnableWebRuleCCObserverModeRequest) (*ipanti.EnableWebRuleCCObserverModeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ipanti.EnableWebRuleCCObserverModeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

