// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    jcq "github.com/jdcloud-api/jdcloud-sdk-go/services/jcq/models"
)

type DescribeSubscriptionsRequest struct {

    core.JDCloudRequest

    /* 所在区域的Region ID  */
    RegionId string `json:"regionId"`

    /* topic 名称  */
    TopicName string `json:"topicName"`

    /* consumerGroupFilter，consumerGroupId的过滤条件 (Optional) */
    ConsumerGroupFilter *string `json:"consumerGroupFilter"`

    /* 分页之中的每页大小 (Optional) */
    PageSize *int `json:"pageSize"`

    /* 分页之中的页码 (Optional) */
    PageNumber *int `json:"pageNumber"`
}

/*
 * param regionId: 所在区域的Region ID (Required)
 * param topicName: topic 名称 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeSubscriptionsRequest(
    regionId string,
    topicName string,
) *DescribeSubscriptionsRequest {

	return &DescribeSubscriptionsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/topics/{topicName}/subscriptions",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        TopicName: topicName,
	}
}

/*
 * param regionId: 所在区域的Region ID (Required)
 * param topicName: topic 名称 (Required)
 * param consumerGroupFilter: consumerGroupFilter，consumerGroupId的过滤条件 (Optional)
 * param pageSize: 分页之中的每页大小 (Optional)
 * param pageNumber: 分页之中的页码 (Optional)
 */
func NewDescribeSubscriptionsRequestWithAllParams(
    regionId string,
    topicName string,
    consumerGroupFilter *string,
    pageSize *int,
    pageNumber *int,
) *DescribeSubscriptionsRequest {

    return &DescribeSubscriptionsRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/topics/{topicName}/subscriptions",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        TopicName: topicName,
        ConsumerGroupFilter: consumerGroupFilter,
        PageSize: pageSize,
        PageNumber: pageNumber,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeSubscriptionsRequestWithoutParam() *DescribeSubscriptionsRequest {

    return &DescribeSubscriptionsRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/topics/{topicName}/subscriptions",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 所在区域的Region ID(Required) */
func (r *DescribeSubscriptionsRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param topicName: topic 名称(Required) */
func (r *DescribeSubscriptionsRequest) SetTopicName(topicName string) {
    r.TopicName = topicName
}

/* param consumerGroupFilter: consumerGroupFilter，consumerGroupId的过滤条件(Optional) */
func (r *DescribeSubscriptionsRequest) SetConsumerGroupFilter(consumerGroupFilter string) {
    r.ConsumerGroupFilter = &consumerGroupFilter
}

/* param pageSize: 分页之中的每页大小(Optional) */
func (r *DescribeSubscriptionsRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

/* param pageNumber: 分页之中的页码(Optional) */
func (r *DescribeSubscriptionsRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeSubscriptionsRequest) GetRegionId() string {
    return r.RegionId
}

type DescribeSubscriptionsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeSubscriptionsResult `json:"result"`
}

type DescribeSubscriptionsResult struct {
    Subscriptions []jcq.Subscription `json:"subscriptions"`
    TotalCount int `json:"totalCount"`
}