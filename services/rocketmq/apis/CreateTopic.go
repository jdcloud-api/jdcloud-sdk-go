// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type CreateTopicRequest struct {

    core.JDCloudRequest

    /* 区域id  */
    RegionId string `json:"regionId"`

    /* 实例id  */
    InstanceId string `json:"instanceId"`

    /* topic名称  */
    Topic string `json:"topic"`

    /* 类型，[NORMAL,GLOBAL_ORDER，PARTITION_ORDER，TRANSACTION，DELAY]  */
    TopicType string `json:"topicType"`

    /* 描述，长度不大于128 (Optional) */
    Description *string `json:"description"`

    /* 分区数[1-32] (Optional) */
    QueueNums *int `json:"queueNums"`
}

/*
 * param regionId: 区域id (Required)
 * param instanceId: 实例id (Required)
 * param topic: topic名称 (Required)
 * param topicType: 类型，[NORMAL,GLOBAL_ORDER，PARTITION_ORDER，TRANSACTION，DELAY] (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateTopicRequest(
    regionId string,
    instanceId string,
    topic string,
    topicType string,
) *CreateTopicRequest {

	return &CreateTopicRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/instances/{instanceId}/topics",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        InstanceId: instanceId,
        Topic: topic,
        TopicType: topicType,
	}
}

/*
 * param regionId: 区域id (Required)
 * param instanceId: 实例id (Required)
 * param topic: topic名称 (Required)
 * param topicType: 类型，[NORMAL,GLOBAL_ORDER，PARTITION_ORDER，TRANSACTION，DELAY] (Required)
 * param description: 描述，长度不大于128 (Optional)
 * param queueNums: 分区数[1-32] (Optional)
 */
func NewCreateTopicRequestWithAllParams(
    regionId string,
    instanceId string,
    topic string,
    topicType string,
    description *string,
    queueNums *int,
) *CreateTopicRequest {

    return &CreateTopicRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}/topics",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        InstanceId: instanceId,
        Topic: topic,
        TopicType: topicType,
        Description: description,
        QueueNums: queueNums,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateTopicRequestWithoutParam() *CreateTopicRequest {

    return &CreateTopicRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}/topics",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 区域id(Required) */
func (r *CreateTopicRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param instanceId: 实例id(Required) */
func (r *CreateTopicRequest) SetInstanceId(instanceId string) {
    r.InstanceId = instanceId
}
/* param topic: topic名称(Required) */
func (r *CreateTopicRequest) SetTopic(topic string) {
    r.Topic = topic
}
/* param topicType: 类型，[NORMAL,GLOBAL_ORDER，PARTITION_ORDER，TRANSACTION，DELAY](Required) */
func (r *CreateTopicRequest) SetTopicType(topicType string) {
    r.TopicType = topicType
}
/* param description: 描述，长度不大于128(Optional) */
func (r *CreateTopicRequest) SetDescription(description string) {
    r.Description = &description
}
/* param queueNums: 分区数[1-32](Optional) */
func (r *CreateTopicRequest) SetQueueNums(queueNums int) {
    r.QueueNums = &queueNums
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateTopicRequest) GetRegionId() string {
    return r.RegionId
}

type CreateTopicResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateTopicResult `json:"result"`
}

type CreateTopicResult struct {
    Topic string `json:"topic"`
}