// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    rocketmq "github.com/jdcloud-api/jdcloud-sdk-go/services/rocketmq/models"
)

type DescribeTopicsRequest struct {

    core.JDCloudRequest

    /* 区域id  */
    RegionId string `json:"regionId"`

    /* 实例id  */
    InstanceId string `json:"instanceId"`

    /* 分页大小；默认为10；取值范围[10, 100]  */
    PageSize int `json:"pageSize"`

    /* 页码  */
    PageNumber int `json:"pageNumber"`

    /* topic名称的过滤条件 (Optional) */
    TopicFilter *string `json:"topicFilter"`

    /* topic类型的过滤条件 (Optional) */
    TypeFilter *string `json:"typeFilter"`
}

/*
 * param regionId: 区域id (Required)
 * param instanceId: 实例id (Required)
 * param pageSize: 分页大小；默认为10；取值范围[10, 100] (Required)
 * param pageNumber: 页码 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeTopicsRequest(
    regionId string,
    instanceId string,
    pageSize int,
    pageNumber int,
) *DescribeTopicsRequest {

	return &DescribeTopicsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/instances/{instanceId}/topics",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        InstanceId: instanceId,
        PageSize: pageSize,
        PageNumber: pageNumber,
	}
}

/*
 * param regionId: 区域id (Required)
 * param instanceId: 实例id (Required)
 * param pageSize: 分页大小；默认为10；取值范围[10, 100] (Required)
 * param pageNumber: 页码 (Required)
 * param topicFilter: topic名称的过滤条件 (Optional)
 * param typeFilter: topic类型的过滤条件 (Optional)
 */
func NewDescribeTopicsRequestWithAllParams(
    regionId string,
    instanceId string,
    pageSize int,
    pageNumber int,
    topicFilter *string,
    typeFilter *string,
) *DescribeTopicsRequest {

    return &DescribeTopicsRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}/topics",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        InstanceId: instanceId,
        PageSize: pageSize,
        PageNumber: pageNumber,
        TopicFilter: topicFilter,
        TypeFilter: typeFilter,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeTopicsRequestWithoutParam() *DescribeTopicsRequest {

    return &DescribeTopicsRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}/topics",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 区域id(Required) */
func (r *DescribeTopicsRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param instanceId: 实例id(Required) */
func (r *DescribeTopicsRequest) SetInstanceId(instanceId string) {
    r.InstanceId = instanceId
}
/* param pageSize: 分页大小；默认为10；取值范围[10, 100](Required) */
func (r *DescribeTopicsRequest) SetPageSize(pageSize int) {
    r.PageSize = pageSize
}
/* param pageNumber: 页码(Required) */
func (r *DescribeTopicsRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = pageNumber
}
/* param topicFilter: topic名称的过滤条件(Optional) */
func (r *DescribeTopicsRequest) SetTopicFilter(topicFilter string) {
    r.TopicFilter = &topicFilter
}
/* param typeFilter: topic类型的过滤条件(Optional) */
func (r *DescribeTopicsRequest) SetTypeFilter(typeFilter string) {
    r.TypeFilter = &typeFilter
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeTopicsRequest) GetRegionId() string {
    return r.RegionId
}

type DescribeTopicsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeTopicsResult `json:"result"`
}

type DescribeTopicsResult struct {
    TotalCount int `json:"totalCount"`
    TopicList []rocketmq.Topic `json:"topicList"`
}