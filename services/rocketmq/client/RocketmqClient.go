// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    rocketmq "github.com/jdcloud-api/jdcloud-sdk-go/services/rocketmq/apis"
    "encoding/json"
    "errors"
)

type RocketmqClient struct {
    core.JDCloudClient
}

func NewRocketmqClient(credential *core.Credential) *RocketmqClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("rocketmq.jdcloud-api.com")

    return &RocketmqClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "rocketmq",
            Revision:    "1.0.0",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *RocketmqClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *RocketmqClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *RocketmqClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 修改consumerGroup */
func (c *RocketmqClient) UpdateConsumerGroup(request *rocketmq.UpdateConsumerGroupRequest) (*rocketmq.UpdateConsumerGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.UpdateConsumerGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建指定名称的topic */
func (c *RocketmqClient) CreateTopic(request *rocketmq.CreateTopicRequest) (*rocketmq.CreateTopicResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.CreateTopicResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询topic详情 */
func (c *RocketmqClient) DescribeTopic(request *rocketmq.DescribeTopicRequest) (*rocketmq.DescribeTopicResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.DescribeTopicResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除单个topic */
func (c *RocketmqClient) DeleteTopic(request *rocketmq.DeleteTopicRequest) (*rocketmq.DeleteTopicResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.DeleteTopicResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除consumerGroup */
func (c *RocketmqClient) DeleteConsumerGroup(request *rocketmq.DeleteConsumerGroupRequest) (*rocketmq.DeleteConsumerGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.DeleteConsumerGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询topic列表，用于消息查询接口，下拉框选择topic */
func (c *RocketmqClient) DescribeTopicNames(request *rocketmq.DescribeTopicNamesRequest) (*rocketmq.DescribeTopicNamesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.DescribeTopicNamesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询消息消费轨迹（消费者客户端列表） */
func (c *RocketmqClient) DescribeConsumeTraceDetail(request *rocketmq.DescribeConsumeTraceDetailRequest) (*rocketmq.DescribeConsumeTraceDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.DescribeConsumeTraceDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* consumerGroup列表 */
func (c *RocketmqClient) DescribeConsumerGroups(request *rocketmq.DescribeConsumerGroupsRequest) (*rocketmq.DescribeConsumerGroupsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.DescribeConsumerGroupsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建consumerGroup */
func (c *RocketmqClient) CreateConsumerGroup(request *rocketmq.CreateConsumerGroupRequest) (*rocketmq.CreateConsumerGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.CreateConsumerGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 消费者订阅过的topic列表，用于重置消费位点 */
func (c *RocketmqClient) DescribeConsumerAllTopics(request *rocketmq.DescribeConsumerAllTopicsRequest) (*rocketmq.DescribeConsumerAllTopicsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.DescribeConsumerAllTopicsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询消息生产轨迹 */
func (c *RocketmqClient) DescribeProduceTrace(request *rocketmq.DescribeProduceTraceRequest) (*rocketmq.DescribeProduceTraceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.DescribeProduceTraceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* consumerGroup在线订阅topic信息 */
func (c *RocketmqClient) DescribeConsumerSubTopics(request *rocketmq.DescribeConsumerSubTopicsRequest) (*rocketmq.DescribeConsumerSubTopicsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.DescribeConsumerSubTopicsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* consumerGroup名称列表，用于查死信消息下拉框 */
func (c *RocketmqClient) DescribeConsumerGroupNames(request *rocketmq.DescribeConsumerGroupNamesRequest) (*rocketmq.DescribeConsumerGroupNamesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.DescribeConsumerGroupNamesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据msgId查询消息详情 */
func (c *RocketmqClient) DescribeMessageByMsgId(request *rocketmq.DescribeMessageByMsgIdRequest) (*rocketmq.DescribeMessageByMsgIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.DescribeMessageByMsgIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 发送消息 */
func (c *RocketmqClient) SendMessage(request *rocketmq.SendMessageRequest) (*rocketmq.SendMessageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.SendMessageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* topic订阅管理列表，显示订阅过该topic的consumerGroup */
func (c *RocketmqClient) DescribeConsumersByTopic(request *rocketmq.DescribeConsumersByTopicRequest) (*rocketmq.DescribeConsumersByTopicResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.DescribeConsumersByTopicResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 重置消费位点（消费组可以不在线） */
func (c *RocketmqClient) ResetOffset(request *rocketmq.ResetOffsetRequest) (*rocketmq.ResetOffsetResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.ResetOffsetResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询topic列表 */
func (c *RocketmqClient) DescribeTopics(request *rocketmq.DescribeTopicsRequest) (*rocketmq.DescribeTopicsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.DescribeTopicsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* consumerGroup状态详情 */
func (c *RocketmqClient) DescribeConsumerGroupStatus(request *rocketmq.DescribeConsumerGroupStatusRequest) (*rocketmq.DescribeConsumerGroupStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.DescribeConsumerGroupStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询消息列表 */
func (c *RocketmqClient) DescribeMessages(request *rocketmq.DescribeMessagesRequest) (*rocketmq.DescribeMessagesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.DescribeMessagesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询消息消费轨迹（消费组列表） */
func (c *RocketmqClient) DescribeConsumeTrace(request *rocketmq.DescribeConsumeTraceRequest) (*rocketmq.DescribeConsumeTraceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.DescribeConsumeTraceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改topic描述 */
func (c *RocketmqClient) UpdateTopicDescription(request *rocketmq.UpdateTopicDescriptionRequest) (*rocketmq.UpdateTopicDescriptionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rocketmq.UpdateTopicDescriptionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

