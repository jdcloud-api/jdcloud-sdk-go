// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    function "github.com/jdcloud-api/jdcloud-sdk-go/services/function/models"
)

type UpdateFunctionRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* 函数名称  */
    FunctionName string `json:"functionName"`

    /* 函数描述信息  */
    Description string `json:"description"`

    /* 函数入口，格式为入口文件.入口函数名  */
    Entrance string `json:"entrance"`

    /* 函数运行最大内存  */
    Memory int `json:"memory"`

    /* 函数运行环境  */
    RunTime string `json:"runTime"`

    /* 函数运行超时时间  */
    OverTime int `json:"overTime"`

    /* 函数版本 (Optional) */
    Version *string `json:"version"`

    /* 函数代码包  */
    Code *function.Code `json:"code"`

    /* 函数运行时环境变量  */
    Environment *function.Env `json:"environment"`

    /* 函数指定的日志集Id  */
    LogSetId string `json:"logSetId"`

    /* 函数指定的日志主题Id  */
    LogTopicId string `json:"logTopicId"`

    /* 函数配置的VPCId  */
    VpcId string `json:"vpcId"`

    /* 函数配置的子网Id  */
    SubnetId string `json:"subnetId"`
}

/*
 * param regionId: Region ID (Required)
 * param functionName: 函数名称 (Required)
 * param description: 函数描述信息 (Required)
 * param entrance: 函数入口，格式为入口文件.入口函数名 (Required)
 * param memory: 函数运行最大内存 (Required)
 * param runTime: 函数运行环境 (Required)
 * param overTime: 函数运行超时时间 (Required)
 * param code: 函数代码包 (Required)
 * param environment: 函数运行时环境变量 (Required)
 * param logSetId: 函数指定的日志集Id (Required)
 * param logTopicId: 函数指定的日志主题Id (Required)
 * param vpcId: 函数配置的VPCId (Required)
 * param subnetId: 函数配置的子网Id (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateFunctionRequest(
    regionId string,
    functionName string,
    description string,
    entrance string,
    memory int,
    runTime string,
    overTime int,
    code *function.Code,
    environment *function.Env,
    logSetId string,
    logTopicId string,
    vpcId string,
    subnetId string,
) *UpdateFunctionRequest {

	return &UpdateFunctionRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/functions/{functionName}",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        FunctionName: functionName,
        Description: description,
        Entrance: entrance,
        Memory: memory,
        RunTime: runTime,
        OverTime: overTime,
        Code: code,
        Environment: environment,
        LogSetId: logSetId,
        LogTopicId: logTopicId,
        VpcId: vpcId,
        SubnetId: subnetId,
	}
}

/*
 * param regionId: Region ID (Required)
 * param functionName: 函数名称 (Required)
 * param description: 函数描述信息 (Required)
 * param entrance: 函数入口，格式为入口文件.入口函数名 (Required)
 * param memory: 函数运行最大内存 (Required)
 * param runTime: 函数运行环境 (Required)
 * param overTime: 函数运行超时时间 (Required)
 * param version: 函数版本 (Optional)
 * param code: 函数代码包 (Required)
 * param environment: 函数运行时环境变量 (Required)
 * param logSetId: 函数指定的日志集Id (Required)
 * param logTopicId: 函数指定的日志主题Id (Required)
 * param vpcId: 函数配置的VPCId (Required)
 * param subnetId: 函数配置的子网Id (Required)
 */
func NewUpdateFunctionRequestWithAllParams(
    regionId string,
    functionName string,
    description string,
    entrance string,
    memory int,
    runTime string,
    overTime int,
    version *string,
    code *function.Code,
    environment *function.Env,
    logSetId string,
    logTopicId string,
    vpcId string,
    subnetId string,
) *UpdateFunctionRequest {

    return &UpdateFunctionRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/functions/{functionName}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        FunctionName: functionName,
        Description: description,
        Entrance: entrance,
        Memory: memory,
        RunTime: runTime,
        OverTime: overTime,
        Version: version,
        Code: code,
        Environment: environment,
        LogSetId: logSetId,
        LogTopicId: logTopicId,
        VpcId: vpcId,
        SubnetId: subnetId,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateFunctionRequestWithoutParam() *UpdateFunctionRequest {

    return &UpdateFunctionRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/functions/{functionName}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *UpdateFunctionRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param functionName: 函数名称(Required) */
func (r *UpdateFunctionRequest) SetFunctionName(functionName string) {
    r.FunctionName = functionName
}

/* param description: 函数描述信息(Required) */
func (r *UpdateFunctionRequest) SetDescription(description string) {
    r.Description = description
}

/* param entrance: 函数入口，格式为入口文件.入口函数名(Required) */
func (r *UpdateFunctionRequest) SetEntrance(entrance string) {
    r.Entrance = entrance
}

/* param memory: 函数运行最大内存(Required) */
func (r *UpdateFunctionRequest) SetMemory(memory int) {
    r.Memory = memory
}

/* param runTime: 函数运行环境(Required) */
func (r *UpdateFunctionRequest) SetRunTime(runTime string) {
    r.RunTime = runTime
}

/* param overTime: 函数运行超时时间(Required) */
func (r *UpdateFunctionRequest) SetOverTime(overTime int) {
    r.OverTime = overTime
}

/* param version: 函数版本(Optional) */
func (r *UpdateFunctionRequest) SetVersion(version string) {
    r.Version = &version
}

/* param code: 函数代码包(Required) */
func (r *UpdateFunctionRequest) SetCode(code *function.Code) {
    r.Code = code
}

/* param environment: 函数运行时环境变量(Required) */
func (r *UpdateFunctionRequest) SetEnvironment(environment *function.Env) {
    r.Environment = environment
}

/* param logSetId: 函数指定的日志集Id(Required) */
func (r *UpdateFunctionRequest) SetLogSetId(logSetId string) {
    r.LogSetId = logSetId
}

/* param logTopicId: 函数指定的日志主题Id(Required) */
func (r *UpdateFunctionRequest) SetLogTopicId(logTopicId string) {
    r.LogTopicId = logTopicId
}

/* param vpcId: 函数配置的VPCId(Required) */
func (r *UpdateFunctionRequest) SetVpcId(vpcId string) {
    r.VpcId = vpcId
}

/* param subnetId: 函数配置的子网Id(Required) */
func (r *UpdateFunctionRequest) SetSubnetId(subnetId string) {
    r.SubnetId = subnetId
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateFunctionRequest) GetRegionId() string {
    return r.RegionId
}

type UpdateFunctionResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateFunctionResult `json:"result"`
}

type UpdateFunctionResult struct {
    Data function.Function `json:"data"`
}