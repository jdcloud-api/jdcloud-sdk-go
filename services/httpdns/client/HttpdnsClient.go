// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    httpdns "github.com/jdcloud-api/jdcloud-sdk-go/services/httpdns/apis"
    "encoding/json"
    "errors"
)

type HttpdnsClient struct {
    core.JDCloudClient
}

func NewHttpdnsClient(credential *core.Credential) *HttpdnsClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("httpdns.jdcloud-api.com")

    return &HttpdnsClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "httpdns",
            Revision:    "1.0.0",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *HttpdnsClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *HttpdnsClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 查询httpdns账户的基本信息 */
func (c *HttpdnsClient) GetAccountInfo(request *httpdns.GetAccountInfoRequest) (*httpdns.GetAccountInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &httpdns.GetAccountInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 创建httpdns账户 */
func (c *HttpdnsClient) CreateAccount(request *httpdns.CreateAccountRequest) (*httpdns.CreateAccountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &httpdns.CreateAccountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询使用httpdns服务的域名 */
func (c *HttpdnsClient) GetDomains(request *httpdns.GetDomainsRequest) (*httpdns.GetDomainsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &httpdns.GetDomainsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 添加域名。<br>
可以添加顶级域名除外的多级域名。
 */
func (c *HttpdnsClient) AddDomains(request *httpdns.AddDomainsRequest) (*httpdns.AddDomainsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &httpdns.AddDomainsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 删除域名 */
func (c *HttpdnsClient) DelDomains(request *httpdns.DelDomainsRequest) (*httpdns.DelDomainsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &httpdns.DelDomainsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 创建，启用，禁用httpdns服务密钥 */
func (c *HttpdnsClient) OperateKey(request *httpdns.OperateKeyRequest) (*httpdns.OperateKeyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &httpdns.OperateKeyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询用户名下httpdns的账户ID */
func (c *HttpdnsClient) GetAccountId(request *httpdns.GetAccountIdRequest) (*httpdns.GetAccountIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &httpdns.GetAccountIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

