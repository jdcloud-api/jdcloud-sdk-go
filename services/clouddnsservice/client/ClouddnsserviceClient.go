// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    clouddnsservice "github.com/jdcloud-api/jdcloud-sdk-go/services/clouddnsservice/apis"
    "encoding/json"
    "errors"
)

type ClouddnsserviceClient struct {
    core.JDCloudClient
}

func NewClouddnsserviceClient(credential *core.Credential) *ClouddnsserviceClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("clouddnsservice.jdcloud-api.com")

    return &ClouddnsserviceClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "clouddnsservice",
            Revision:    "1.0.3",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *ClouddnsserviceClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *ClouddnsserviceClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 删除主域名 */
func (c *ClouddnsserviceClient) DelDomain(request *clouddnsservice.DelDomainRequest) (*clouddnsservice.DelDomainResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.DelDomainResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 域名的监控项修改 */
func (c *ClouddnsserviceClient) UpdateMonitor(request *clouddnsservice.UpdateMonitorRequest) (*clouddnsservice.UpdateMonitorResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.UpdateMonitorResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 添加域名的解析记录 */
func (c *ClouddnsserviceClient) AddRR(request *clouddnsservice.AddRRRequest) (*clouddnsservice.AddRRResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.AddRRResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询用户名下的主域名列表 */
func (c *ClouddnsserviceClient) GetDomains(request *clouddnsservice.GetDomainsRequest) (*clouddnsservice.GetDomainsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.GetDomainsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 主域名的监控项的报警信息 */
func (c *ClouddnsserviceClient) GetMonitorAlarmInfo(request *clouddnsservice.GetMonitorAlarmInfoRequest) (*clouddnsservice.GetMonitorAlarmInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.GetMonitorAlarmInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 添加子域名的某些特定监控对象为监控项 */
func (c *ClouddnsserviceClient) AddMonitorTarget(request *clouddnsservice.AddMonitorTargetRequest) (*clouddnsservice.AddMonitorTargetResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.AddMonitorTargetResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 添加主域名 */
func (c *ClouddnsserviceClient) AddDomain(request *clouddnsservice.AddDomainRequest) (*clouddnsservice.AddDomainResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.AddDomainResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查看域名的查询流量 */
func (c *ClouddnsserviceClient) GetDomainQueryTraffic(request *clouddnsservice.GetDomainQueryTrafficRequest) (*clouddnsservice.GetDomainQueryTrafficResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.GetDomainQueryTrafficResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询子域名的可用监控对象 */
func (c *ClouddnsserviceClient) GetTargets(request *clouddnsservice.GetTargetsRequest) (*clouddnsservice.GetTargetsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.GetTargetsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查看域名的解析次数 */
func (c *ClouddnsserviceClient) GetDomainQueryCount(request *clouddnsservice.GetDomainQueryCountRequest) (*clouddnsservice.GetDomainQueryCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.GetDomainQueryCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 添加子域名的监控项，默认把子域名的所有监控项都添加上监控 */
func (c *ClouddnsserviceClient) AddMonitor(request *clouddnsservice.AddMonitorRequest) (*clouddnsservice.AddMonitorResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.AddMonitorResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询云解析所有的基础解析线路 */
func (c *ClouddnsserviceClient) GetViewTree(request *clouddnsservice.GetViewTreeRequest) (*clouddnsservice.GetViewTreeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.GetViewTreeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 修改主域名的某个解析记录 */
func (c *ClouddnsserviceClient) UpdateRR(request *clouddnsservice.UpdateRRRequest) (*clouddnsservice.UpdateRRResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.UpdateRRResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查看主域名的监控项的配置以及状态 */
func (c *ClouddnsserviceClient) GetMonitor(request *clouddnsservice.GetMonitorRequest) (*clouddnsservice.GetMonitorResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.GetMonitorResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 监控项的操作集合，包括：删除，暂停，启动, 手动恢复, 手动切换 */
func (c *ClouddnsserviceClient) OperateMonitor(request *clouddnsservice.OperateMonitorRequest) (*clouddnsservice.OperateMonitorResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.OperateMonitorResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 修改主域名 */
func (c *ClouddnsserviceClient) UpdateDomain(request *clouddnsservice.UpdateDomainRequest) (*clouddnsservice.UpdateDomainResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.UpdateDomainResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询主域名的解析记录 */
func (c *ClouddnsserviceClient) SearchRR(request *clouddnsservice.SearchRRRequest) (*clouddnsservice.SearchRRResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.SearchRRResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 启用、停用、删除主域名下的解析记录 */
func (c *ClouddnsserviceClient) OperateRR(request *clouddnsservice.OperateRRRequest) (*clouddnsservice.OperateRRResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &clouddnsservice.OperateRRResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

