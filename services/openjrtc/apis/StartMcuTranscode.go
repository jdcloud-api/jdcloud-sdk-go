// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    openjrtc "github.com/lshuining/jdcloud-sdk-go/services/openjrtc/models"
)

type StartMcuTranscodeRequest struct {

    core.JDCloudRequest

    /* 应用ID (Optional) */
    AppId *string `json:"appId"`

    /* 业务接入方定义的且在JRTC系统内注册过的房间号 (Optional) */
    UserRoomId *string `json:"userRoomId"`

    /* 布局模板-支持参数1 (Optional) */
    LayoutTemplate *int `json:"layoutTemplate"`

    /* 主人员userId (Optional) */
    MainUserId *string `json:"mainUserId"`

    /* 输出类型 1：录制 2：旁路转推 (Optional) */
    OutputType *int `json:"outputType"`

    /* 输出名称 (Optional) */
    OutputName *string `json:"outputName"`

    /* 参与混流人员参数 (Optional) */
    McuUserInfos []openjrtc.McuUser `json:"mcuUserInfos"`

    /* 输出格式 (Optional) */
    OutputEncode *openjrtc.OutputEncode `json:"outputEncode"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewStartMcuTranscodeRequest(
) *StartMcuTranscodeRequest {

	return &StartMcuTranscodeRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/startMcuTranscode",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param appId: 应用ID (Optional)
 * param userRoomId: 业务接入方定义的且在JRTC系统内注册过的房间号 (Optional)
 * param layoutTemplate: 布局模板-支持参数1 (Optional)
 * param mainUserId: 主人员userId (Optional)
 * param outputType: 输出类型 1：录制 2：旁路转推 (Optional)
 * param outputName: 输出名称 (Optional)
 * param mcuUserInfos: 参与混流人员参数 (Optional)
 * param outputEncode: 输出格式 (Optional)
 */
func NewStartMcuTranscodeRequestWithAllParams(
    appId *string,
    userRoomId *string,
    layoutTemplate *int,
    mainUserId *string,
    outputType *int,
    outputName *string,
    mcuUserInfos []openjrtc.McuUser,
    outputEncode *openjrtc.OutputEncode,
) *StartMcuTranscodeRequest {

    return &StartMcuTranscodeRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/startMcuTranscode",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        AppId: appId,
        UserRoomId: userRoomId,
        LayoutTemplate: layoutTemplate,
        MainUserId: mainUserId,
        OutputType: outputType,
        OutputName: outputName,
        McuUserInfos: mcuUserInfos,
        OutputEncode: outputEncode,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewStartMcuTranscodeRequestWithoutParam() *StartMcuTranscodeRequest {

    return &StartMcuTranscodeRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/startMcuTranscode",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param appId: 应用ID(Optional) */
func (r *StartMcuTranscodeRequest) SetAppId(appId string) {
    r.AppId = &appId
}

/* param userRoomId: 业务接入方定义的且在JRTC系统内注册过的房间号(Optional) */
func (r *StartMcuTranscodeRequest) SetUserRoomId(userRoomId string) {
    r.UserRoomId = &userRoomId
}

/* param layoutTemplate: 布局模板-支持参数1(Optional) */
func (r *StartMcuTranscodeRequest) SetLayoutTemplate(layoutTemplate int) {
    r.LayoutTemplate = &layoutTemplate
}

/* param mainUserId: 主人员userId(Optional) */
func (r *StartMcuTranscodeRequest) SetMainUserId(mainUserId string) {
    r.MainUserId = &mainUserId
}

/* param outputType: 输出类型 1：录制 2：旁路转推(Optional) */
func (r *StartMcuTranscodeRequest) SetOutputType(outputType int) {
    r.OutputType = &outputType
}

/* param outputName: 输出名称(Optional) */
func (r *StartMcuTranscodeRequest) SetOutputName(outputName string) {
    r.OutputName = &outputName
}

/* param mcuUserInfos: 参与混流人员参数(Optional) */
func (r *StartMcuTranscodeRequest) SetMcuUserInfos(mcuUserInfos []openjrtc.McuUser) {
    r.McuUserInfos = mcuUserInfos
}

/* param outputEncode: 输出格式(Optional) */
func (r *StartMcuTranscodeRequest) SetOutputEncode(outputEncode *openjrtc.OutputEncode) {
    r.OutputEncode = outputEncode
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r StartMcuTranscodeRequest) GetRegionId() string {
    return ""
}

type StartMcuTranscodeResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result StartMcuTranscodeResult `json:"result"`
}

type StartMcuTranscodeResult struct {
}