// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type InvokeThingServiceRequest struct {

    core.JDCloudRequest

    /* 设备归属的实例所在区域  */
    RegionId string `json:"regionId"`

    /* 设备唯一标识  */
    Identifier string `json:"identifier"`

    /* 产品Key  */
    ProductKey string `json:"productKey"`

    /* 服务名称 (Optional) */
    Name *string `json:"name"`

    /* 输入参数,object的key为参数名称，value为参数值 (Optional) */
    Input *interface{} `json:"input"`
}

/*
 * param regionId: 设备归属的实例所在区域 (Required)
 * param identifier: 设备唯一标识 (Required)
 * param productKey: 产品Key (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewInvokeThingServiceRequest(
    regionId string,
    identifier string,
    productKey string,
) *InvokeThingServiceRequest {

	return &InvokeThingServiceRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/products/{productKey}/devices/{identifier}/services",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        RegionId: regionId,
        Identifier: identifier,
        ProductKey: productKey,
	}
}

/*
 * param regionId: 设备归属的实例所在区域 (Required)
 * param identifier: 设备唯一标识 (Required)
 * param productKey: 产品Key (Required)
 * param name: 服务名称 (Optional)
 * param input: 输入参数,object的key为参数名称，value为参数值 (Optional)
 */
func NewInvokeThingServiceRequestWithAllParams(
    regionId string,
    identifier string,
    productKey string,
    name *string,
    input *interface{},
) *InvokeThingServiceRequest {

    return &InvokeThingServiceRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/products/{productKey}/devices/{identifier}/services",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        RegionId: regionId,
        Identifier: identifier,
        ProductKey: productKey,
        Name: name,
        Input: input,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewInvokeThingServiceRequestWithoutParam() *InvokeThingServiceRequest {

    return &InvokeThingServiceRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/products/{productKey}/devices/{identifier}/services",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param regionId: 设备归属的实例所在区域(Required) */
func (r *InvokeThingServiceRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param identifier: 设备唯一标识(Required) */
func (r *InvokeThingServiceRequest) SetIdentifier(identifier string) {
    r.Identifier = identifier
}

/* param productKey: 产品Key(Required) */
func (r *InvokeThingServiceRequest) SetProductKey(productKey string) {
    r.ProductKey = productKey
}

/* param name: 服务名称(Optional) */
func (r *InvokeThingServiceRequest) SetName(name string) {
    r.Name = &name
}

/* param input: 输入参数,object的key为参数名称，value为参数值(Optional) */
func (r *InvokeThingServiceRequest) SetInput(input interface{}) {
    r.Input = &input
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r InvokeThingServiceRequest) GetRegionId() string {
    return r.RegionId
}

type InvokeThingServiceResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result InvokeThingServiceResult `json:"result"`
}

type InvokeThingServiceResult struct {
    MsgId string `json:"msgId"`
}