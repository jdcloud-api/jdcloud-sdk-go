// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type ModuleStateRequest struct {

    core.JDCloudRequest

    /* moduleName 唯一标识  */
    ModuleName string `json:"moduleName"`

    /*  (Optional) */
    States *string `json:"states"`
}

/*
 * param moduleName: moduleName 唯一标识 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewModuleStateRequest(
    moduleName string,
) *ModuleStateRequest {

	return &ModuleStateRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/module/{moduleName}/state",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        ModuleName: moduleName,
	}
}

/*
 * param moduleName: moduleName 唯一标识 (Required)
 * param states:  (Optional)
 */
func NewModuleStateRequestWithAllParams(
    moduleName string,
    states *string,
) *ModuleStateRequest {

    return &ModuleStateRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/module/{moduleName}/state",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        ModuleName: moduleName,
        States: states,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewModuleStateRequestWithoutParam() *ModuleStateRequest {

    return &ModuleStateRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/module/{moduleName}/state",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param moduleName: moduleName 唯一标识(Required) */
func (r *ModuleStateRequest) SetModuleName(moduleName string) {
    r.ModuleName = moduleName
}

/* param states: (Optional) */
func (r *ModuleStateRequest) SetStates(states string) {
    r.States = &states
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ModuleStateRequest) GetRegionId() string {
    return ""
}

type ModuleStateResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ModuleStateResult `json:"result"`
}

type ModuleStateResult struct {
    Data string `json:"data"`
}