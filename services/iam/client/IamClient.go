// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    iam "github.com/jdcloud-api/jdcloud-sdk-go/services/iam/apis"
    "encoding/json"
    "errors"
)

type IamClient struct {
    core.JDCloudClient
}

func NewIamClient(credential *core.Credential) *IamClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("iam.jdcloud-api.com")

    return &IamClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "iam",
            Revision:    "0.1.1",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *IamClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *IamClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 为子用户绑定策略 */
func (c *IamClient) AddPermissionsToSubUser(request *iam.AddPermissionsToSubUserRequest) (*iam.AddPermissionsToSubUserResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iam.AddPermissionsToSubUserResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 修改策略 */
func (c *IamClient) UpdatePermission(request *iam.UpdatePermissionRequest) (*iam.UpdatePermissionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iam.UpdatePermissionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 创建策略 */
func (c *IamClient) CreatePermission(request *iam.CreatePermissionRequest) (*iam.CreatePermissionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iam.CreatePermissionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 启用AccessKey */
func (c *IamClient) EnabledUserAccessKey(request *iam.EnabledUserAccessKeyRequest) (*iam.EnabledUserAccessKeyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iam.EnabledUserAccessKeyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 创建AccessKey */
func (c *IamClient) CreateUserAccessKey(request *iam.CreateUserAccessKeyRequest) (*iam.CreateUserAccessKeyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iam.CreateUserAccessKeyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询策略列表 */
func (c *IamClient) DescribePermissions(request *iam.DescribePermissionsRequest) (*iam.DescribePermissionsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iam.DescribePermissionsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询策略详情 */
func (c *IamClient) DescribePermissionDetail(request *iam.DescribePermissionDetailRequest) (*iam.DescribePermissionDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iam.DescribePermissionDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 创建子账号 */
func (c *IamClient) CreateSubuser(request *iam.CreateSubuserRequest) (*iam.CreateSubuserResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iam.CreateSubuserResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 为子用户解绑策略 */
func (c *IamClient) RemovePermissionOfSubUser(request *iam.RemovePermissionOfSubUserRequest) (*iam.RemovePermissionOfSubUserResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iam.RemovePermissionOfSubUserResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 禁用AccessKey */
func (c *IamClient) DisabledUserAccessKey(request *iam.DisabledUserAccessKeyRequest) (*iam.DisabledUserAccessKeyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iam.DisabledUserAccessKeyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询子用户策略列表 */
func (c *IamClient) DescribeSubUserPermissions(request *iam.DescribeSubUserPermissionsRequest) (*iam.DescribeSubUserPermissionsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iam.DescribeSubUserPermissionsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 删除AccessKey */
func (c *IamClient) DeleteUserAccessKey(request *iam.DeleteUserAccessKeyRequest) (*iam.DeleteUserAccessKeyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iam.DeleteUserAccessKeyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询AccessKey列表 */
func (c *IamClient) DescribeUserAccessKeys(request *iam.DescribeUserAccessKeysRequest) (*iam.DescribeUserAccessKeysResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iam.DescribeUserAccessKeysResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

