// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type BindMFADeviceRequest struct {

    core.JDCloudRequest

    /* 被绑定的账号（目前支持：默认不填的情况表示给自己绑定，填写子用户名表示主账号给子用户绑定) (Optional) */
    BoundAccount *string `json:"boundAccount"`

    /* 第一组动态密码（连续的两组）  */
    AuthenticationCode1 string `json:"authenticationCode1"`

    /* 第二组动态密码（连续的两组）  */
    AuthenticationCode2 string `json:"authenticationCode2"`
}

/*
 * param authenticationCode1: 第一组动态密码（连续的两组） (Required)
 * param authenticationCode2: 第二组动态密码（连续的两组） (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewBindMFADeviceRequest(
    authenticationCode1 string,
    authenticationCode2 string,
) *BindMFADeviceRequest {

	return &BindMFADeviceRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/virtualMFADevice:bind",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        AuthenticationCode1: authenticationCode1,
        AuthenticationCode2: authenticationCode2,
	}
}

/*
 * param boundAccount: 被绑定的账号（目前支持：默认不填的情况表示给自己绑定，填写子用户名表示主账号给子用户绑定) (Optional)
 * param authenticationCode1: 第一组动态密码（连续的两组） (Required)
 * param authenticationCode2: 第二组动态密码（连续的两组） (Required)
 */
func NewBindMFADeviceRequestWithAllParams(
    boundAccount *string,
    authenticationCode1 string,
    authenticationCode2 string,
) *BindMFADeviceRequest {

    return &BindMFADeviceRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/virtualMFADevice:bind",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        BoundAccount: boundAccount,
        AuthenticationCode1: authenticationCode1,
        AuthenticationCode2: authenticationCode2,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewBindMFADeviceRequestWithoutParam() *BindMFADeviceRequest {

    return &BindMFADeviceRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/virtualMFADevice:bind",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param boundAccount: 被绑定的账号（目前支持：默认不填的情况表示给自己绑定，填写子用户名表示主账号给子用户绑定)(Optional) */
func (r *BindMFADeviceRequest) SetBoundAccount(boundAccount string) {
    r.BoundAccount = &boundAccount
}
/* param authenticationCode1: 第一组动态密码（连续的两组）(Required) */
func (r *BindMFADeviceRequest) SetAuthenticationCode1(authenticationCode1 string) {
    r.AuthenticationCode1 = authenticationCode1
}
/* param authenticationCode2: 第二组动态密码（连续的两组）(Required) */
func (r *BindMFADeviceRequest) SetAuthenticationCode2(authenticationCode2 string) {
    r.AuthenticationCode2 = authenticationCode2
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r BindMFADeviceRequest) GetRegionId() string {
    return ""
}

type BindMFADeviceResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result BindMFADeviceResult `json:"result"`
}

type BindMFADeviceResult struct {
}