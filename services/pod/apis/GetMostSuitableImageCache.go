// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    pod "github.com/jdcloud-api/jdcloud-sdk-go/services/pod/models"
)

type GetMostSuitableImageCacheRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* 镜像名称
  */
    Image string `json:"image"`

    /* 镜像仓库认证信息；使用Docker Hub和京东云CR的镜像不需要secret
 (Optional) */
    Secret *string `json:"secret"`

    /* 限制返回的镜像缓存的大小不大于该值，用于避免镜像缓存大于系统盘导致创建失败的情况。
 (Optional) */
    Size *int `json:"size"`
}

/*
 * param regionId: Region ID (Required)
 * param image: 镜像名称
 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewGetMostSuitableImageCacheRequest(
    regionId string,
    image string,
) *GetMostSuitableImageCacheRequest {

	return &GetMostSuitableImageCacheRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/imageCache:getMostSuitable",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        Image: image,
	}
}

/*
 * param regionId: Region ID (Required)
 * param image: 镜像名称
 (Required)
 * param secret: 镜像仓库认证信息；使用Docker Hub和京东云CR的镜像不需要secret
 (Optional)
 * param size: 限制返回的镜像缓存的大小不大于该值，用于避免镜像缓存大于系统盘导致创建失败的情况。
 (Optional)
 */
func NewGetMostSuitableImageCacheRequestWithAllParams(
    regionId string,
    image string,
    secret *string,
    size *int,
) *GetMostSuitableImageCacheRequest {

    return &GetMostSuitableImageCacheRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/imageCache:getMostSuitable",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Image: image,
        Secret: secret,
        Size: size,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewGetMostSuitableImageCacheRequestWithoutParam() *GetMostSuitableImageCacheRequest {

    return &GetMostSuitableImageCacheRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/imageCache:getMostSuitable",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *GetMostSuitableImageCacheRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param image: 镜像名称
(Required) */
func (r *GetMostSuitableImageCacheRequest) SetImage(image string) {
    r.Image = image
}
/* param secret: 镜像仓库认证信息；使用Docker Hub和京东云CR的镜像不需要secret
(Optional) */
func (r *GetMostSuitableImageCacheRequest) SetSecret(secret string) {
    r.Secret = &secret
}
/* param size: 限制返回的镜像缓存的大小不大于该值，用于避免镜像缓存大于系统盘导致创建失败的情况。
(Optional) */
func (r *GetMostSuitableImageCacheRequest) SetSize(size int) {
    r.Size = &size
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r GetMostSuitableImageCacheRequest) GetRegionId() string {
    return r.RegionId
}

type GetMostSuitableImageCacheResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result GetMostSuitableImageCacheResult `json:"result"`
}

type GetMostSuitableImageCacheResult struct {
    Found bool `json:"found"`
    ImageCache pod.ImageCache `json:"imageCache"`
}