// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    pod "github.com/jdcloud-api/jdcloud-sdk-go/services/pod/models"
)

type GetContainerLogsRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* Pod ID  */
    PodId string `json:"podId"`

    /* container name  */
    ContainerName string `json:"containerName"`

    /* 返回日志文件中倒数 tailLines 行，如不指定，默认从容器启动时或 sinceSeconds 指定的时间读取。
 (Optional) */
    TailLines *int `json:"tailLines"`

    /* 返回相对于当前时间之前sinceSeconds之内的日志。
 (Optional) */
    SinceSeconds *int `json:"sinceSeconds"`

    /* 限制返回的日志文件内容字节数，取值范围 [1-4]KB，最大 4KB.
 (Optional) */
    LimitBytes *int `json:"limitBytes"`

    /* 日志时间上限，不传表示不限时间
 (Optional) */
    StartTime *string `json:"startTime"`

    /* 日志时间下限，不传表示不限时间
 (Optional) */
    EndTime *string `json:"endTime"`
}

/*
 * param regionId: Region ID (Required)
 * param podId: Pod ID (Required)
 * param containerName: container name (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewGetContainerLogsRequest(
    regionId string,
    podId string,
    containerName string,
) *GetContainerLogsRequest {

	return &GetContainerLogsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/pods/{podId}/containers/{containerName}:getContainerLogs",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        PodId: podId,
        ContainerName: containerName,
	}
}

/*
 * param regionId: Region ID (Required)
 * param podId: Pod ID (Required)
 * param containerName: container name (Required)
 * param tailLines: 返回日志文件中倒数 tailLines 行，如不指定，默认从容器启动时或 sinceSeconds 指定的时间读取。
 (Optional)
 * param sinceSeconds: 返回相对于当前时间之前sinceSeconds之内的日志。
 (Optional)
 * param limitBytes: 限制返回的日志文件内容字节数，取值范围 [1-4]KB，最大 4KB.
 (Optional)
 * param startTime: 日志时间上限，不传表示不限时间
 (Optional)
 * param endTime: 日志时间下限，不传表示不限时间
 (Optional)
 */
func NewGetContainerLogsRequestWithAllParams(
    regionId string,
    podId string,
    containerName string,
    tailLines *int,
    sinceSeconds *int,
    limitBytes *int,
    startTime *string,
    endTime *string,
) *GetContainerLogsRequest {

    return &GetContainerLogsRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/pods/{podId}/containers/{containerName}:getContainerLogs",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        PodId: podId,
        ContainerName: containerName,
        TailLines: tailLines,
        SinceSeconds: sinceSeconds,
        LimitBytes: limitBytes,
        StartTime: startTime,
        EndTime: endTime,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewGetContainerLogsRequestWithoutParam() *GetContainerLogsRequest {

    return &GetContainerLogsRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/pods/{podId}/containers/{containerName}:getContainerLogs",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *GetContainerLogsRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param podId: Pod ID(Required) */
func (r *GetContainerLogsRequest) SetPodId(podId string) {
    r.PodId = podId
}

/* param containerName: container name(Required) */
func (r *GetContainerLogsRequest) SetContainerName(containerName string) {
    r.ContainerName = containerName
}

/* param tailLines: 返回日志文件中倒数 tailLines 行，如不指定，默认从容器启动时或 sinceSeconds 指定的时间读取。
(Optional) */
func (r *GetContainerLogsRequest) SetTailLines(tailLines int) {
    r.TailLines = &tailLines
}

/* param sinceSeconds: 返回相对于当前时间之前sinceSeconds之内的日志。
(Optional) */
func (r *GetContainerLogsRequest) SetSinceSeconds(sinceSeconds int) {
    r.SinceSeconds = &sinceSeconds
}

/* param limitBytes: 限制返回的日志文件内容字节数，取值范围 [1-4]KB，最大 4KB.
(Optional) */
func (r *GetContainerLogsRequest) SetLimitBytes(limitBytes int) {
    r.LimitBytes = &limitBytes
}

/* param startTime: 日志时间上限，不传表示不限时间
(Optional) */
func (r *GetContainerLogsRequest) SetStartTime(startTime string) {
    r.StartTime = &startTime
}

/* param endTime: 日志时间下限，不传表示不限时间
(Optional) */
func (r *GetContainerLogsRequest) SetEndTime(endTime string) {
    r.EndTime = &endTime
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r GetContainerLogsRequest) GetRegionId() string {
    return r.RegionId
}

type GetContainerLogsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result GetContainerLogsResult `json:"result"`
}

type GetContainerLogsResult struct {
    Logs pod.Logs `json:"logs"`
}