// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type ModifyNodeSpecRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* Instance ID  */
    InstanceId string `json:"instanceId"`

    /* Node ID  */
    NodeId string `json:"nodeId"`

    /* Shard节点或Mongos节点的规格，不允许小于当前规格。  */
    NodeType string `json:"nodeType"`

    /* Shard存储空间，当前节点为Shard时可用，不允许小于当前规格。 (Optional) */
    NodeStorageGB *int `json:"nodeStorageGB"`
}

/*
 * param regionId: Region ID (Required)
 * param instanceId: Instance ID (Required)
 * param nodeId: Node ID (Required)
 * param nodeType: Shard节点或Mongos节点的规格，不允许小于当前规格。 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewModifyNodeSpecRequest(
    regionId string,
    instanceId string,
    nodeId string,
    nodeType string,
) *ModifyNodeSpecRequest {

	return &ModifyNodeSpecRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/instances/{instanceId}/nodes/{nodeId}:modifyNodeSpec",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        InstanceId: instanceId,
        NodeId: nodeId,
        NodeType: nodeType,
	}
}

/*
 * param regionId: Region ID (Required)
 * param instanceId: Instance ID (Required)
 * param nodeId: Node ID (Required)
 * param nodeType: Shard节点或Mongos节点的规格，不允许小于当前规格。 (Required)
 * param nodeStorageGB: Shard存储空间，当前节点为Shard时可用，不允许小于当前规格。 (Optional)
 */
func NewModifyNodeSpecRequestWithAllParams(
    regionId string,
    instanceId string,
    nodeId string,
    nodeType string,
    nodeStorageGB *int,
) *ModifyNodeSpecRequest {

    return &ModifyNodeSpecRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}/nodes/{nodeId}:modifyNodeSpec",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        InstanceId: instanceId,
        NodeId: nodeId,
        NodeType: nodeType,
        NodeStorageGB: nodeStorageGB,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewModifyNodeSpecRequestWithoutParam() *ModifyNodeSpecRequest {

    return &ModifyNodeSpecRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}/nodes/{nodeId}:modifyNodeSpec",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *ModifyNodeSpecRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param instanceId: Instance ID(Required) */
func (r *ModifyNodeSpecRequest) SetInstanceId(instanceId string) {
    r.InstanceId = instanceId
}

/* param nodeId: Node ID(Required) */
func (r *ModifyNodeSpecRequest) SetNodeId(nodeId string) {
    r.NodeId = nodeId
}

/* param nodeType: Shard节点或Mongos节点的规格，不允许小于当前规格。(Required) */
func (r *ModifyNodeSpecRequest) SetNodeType(nodeType string) {
    r.NodeType = nodeType
}

/* param nodeStorageGB: Shard存储空间，当前节点为Shard时可用，不允许小于当前规格。(Optional) */
func (r *ModifyNodeSpecRequest) SetNodeStorageGB(nodeStorageGB int) {
    r.NodeStorageGB = &nodeStorageGB
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ModifyNodeSpecRequest) GetRegionId() string {
    return r.RegionId
}

type ModifyNodeSpecResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ModifyNodeSpecResult `json:"result"`
}

type ModifyNodeSpecResult struct {
    NodeId string `json:"nodeId"`
}