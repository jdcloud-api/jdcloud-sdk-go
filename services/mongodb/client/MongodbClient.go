// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    mongodb "github.com/jdcloud-api/jdcloud-sdk-go/services/mongodb/apis"
    "encoding/json"
    "errors"
)

type MongodbClient struct {
    core.JDCloudClient
}

func NewMongodbClient(credential *core.Credential) *MongodbClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("mongodb.jdcloud-api.com")

    return &MongodbClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "mongodb",
            Revision:    "1.0.2",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *MongodbClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *MongodbClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 查询实例访问白名单 */
func (c *MongodbClient) DescribeSecurityIps(request *mongodb.DescribeSecurityIpsRequest) (*mongodb.DescribeSecurityIpsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &mongodb.DescribeSecurityIpsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 修改实例名称 */
func (c *MongodbClient) ModifyInstanceName(request *mongodb.ModifyInstanceNameRequest) (*mongodb.ModifyInstanceNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &mongodb.ModifyInstanceNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 修改实例访问白名单 */
func (c *MongodbClient) ModifySecurityIps(request *mongodb.ModifySecurityIpsRequest) (*mongodb.ModifySecurityIpsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &mongodb.ModifySecurityIpsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 重置密码 */
func (c *MongodbClient) ResetPassword(request *mongodb.ResetPasswordRequest) (*mongodb.ResetPasswordResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &mongodb.ResetPasswordResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 数据恢复 */
func (c *MongodbClient) RestoreInstance(request *mongodb.RestoreInstanceRequest) (*mongodb.RestoreInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &mongodb.RestoreInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 删除实例 */
func (c *MongodbClient) DeleteInstance(request *mongodb.DeleteInstanceRequest) (*mongodb.DeleteInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &mongodb.DeleteInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 获取备份策略 */
func (c *MongodbClient) DescribeBackupPolicy(request *mongodb.DescribeBackupPolicyRequest) (*mongodb.DescribeBackupPolicyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &mongodb.DescribeBackupPolicyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 获取规格 */
func (c *MongodbClient) DescribeFlavors(request *mongodb.DescribeFlavorsRequest) (*mongodb.DescribeFlavorsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &mongodb.DescribeFlavorsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 获取备份下载链接 */
func (c *MongodbClient) BackupDownloadURL(request *mongodb.BackupDownloadURLRequest) (*mongodb.BackupDownloadURLResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &mongodb.BackupDownloadURLResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询实例信息 */
func (c *MongodbClient) DescribeInstances(request *mongodb.DescribeInstancesRequest) (*mongodb.DescribeInstancesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &mongodb.DescribeInstancesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查看备份 */
func (c *MongodbClient) DescribeBackups(request *mongodb.DescribeBackupsRequest) (*mongodb.DescribeBackupsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &mongodb.DescribeBackupsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 变更实例规格 */
func (c *MongodbClient) ModifyInstanceSpec(request *mongodb.ModifyInstanceSpecRequest) (*mongodb.ModifyInstanceSpecResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &mongodb.ModifyInstanceSpecResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 创建备份 */
func (c *MongodbClient) CreateBackup(request *mongodb.CreateBackupRequest) (*mongodb.CreateBackupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &mongodb.CreateBackupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 修改备份策略 */
func (c *MongodbClient) ModifyBackupPolicy(request *mongodb.ModifyBackupPolicyRequest) (*mongodb.ModifyBackupPolicyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &mongodb.ModifyBackupPolicyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 创建实例 */
func (c *MongodbClient) CreateInstance(request *mongodb.CreateInstanceRequest) (*mongodb.CreateInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &mongodb.CreateInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 删除备份 */
func (c *MongodbClient) DeleteBackup(request *mongodb.DeleteBackupRequest) (*mongodb.DeleteBackupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &mongodb.DeleteBackupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 获取可用区 */
func (c *MongodbClient) DescribeAvailableZones(request *mongodb.DescribeAvailableZonesRequest) (*mongodb.DescribeAvailableZonesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &mongodb.DescribeAvailableZonesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

