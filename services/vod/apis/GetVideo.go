// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    vod "github.com/lshuining/jdcloud-sdk-go/services/vod/models"
)

type GetVideoRequest struct {

    core.JDCloudRequest

    /* 视频ID  */
    VideoId string `json:"videoId"`
}

/*
 * param videoId: 视频ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewGetVideoRequest(
    videoId string,
) *GetVideoRequest {

	return &GetVideoRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/videos/{videoId}",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        VideoId: videoId,
	}
}

/*
 * param videoId: 视频ID (Required)
 */
func NewGetVideoRequestWithAllParams(
    videoId string,
) *GetVideoRequest {

    return &GetVideoRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/videos/{videoId}",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        VideoId: videoId,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewGetVideoRequestWithoutParam() *GetVideoRequest {

    return &GetVideoRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/videos/{videoId}",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param videoId: 视频ID(Required) */
func (r *GetVideoRequest) SetVideoId(videoId string) {
    r.VideoId = videoId
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r GetVideoRequest) GetRegionId() string {
    return ""
}

type GetVideoResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result GetVideoResult `json:"result"`
}

type GetVideoResult struct {
    Id string `json:"id"`
    Name string `json:"name"`
    Description string `json:"description"`
    CoverUrl string `json:"coverUrl"`
    Status string `json:"status"`
    FileSize int64 `json:"fileSize"`
    Checksum string `json:"checksum"`
    Duration int64 `json:"duration"`
    Tags []string `json:"tags"`
    CategoryId int64 `json:"categoryId"`
    CategoryName string `json:"categoryName"`
    Snapshots []vod.Snapshot `json:"snapshots"`
    CreateTime string `json:"createTime"`
    UpdateTime string `json:"updateTime"`
}