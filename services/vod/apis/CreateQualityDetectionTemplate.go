// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type CreateQualityDetectionTemplateRequest struct {

    core.JDCloudRequest

    /* 模板名称。长度不超过128个字符。UTF-8编码。
  */
    Name string `json:"name"`

    /* 模板类型，区分该模板的检测内容。目前只支持 video 。  */
    TemplateType string `json:"templateType"`

    /* 检测项列表。取值范围：
  blackScreen - 黑场
  pureColor - 纯色
  colorCast - 偏色
  frozenFrame - 静帧
  brightness - 亮度
  contrast - 对比度
  */
    Detections []string `json:"detections"`
}

/*
 * param name: 模板名称。长度不超过128个字符。UTF-8编码。
 (Required)
 * param templateType: 模板类型，区分该模板的检测内容。目前只支持 video 。 (Required)
 * param detections: 检测项列表。取值范围：
  blackScreen - 黑场
  pureColor - 纯色
  colorCast - 偏色
  frozenFrame - 静帧
  brightness - 亮度
  contrast - 对比度
 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateQualityDetectionTemplateRequest(
    name string,
    templateType string,
    detections []string,
) *CreateQualityDetectionTemplateRequest {

	return &CreateQualityDetectionTemplateRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/qualityDetectionTemplates",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Name: name,
        TemplateType: templateType,
        Detections: detections,
	}
}

/*
 * param name: 模板名称。长度不超过128个字符。UTF-8编码。
 (Required)
 * param templateType: 模板类型，区分该模板的检测内容。目前只支持 video 。 (Required)
 * param detections: 检测项列表。取值范围：
  blackScreen - 黑场
  pureColor - 纯色
  colorCast - 偏色
  frozenFrame - 静帧
  brightness - 亮度
  contrast - 对比度
 (Required)
 */
func NewCreateQualityDetectionTemplateRequestWithAllParams(
    name string,
    templateType string,
    detections []string,
) *CreateQualityDetectionTemplateRequest {

    return &CreateQualityDetectionTemplateRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/qualityDetectionTemplates",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Name: name,
        TemplateType: templateType,
        Detections: detections,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateQualityDetectionTemplateRequestWithoutParam() *CreateQualityDetectionTemplateRequest {

    return &CreateQualityDetectionTemplateRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/qualityDetectionTemplates",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param name: 模板名称。长度不超过128个字符。UTF-8编码。
(Required) */
func (r *CreateQualityDetectionTemplateRequest) SetName(name string) {
    r.Name = name
}

/* param templateType: 模板类型，区分该模板的检测内容。目前只支持 video 。(Required) */
func (r *CreateQualityDetectionTemplateRequest) SetTemplateType(templateType string) {
    r.TemplateType = templateType
}

/* param detections: 检测项列表。取值范围：
  blackScreen - 黑场
  pureColor - 纯色
  colorCast - 偏色
  frozenFrame - 静帧
  brightness - 亮度
  contrast - 对比度
(Required) */
func (r *CreateQualityDetectionTemplateRequest) SetDetections(detections []string) {
    r.Detections = detections
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateQualityDetectionTemplateRequest) GetRegionId() string {
    return ""
}

type CreateQualityDetectionTemplateResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateQualityDetectionTemplateResult `json:"result"`
}

type CreateQualityDetectionTemplateResult struct {
    Id int64 `json:"id"`
    Name string `json:"name"`
    TemplateType string `json:"templateType"`
    Detections []string `json:"detections"`
    CreateTime string `json:"createTime"`
    UpdateTime string `json:"updateTime"`
}