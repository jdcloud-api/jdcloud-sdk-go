// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    containerregistry "github.com/jdcloud-api/jdcloud-sdk-go/services/containerregistry/apis"
    "encoding/json"
    "errors"
)

type ContainerregistryClient struct {
    core.JDCloudClient
}

func NewContainerregistryClient(credential *core.Credential) *ContainerregistryClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("containerregistry.jdcloud-api.com")

    return &ContainerregistryClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "containerregistry",
            Revision:    "1.0.1",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *ContainerregistryClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *ContainerregistryClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 通过参数创建镜像仓库。
仓库名称可以分解为多个路径名，每个名称必须至少包含一个小写字母数字，考虑URL规范。
支持包含段划线或者下划线进行分割，但不允许点'.'，多个路径名之间通过("/")连接，总长度不超过256个字符，当前只支持二级目录。
 */
func (c *ContainerregistryClient) CreateRepository(request *containerregistry.CreateRepositoryRequest) (*containerregistry.CreateRepositoryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &containerregistry.CreateRepositoryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询指定镜像仓库名称是否已经存在以及是否符合命名规范。
 */
func (c *ContainerregistryClient) CheckRepositoryName(request *containerregistry.CheckRepositoryNameRequest) (*containerregistry.CheckRepositoryNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &containerregistry.CheckRepositoryNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除指定用户下某个 registry.
 [MFA enabled] */
func (c *ContainerregistryClient) DeleteRegistry(request *containerregistry.DeleteRegistryRequest) (*containerregistry.DeleteRegistryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &containerregistry.DeleteRegistryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除指定用户下某个镜像仓库.
 [MFA enabled] */
func (c *ContainerregistryClient) DeleteRepository(request *containerregistry.DeleteRepositoryRequest) (*containerregistry.DeleteRepositoryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &containerregistry.DeleteRepositoryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询配额 */
func (c *ContainerregistryClient) DescribeQuotas(request *containerregistry.DescribeQuotasRequest) (*containerregistry.DescribeQuotasResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &containerregistry.DescribeQuotasResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 返回指定repository中images的元数据，包括image size, image tags和creation date。
 */
func (c *ContainerregistryClient) DescribeImages(request *containerregistry.DescribeImagesRequest) (*containerregistry.DescribeImagesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &containerregistry.DescribeImagesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 描述用户指定 registry 下的 repository.
 */
func (c *ContainerregistryClient) DescribeRepositories(request *containerregistry.DescribeRepositoriesRequest) (*containerregistry.DescribeRepositoriesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &containerregistry.DescribeRepositoriesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询指定用户下某个 registry 详情。
 */
func (c *ContainerregistryClient) DescribeRegistry(request *containerregistry.DescribeRegistryRequest) (*containerregistry.DescribeRegistryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &containerregistry.DescribeRegistryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询指定注册表名称是否已经存在以及是否符合命名规范。
 */
func (c *ContainerregistryClient) CheckRegistryName(request *containerregistry.CheckRegistryNameRequest) (*containerregistry.CheckRegistryNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &containerregistry.CheckRegistryNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 通过参数创建注册表。
 */
func (c *ContainerregistryClient) CreateRegistry(request *containerregistry.CreateRegistryRequest) (*containerregistry.CreateRegistryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &containerregistry.CreateRegistryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除镜像
imageDigest imageTag imageTagStatus 三者只能且必须传一个。
可根据Tag状态删除Image，例如删除所有tagged的镜像。
digest和tag唯一表征单个镜像，其中imageDigest为sha256哈希，image manifest的digest。
例如 sha256:examplee6d1e504117a17000003d3753086354a38375961f2e665416ef4b1b2f；image使用的tag, 如  "precise" 
 [MFA enabled] */
func (c *ContainerregistryClient) DeleteImage(request *containerregistry.DeleteImageRequest) (*containerregistry.DeleteImageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &containerregistry.DeleteImageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* <p>申请12小时有效期的令牌。 使用<code>docker</code> CLI push和pull镜像。</p>
<p><code>authorizationToken</code>为每个registry返回一个base64编码的字符串，解码后<code>docker login</code>命令
可完成指定registry的鉴权。JCR CLI提供<code>jcr get-login</code>进行认证处理。</p>
 */
func (c *ContainerregistryClient) GetAuthorizationToken(request *containerregistry.GetAuthorizationTokenRequest) (*containerregistry.GetAuthorizationTokenResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &containerregistry.GetAuthorizationTokenResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* <p>批量查询令牌。</p> 
<p>暂时不支持分页和过滤条件。</p>
 */
func (c *ContainerregistryClient) DescribeAuthorizationTokens(request *containerregistry.DescribeAuthorizationTokensRequest) (*containerregistry.DescribeAuthorizationTokensResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &containerregistry.DescribeAuthorizationTokensResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 释放用户 registry 的 token。
 */
func (c *ContainerregistryClient) ReleaseAuthorizationToken(request *containerregistry.ReleaseAuthorizationTokenRequest) (*containerregistry.ReleaseAuthorizationTokenResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &containerregistry.ReleaseAuthorizationTokenResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量查询指定用户下所有 registry 详情。
暂不支持 filter.
 */
func (c *ContainerregistryClient) DescribeRegistries(request *containerregistry.DescribeRegistriesRequest) (*containerregistry.DescribeRegistriesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &containerregistry.DescribeRegistriesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

