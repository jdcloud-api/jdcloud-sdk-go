// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type AddLooDeviceRequest struct {

    core.JDCloudRequest

    /* 设备归属的实例ID  */
    InstanceId string `json:"instanceId"`

    /* 设备归属的实例所在区域  */
    RegionId string `json:"regionId"`

    /* 申请单编号  */
    PreOrderId string `json:"preOrderId"`

    /* 用户Pin  */
    UserPinParam string `json:"userPinParam"`

    /* 心跳 (Optional) */
    DeviceName *string `json:"deviceName"`

    /* 设备所归属的产品 (Optional) */
    ProductKey *string `json:"productKey"`

    /* 设备型号 (Optional) */
    Model *string `json:"model"`

    /* 厂商 (Optional) */
    Manufacturer *string `json:"manufacturer"`

    /* 连接码 (Optional) */
    Identifier *string `json:"identifier"`

    /* 设备名 (Optional) */
    Description *string `json:"description"`
}

/*
 * param instanceId: 设备归属的实例ID (Required)
 * param regionId: 设备归属的实例所在区域 (Required)
 * param preOrderId: 申请单编号 (Required)
 * param userPinParam: 用户Pin (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewAddLooDeviceRequest(
    instanceId string,
    regionId string,
    preOrderId string,
    userPinParam string,
) *AddLooDeviceRequest {

	return &AddLooDeviceRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/instances/{instanceId}/preOrderId/{preOrderId}/device_loongray:add",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        InstanceId: instanceId,
        RegionId: regionId,
        PreOrderId: preOrderId,
        UserPinParam: userPinParam,
	}
}

/*
 * param instanceId: 设备归属的实例ID (Required)
 * param regionId: 设备归属的实例所在区域 (Required)
 * param preOrderId: 申请单编号 (Required)
 * param userPinParam: 用户Pin (Required)
 * param deviceName: 心跳 (Optional)
 * param productKey: 设备所归属的产品 (Optional)
 * param model: 设备型号 (Optional)
 * param manufacturer: 厂商 (Optional)
 * param identifier: 连接码 (Optional)
 * param description: 设备名 (Optional)
 */
func NewAddLooDeviceRequestWithAllParams(
    instanceId string,
    regionId string,
    preOrderId string,
    userPinParam string,
    deviceName *string,
    productKey *string,
    model *string,
    manufacturer *string,
    identifier *string,
    description *string,
) *AddLooDeviceRequest {

    return &AddLooDeviceRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}/preOrderId/{preOrderId}/device_loongray:add",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        InstanceId: instanceId,
        RegionId: regionId,
        PreOrderId: preOrderId,
        UserPinParam: userPinParam,
        DeviceName: deviceName,
        ProductKey: productKey,
        Model: model,
        Manufacturer: manufacturer,
        Identifier: identifier,
        Description: description,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewAddLooDeviceRequestWithoutParam() *AddLooDeviceRequest {

    return &AddLooDeviceRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}/preOrderId/{preOrderId}/device_loongray:add",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param instanceId: 设备归属的实例ID(Required) */
func (r *AddLooDeviceRequest) SetInstanceId(instanceId string) {
    r.InstanceId = instanceId
}

/* param regionId: 设备归属的实例所在区域(Required) */
func (r *AddLooDeviceRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param preOrderId: 申请单编号(Required) */
func (r *AddLooDeviceRequest) SetPreOrderId(preOrderId string) {
    r.PreOrderId = preOrderId
}

/* param userPinParam: 用户Pin(Required) */
func (r *AddLooDeviceRequest) SetUserPinParam(userPinParam string) {
    r.UserPinParam = userPinParam
}

/* param deviceName: 心跳(Optional) */
func (r *AddLooDeviceRequest) SetDeviceName(deviceName string) {
    r.DeviceName = &deviceName
}

/* param productKey: 设备所归属的产品(Optional) */
func (r *AddLooDeviceRequest) SetProductKey(productKey string) {
    r.ProductKey = &productKey
}

/* param model: 设备型号(Optional) */
func (r *AddLooDeviceRequest) SetModel(model string) {
    r.Model = &model
}

/* param manufacturer: 厂商(Optional) */
func (r *AddLooDeviceRequest) SetManufacturer(manufacturer string) {
    r.Manufacturer = &manufacturer
}

/* param identifier: 连接码(Optional) */
func (r *AddLooDeviceRequest) SetIdentifier(identifier string) {
    r.Identifier = &identifier
}

/* param description: 设备名(Optional) */
func (r *AddLooDeviceRequest) SetDescription(description string) {
    r.Description = &description
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r AddLooDeviceRequest) GetRegionId() string {
    return r.RegionId
}

type AddLooDeviceResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result AddLooDeviceResult `json:"result"`
}

type AddLooDeviceResult struct {
    DeviceName string `json:"deviceName"`
    Identifier string `json:"identifier"`
    Secret string `json:"secret"`
}