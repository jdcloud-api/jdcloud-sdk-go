// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type ReadHoldingRegistersRequest struct {

    core.JDCloudRequest

    /* Hub实例Id  */
    InstanceId string `json:"instanceId"`

    /* 区域Id  */
    RegionId string `json:"regionId"`

    /* 连接码  */
    Identifier string `json:"identifier"`

    /* 起始地址，如40301  */
    AddressOfFirstRegister int `json:"addressOfFirstRegister"`

    /* 寄存器数量  */
    NumberOfRegisters int `json:"numberOfRegisters"`
}

/*
 * param instanceId: Hub实例Id (Required)
 * param regionId: 区域Id (Required)
 * param identifier: 连接码 (Required)
 * param addressOfFirstRegister: 起始地址，如40301 (Required)
 * param numberOfRegisters: 寄存器数量 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewReadHoldingRegistersRequest(
    instanceId string,
    regionId string,
    identifier string,
    addressOfFirstRegister int,
    numberOfRegisters int,
) *ReadHoldingRegistersRequest {

	return &ReadHoldingRegistersRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/loongrayinstances/{instanceId}/readHoldingRegisters",
			Method:  "GET",
			Header:  nil,
			Version: "v2",
		},
        InstanceId: instanceId,
        RegionId: regionId,
        Identifier: identifier,
        AddressOfFirstRegister: addressOfFirstRegister,
        NumberOfRegisters: numberOfRegisters,
	}
}

/*
 * param instanceId: Hub实例Id (Required)
 * param regionId: 区域Id (Required)
 * param identifier: 连接码 (Required)
 * param addressOfFirstRegister: 起始地址，如40301 (Required)
 * param numberOfRegisters: 寄存器数量 (Required)
 */
func NewReadHoldingRegistersRequestWithAllParams(
    instanceId string,
    regionId string,
    identifier string,
    addressOfFirstRegister int,
    numberOfRegisters int,
) *ReadHoldingRegistersRequest {

    return &ReadHoldingRegistersRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/loongrayinstances/{instanceId}/readHoldingRegisters",
            Method:  "GET",
            Header:  nil,
            Version: "v2",
        },
        InstanceId: instanceId,
        RegionId: regionId,
        Identifier: identifier,
        AddressOfFirstRegister: addressOfFirstRegister,
        NumberOfRegisters: numberOfRegisters,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewReadHoldingRegistersRequestWithoutParam() *ReadHoldingRegistersRequest {

    return &ReadHoldingRegistersRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/loongrayinstances/{instanceId}/readHoldingRegisters",
            Method:  "GET",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param instanceId: Hub实例Id(Required) */
func (r *ReadHoldingRegistersRequest) SetInstanceId(instanceId string) {
    r.InstanceId = instanceId
}

/* param regionId: 区域Id(Required) */
func (r *ReadHoldingRegistersRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param identifier: 连接码(Required) */
func (r *ReadHoldingRegistersRequest) SetIdentifier(identifier string) {
    r.Identifier = identifier
}

/* param addressOfFirstRegister: 起始地址，如40301(Required) */
func (r *ReadHoldingRegistersRequest) SetAddressOfFirstRegister(addressOfFirstRegister int) {
    r.AddressOfFirstRegister = addressOfFirstRegister
}

/* param numberOfRegisters: 寄存器数量(Required) */
func (r *ReadHoldingRegistersRequest) SetNumberOfRegisters(numberOfRegisters int) {
    r.NumberOfRegisters = numberOfRegisters
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ReadHoldingRegistersRequest) GetRegionId() string {
    return r.RegionId
}

type ReadHoldingRegistersResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ReadHoldingRegistersResult `json:"result"`
}

type ReadHoldingRegistersResult struct {
    ReadData interface{} `json:"readData"`
}