// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    iotcore "github.com/lshuining/jdcloud-sdk-go/services/iotcore/models"
)

type UpdateLooDeviceRequest struct {

    core.JDCloudRequest

    /* 设备归属的实例ID  */
    InstanceId string `json:"instanceId"`

    /* 设备归属的实例所在区域  */
    RegionId string `json:"regionId"`

    /* 设备Id  */
    DeviceId string `json:"deviceId"`

    /* 设备型号 (Optional) */
    Model *string `json:"model"`

    /* 设备厂商 (Optional) */
    Manufacturer *string `json:"manufacturer"`

    /* 设备名 (Optional) */
    Description *string `json:"description"`

    /* 设备状态 (Optional) */
    Status *int `json:"status"`

    /* 连接码 (Optional) */
    Identifier *string `json:"identifier"`

    /* 心跳 (Optional) */
    DeviceName *string `json:"deviceName"`
}

/*
 * param instanceId: 设备归属的实例ID (Required)
 * param regionId: 设备归属的实例所在区域 (Required)
 * param deviceId: 设备Id (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateLooDeviceRequest(
    instanceId string,
    regionId string,
    deviceId string,
) *UpdateLooDeviceRequest {

	return &UpdateLooDeviceRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/instances/{instanceId}/device/{deviceId}:looupdate",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        InstanceId: instanceId,
        RegionId: regionId,
        DeviceId: deviceId,
	}
}

/*
 * param instanceId: 设备归属的实例ID (Required)
 * param regionId: 设备归属的实例所在区域 (Required)
 * param deviceId: 设备Id (Required)
 * param model: 设备型号 (Optional)
 * param manufacturer: 设备厂商 (Optional)
 * param description: 设备名 (Optional)
 * param status: 设备状态 (Optional)
 * param identifier: 连接码 (Optional)
 * param deviceName: 心跳 (Optional)
 */
func NewUpdateLooDeviceRequestWithAllParams(
    instanceId string,
    regionId string,
    deviceId string,
    model *string,
    manufacturer *string,
    description *string,
    status *int,
    identifier *string,
    deviceName *string,
) *UpdateLooDeviceRequest {

    return &UpdateLooDeviceRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}/device/{deviceId}:looupdate",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        InstanceId: instanceId,
        RegionId: regionId,
        DeviceId: deviceId,
        Model: model,
        Manufacturer: manufacturer,
        Description: description,
        Status: status,
        Identifier: identifier,
        DeviceName: deviceName,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateLooDeviceRequestWithoutParam() *UpdateLooDeviceRequest {

    return &UpdateLooDeviceRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}/device/{deviceId}:looupdate",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param instanceId: 设备归属的实例ID(Required) */
func (r *UpdateLooDeviceRequest) SetInstanceId(instanceId string) {
    r.InstanceId = instanceId
}

/* param regionId: 设备归属的实例所在区域(Required) */
func (r *UpdateLooDeviceRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param deviceId: 设备Id(Required) */
func (r *UpdateLooDeviceRequest) SetDeviceId(deviceId string) {
    r.DeviceId = deviceId
}

/* param model: 设备型号(Optional) */
func (r *UpdateLooDeviceRequest) SetModel(model string) {
    r.Model = &model
}

/* param manufacturer: 设备厂商(Optional) */
func (r *UpdateLooDeviceRequest) SetManufacturer(manufacturer string) {
    r.Manufacturer = &manufacturer
}

/* param description: 设备名(Optional) */
func (r *UpdateLooDeviceRequest) SetDescription(description string) {
    r.Description = &description
}

/* param status: 设备状态(Optional) */
func (r *UpdateLooDeviceRequest) SetStatus(status int) {
    r.Status = &status
}

/* param identifier: 连接码(Optional) */
func (r *UpdateLooDeviceRequest) SetIdentifier(identifier string) {
    r.Identifier = &identifier
}

/* param deviceName: 心跳(Optional) */
func (r *UpdateLooDeviceRequest) SetDeviceName(deviceName string) {
    r.DeviceName = &deviceName
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateLooDeviceRequest) GetRegionId() string {
    return r.RegionId
}

type UpdateLooDeviceResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateLooDeviceResult `json:"result"`
}

type UpdateLooDeviceResult struct {
    Device iotcore.DeviceVO `json:"device"`
}