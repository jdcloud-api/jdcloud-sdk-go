// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type QueryCallbackRequest struct {

    core.JDCloudRequest
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewQueryCallbackRequest(
) *QueryCallbackRequest {

	return &QueryCallbackRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/settings:queryCallback",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 */
func NewQueryCallbackRequestWithAllParams(
) *QueryCallbackRequest {

    return &QueryCallbackRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/settings:queryCallback",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewQueryCallbackRequestWithoutParam() *QueryCallbackRequest {

    return &QueryCallbackRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/settings:queryCallback",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r QueryCallbackRequest) GetRegionId() string {
    return ""
}

type QueryCallbackResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result QueryCallbackResult `json:"result"`
}

type QueryCallbackResult struct {
    CallbackType string `json:"callbackType"`
    HttpUrl string `json:"httpUrl"`
    CallbackEvents []string `json:"callbackEvents"`
    CreateTime string `json:"createTime"`
    UpdateTime string `json:"updateTime"`
}