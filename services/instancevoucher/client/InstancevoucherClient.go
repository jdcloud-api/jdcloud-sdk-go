// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    instancevoucher "github.com/lshuining/jdcloud-sdk-go/services/instancevoucher/apis"
    "encoding/json"
    "errors"
)

type InstancevoucherClient struct {
    core.JDCloudClient
}

func NewInstancevoucherClient(credential *core.Credential) *InstancevoucherClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("instancevoucher.jdcloud-api.com")

    return &InstancevoucherClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "instancevoucher",
            Revision:    "0.0.3",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *InstancevoucherClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *InstancevoucherClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *InstancevoucherClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 查询实例规格信息列表
 */
func (c *InstancevoucherClient) DescribeInstanceVoucherTypes(request *instancevoucher.DescribeInstanceVoucherTypesRequest) (*instancevoucher.DescribeInstanceVoucherTypesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &instancevoucher.DescribeInstanceVoucherTypesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改实例抵扣券的 名称 和 描述。<br>
name 和 description 必须要指定一个
 */
func (c *InstancevoucherClient) ModifyInstanceVoucherAttribute(request *instancevoucher.ModifyInstanceVoucherAttributeRequest) (*instancevoucher.ModifyInstanceVoucherAttributeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &instancevoucher.ModifyInstanceVoucherAttributeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询配额
 */
func (c *InstancevoucherClient) DescribeQuotas(request *instancevoucher.DescribeQuotasRequest) (*instancevoucher.DescribeQuotasResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &instancevoucher.DescribeQuotasResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询实例抵扣券的详细信息
 */
func (c *InstancevoucherClient) DescribeInstanceVoucher(request *instancevoucher.DescribeInstanceVoucherRequest) (*instancevoucher.DescribeInstanceVoucherResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &instancevoucher.DescribeInstanceVoucherResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建实例抵扣券
 */
func (c *InstancevoucherClient) CreateInstanceVoucher(request *instancevoucher.CreateInstanceVoucherRequest) (*instancevoucher.CreateInstanceVoucherResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &instancevoucher.CreateInstanceVoucherResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除实例抵扣券
 */
func (c *InstancevoucherClient) DeleteInstanceVoucher(request *instancevoucher.DeleteInstanceVoucherRequest) (*instancevoucher.DeleteInstanceVoucherResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &instancevoucher.DeleteInstanceVoucherResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量查询实例抵扣券的详细信息<br>
此接口支持分页查询，默认每页20条。
 */
func (c *InstancevoucherClient) DescribeInstanceVouchers(request *instancevoucher.DescribeInstanceVouchersRequest) (*instancevoucher.DescribeInstanceVouchersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &instancevoucher.DescribeInstanceVouchersResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

