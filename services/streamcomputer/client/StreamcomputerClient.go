// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    streamcomputer "github.com/jdcloud-api/jdcloud-sdk-go/services/streamcomputer/apis"
    "encoding/json"
    "errors"
)

type StreamcomputerClient struct {
    core.JDCloudClient
}

func NewStreamcomputerClient(credential *core.Credential) *StreamcomputerClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("streamcomputer.jdcloud-api.com")

    return &StreamcomputerClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "streamcomputer",
            Revision:    "1.0.1",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *StreamcomputerClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *StreamcomputerClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 删除namespace,如果旗下关联有其他资源，不允许删除 */
func (c *StreamcomputerClient) DeleteNamespace(request *streamcomputer.DeleteNamespaceRequest) (*streamcomputer.DeleteNamespaceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streamcomputer.DeleteNamespaceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询指定作业详情 */
func (c *StreamcomputerClient) DescribeJob(request *streamcomputer.DescribeJobRequest) (*streamcomputer.DescribeJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streamcomputer.DescribeJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 停止作业运行job */
func (c *StreamcomputerClient) StopJob(request *streamcomputer.StopJobRequest) (*streamcomputer.StopJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streamcomputer.StopJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询租户下的应用列表 */
func (c *StreamcomputerClient) QueryNamespaces(request *streamcomputer.QueryNamespacesRequest) (*streamcomputer.QueryNamespacesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streamcomputer.QueryNamespacesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询指定应用下的所有job */
func (c *StreamcomputerClient) GetJobList(request *streamcomputer.GetJobListRequest) (*streamcomputer.GetJobListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streamcomputer.GetJobListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 删除指定输入 */
func (c *StreamcomputerClient) DeleteStorage(request *streamcomputer.DeleteStorageRequest) (*streamcomputer.DeleteStorageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streamcomputer.DeleteStorageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 运行job */
func (c *StreamcomputerClient) StartJob(request *streamcomputer.StartJobRequest) (*streamcomputer.StartJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streamcomputer.StartJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 创建或者更新storage */
func (c *StreamcomputerClient) GetStorageList(request *streamcomputer.GetStorageListRequest) (*streamcomputer.GetStorageListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streamcomputer.GetStorageListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 创建namespace */
func (c *StreamcomputerClient) CreateNamespace(request *streamcomputer.CreateNamespaceRequest) (*streamcomputer.CreateNamespaceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streamcomputer.CreateNamespaceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 创建或者更新storage */
func (c *StreamcomputerClient) AddOrUpdateStorage(request *streamcomputer.AddOrUpdateStorageRequest) (*streamcomputer.AddOrUpdateStorageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streamcomputer.AddOrUpdateStorageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 添加或者更新job */
func (c *StreamcomputerClient) AddOrUpdateJob(request *streamcomputer.AddOrUpdateJobRequest) (*streamcomputer.AddOrUpdateJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streamcomputer.AddOrUpdateJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询某个应用详情 */
func (c *StreamcomputerClient) QueryNamespaceDetail(request *streamcomputer.QueryNamespaceDetailRequest) (*streamcomputer.QueryNamespaceDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streamcomputer.QueryNamespaceDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 更新namespace */
func (c *StreamcomputerClient) UpdateNamespace(request *streamcomputer.UpdateNamespaceRequest) (*streamcomputer.UpdateNamespaceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streamcomputer.UpdateNamespaceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 删除作业 */
func (c *StreamcomputerClient) DeleteJob(request *streamcomputer.DeleteJobRequest) (*streamcomputer.DeleteJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streamcomputer.DeleteJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询指定输入 */
func (c *StreamcomputerClient) DescribeStorage(request *streamcomputer.DescribeStorageRequest) (*streamcomputer.DescribeStorageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streamcomputer.DescribeStorageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

