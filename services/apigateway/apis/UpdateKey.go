// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type UpdateKeyRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* keyid  */
    KeyId string `json:"keyId"`

    /* key 名称 (Optional) */
    KeyName *string `json:"keyName"`

    /*  (Optional) */
    KeyDesc *string `json:"keyDesc"`
}

/*
 * param regionId: 地域ID (Required)
 * param keyId: keyid (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateKeyRequest(
    regionId string,
    keyId string,
) *UpdateKeyRequest {

	return &UpdateKeyRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/kms",
			Method:  "PATCH",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        KeyId: keyId,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param keyId: keyid (Required)
 * param keyName: key 名称 (Optional)
 * param keyDesc:  (Optional)
 */
func NewUpdateKeyRequestWithAllParams(
    regionId string,
    keyId string,
    keyName *string,
    keyDesc *string,
) *UpdateKeyRequest {

    return &UpdateKeyRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/kms",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        KeyId: keyId,
        KeyName: keyName,
        KeyDesc: keyDesc,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateKeyRequestWithoutParam() *UpdateKeyRequest {

    return &UpdateKeyRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/kms",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *UpdateKeyRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param keyId: keyid(Required) */
func (r *UpdateKeyRequest) SetKeyId(keyId string) {
    r.KeyId = keyId
}

/* param keyName: key 名称(Optional) */
func (r *UpdateKeyRequest) SetKeyName(keyName string) {
    r.KeyName = &keyName
}

/* param keyDesc: (Optional) */
func (r *UpdateKeyRequest) SetKeyDesc(keyDesc string) {
    r.KeyDesc = &keyDesc
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateKeyRequest) GetRegionId() string {
    return r.RegionId
}

type UpdateKeyResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateKeyResult `json:"result"`
}

type UpdateKeyResult struct {
}