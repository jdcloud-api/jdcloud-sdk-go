// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    apigateway "github.com/lshuining/jdcloud-sdk-go/services/apigateway/models"
)

type CreateBackendConfigRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 分组ID  */
    ApiGroupId string `json:"apiGroupId"`

    /* 接口ID (Optional) */
    BackendConfigId *string `json:"backendConfigId"`

    /* 分组ID (Optional) */
    BaseGroupId *string `json:"baseGroupId"`

    /* 环境：test、preview、online  */
    Environment string `json:"environment"`

    /* 后端地址 (Optional) */
    BackendUrl *string `json:"backendUrl"`

    /* 后端服务类型：mock、HTTP/HTTPS  */
    BackendServiceType string `json:"backendServiceType"`

    /* header参数列表 (Optional) */
    HeaderParams []apigateway.SimpleParameter `json:"headerParams"`

    /* query参数列表 (Optional) */
    QueryParams []apigateway.SimpleParameter `json:"queryParams"`

    /* 描述 (Optional) */
    Description *string `json:"description"`

    /* 发布日期，格式为毫秒级时间戳 (Optional) */
    CreateTime *int64 `json:"createTime"`

    /* 排序，赋值0时为默认的后端配置  */
    Sort int `json:"sort"`

    /* 排序，用于展示使用 (Optional) */
    UserSort *int `json:"userSort"`

    /* vpc网关id (Optional) */
    JdsfId *string `json:"jdsfId"`

    /* vpc后端地址 (Optional) */
    JdsfParam *string `json:"jdsfParam"`

    /* vpc网关所属region (Optional) */
    JdsfRegion *string `json:"jdsfRegion"`

    /* vpc网关创建者的pin (Optional) */
    JdsfPin *string `json:"jdsfPin"`
}

/*
 * param regionId: 地域ID (Required)
 * param apiGroupId: 分组ID (Required)
 * param environment: 环境：test、preview、online (Required)
 * param backendServiceType: 后端服务类型：mock、HTTP/HTTPS (Required)
 * param sort: 排序，赋值0时为默认的后端配置 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateBackendConfigRequest(
    regionId string,
    apiGroupId string,
    environment string,
    backendServiceType string,
    sort int,
) *CreateBackendConfigRequest {

	return &CreateBackendConfigRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/apiGroups/{apiGroupId}/backendConfig",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        ApiGroupId: apiGroupId,
        Environment: environment,
        BackendServiceType: backendServiceType,
        Sort: sort,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param apiGroupId: 分组ID (Required)
 * param backendConfigId: 接口ID (Optional)
 * param baseGroupId: 分组ID (Optional)
 * param environment: 环境：test、preview、online (Required)
 * param backendUrl: 后端地址 (Optional)
 * param backendServiceType: 后端服务类型：mock、HTTP/HTTPS (Required)
 * param headerParams: header参数列表 (Optional)
 * param queryParams: query参数列表 (Optional)
 * param description: 描述 (Optional)
 * param createTime: 发布日期，格式为毫秒级时间戳 (Optional)
 * param sort: 排序，赋值0时为默认的后端配置 (Required)
 * param userSort: 排序，用于展示使用 (Optional)
 * param jdsfId: vpc网关id (Optional)
 * param jdsfParam: vpc后端地址 (Optional)
 * param jdsfRegion: vpc网关所属region (Optional)
 * param jdsfPin: vpc网关创建者的pin (Optional)
 */
func NewCreateBackendConfigRequestWithAllParams(
    regionId string,
    apiGroupId string,
    backendConfigId *string,
    baseGroupId *string,
    environment string,
    backendUrl *string,
    backendServiceType string,
    headerParams []apigateway.SimpleParameter,
    queryParams []apigateway.SimpleParameter,
    description *string,
    createTime *int64,
    sort int,
    userSort *int,
    jdsfId *string,
    jdsfParam *string,
    jdsfRegion *string,
    jdsfPin *string,
) *CreateBackendConfigRequest {

    return &CreateBackendConfigRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apiGroups/{apiGroupId}/backendConfig",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        ApiGroupId: apiGroupId,
        BackendConfigId: backendConfigId,
        BaseGroupId: baseGroupId,
        Environment: environment,
        BackendUrl: backendUrl,
        BackendServiceType: backendServiceType,
        HeaderParams: headerParams,
        QueryParams: queryParams,
        Description: description,
        CreateTime: createTime,
        Sort: sort,
        UserSort: userSort,
        JdsfId: jdsfId,
        JdsfParam: jdsfParam,
        JdsfRegion: jdsfRegion,
        JdsfPin: jdsfPin,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateBackendConfigRequestWithoutParam() *CreateBackendConfigRequest {

    return &CreateBackendConfigRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apiGroups/{apiGroupId}/backendConfig",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *CreateBackendConfigRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param apiGroupId: 分组ID(Required) */
func (r *CreateBackendConfigRequest) SetApiGroupId(apiGroupId string) {
    r.ApiGroupId = apiGroupId
}

/* param backendConfigId: 接口ID(Optional) */
func (r *CreateBackendConfigRequest) SetBackendConfigId(backendConfigId string) {
    r.BackendConfigId = &backendConfigId
}

/* param baseGroupId: 分组ID(Optional) */
func (r *CreateBackendConfigRequest) SetBaseGroupId(baseGroupId string) {
    r.BaseGroupId = &baseGroupId
}

/* param environment: 环境：test、preview、online(Required) */
func (r *CreateBackendConfigRequest) SetEnvironment(environment string) {
    r.Environment = environment
}

/* param backendUrl: 后端地址(Optional) */
func (r *CreateBackendConfigRequest) SetBackendUrl(backendUrl string) {
    r.BackendUrl = &backendUrl
}

/* param backendServiceType: 后端服务类型：mock、HTTP/HTTPS(Required) */
func (r *CreateBackendConfigRequest) SetBackendServiceType(backendServiceType string) {
    r.BackendServiceType = backendServiceType
}

/* param headerParams: header参数列表(Optional) */
func (r *CreateBackendConfigRequest) SetHeaderParams(headerParams []apigateway.SimpleParameter) {
    r.HeaderParams = headerParams
}

/* param queryParams: query参数列表(Optional) */
func (r *CreateBackendConfigRequest) SetQueryParams(queryParams []apigateway.SimpleParameter) {
    r.QueryParams = queryParams
}

/* param description: 描述(Optional) */
func (r *CreateBackendConfigRequest) SetDescription(description string) {
    r.Description = &description
}

/* param createTime: 发布日期，格式为毫秒级时间戳(Optional) */
func (r *CreateBackendConfigRequest) SetCreateTime(createTime int64) {
    r.CreateTime = &createTime
}

/* param sort: 排序，赋值0时为默认的后端配置(Required) */
func (r *CreateBackendConfigRequest) SetSort(sort int) {
    r.Sort = sort
}

/* param userSort: 排序，用于展示使用(Optional) */
func (r *CreateBackendConfigRequest) SetUserSort(userSort int) {
    r.UserSort = &userSort
}

/* param jdsfId: vpc网关id(Optional) */
func (r *CreateBackendConfigRequest) SetJdsfId(jdsfId string) {
    r.JdsfId = &jdsfId
}

/* param jdsfParam: vpc后端地址(Optional) */
func (r *CreateBackendConfigRequest) SetJdsfParam(jdsfParam string) {
    r.JdsfParam = &jdsfParam
}

/* param jdsfRegion: vpc网关所属region(Optional) */
func (r *CreateBackendConfigRequest) SetJdsfRegion(jdsfRegion string) {
    r.JdsfRegion = &jdsfRegion
}

/* param jdsfPin: vpc网关创建者的pin(Optional) */
func (r *CreateBackendConfigRequest) SetJdsfPin(jdsfPin string) {
    r.JdsfPin = &jdsfPin
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateBackendConfigRequest) GetRegionId() string {
    return r.RegionId
}

type CreateBackendConfigResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateBackendConfigResult `json:"result"`
}

type CreateBackendConfigResult struct {
    BackendConfigId string `json:"backendConfigId"`
}