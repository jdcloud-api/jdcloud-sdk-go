// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    jdccs "github.com/lshuining/jdcloud-sdk-go/services/jdccs/models"
)

type DescribeOpenDevicesDataRequest struct {

    core.JDCloudRequest

    /* 设备编码,支持多个deviceCode批量查询，每个id用英文竖线分隔 (Optional) */
    DeviceCodes *string `json:"deviceCodes"`

    /* 设备类型  */
    DeviceType string `json:"deviceType"`
}

/*
 * param deviceType: 设备类型 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeOpenDevicesDataRequest(
    deviceType string,
) *DescribeOpenDevicesDataRequest {

	return &DescribeOpenDevicesDataRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/openDevicesData",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        DeviceType: deviceType,
	}
}

/*
 * param deviceCodes: 设备编码,支持多个deviceCode批量查询，每个id用英文竖线分隔 (Optional)
 * param deviceType: 设备类型 (Required)
 */
func NewDescribeOpenDevicesDataRequestWithAllParams(
    deviceCodes *string,
    deviceType string,
) *DescribeOpenDevicesDataRequest {

    return &DescribeOpenDevicesDataRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/openDevicesData",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        DeviceCodes: deviceCodes,
        DeviceType: deviceType,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeOpenDevicesDataRequestWithoutParam() *DescribeOpenDevicesDataRequest {

    return &DescribeOpenDevicesDataRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/openDevicesData",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param deviceCodes: 设备编码,支持多个deviceCode批量查询，每个id用英文竖线分隔(Optional) */
func (r *DescribeOpenDevicesDataRequest) SetDeviceCodes(deviceCodes string) {
    r.DeviceCodes = &deviceCodes
}

/* param deviceType: 设备类型(Required) */
func (r *DescribeOpenDevicesDataRequest) SetDeviceType(deviceType string) {
    r.DeviceType = deviceType
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeOpenDevicesDataRequest) GetRegionId() string {
    return ""
}

type DescribeOpenDevicesDataResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeOpenDevicesDataResult `json:"result"`
}

type DescribeOpenDevicesDataResult struct {
    Data []jdccs.OpenDevicesData `json:"data"`
}