// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    jdccs "github.com/jdcloud-api/jdcloud-sdk-go/services/jdccs/models"
    common "github.com/jdcloud-api/jdcloud-sdk-go/services/common/models"
)

type DescribeAlarmsRequest struct {

    core.JDCloudRequest

    /* 页码, 默认为1 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 分页大小，默认为20 (Optional) */
    PageSize *int `json:"pageSize"`

    /* 资源类型 bandwidth:带宽 (Optional) */
    ResourceType *string `json:"resourceType"`

    /* 资源ID，指定resourceId时须指定resourceType (Optional) */
    ResourceId *string `json:"resourceId"`

    /* 机房英文标识 (Optional) */
    Idc *string `json:"idc"`

    /* 规则状态 disabled:禁用 enabled:启用 (Optional) */
    Status *string `json:"status"`

    /* alarmId - 规则实施ID，精确匹配，支持多个
 (Optional) */
    Filters []common.Filter `json:"filters"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeAlarmsRequest(
) *DescribeAlarmsRequest {

	return &DescribeAlarmsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/alarms",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param pageNumber: 页码, 默认为1 (Optional)
 * param pageSize: 分页大小，默认为20 (Optional)
 * param resourceType: 资源类型 bandwidth:带宽 (Optional)
 * param resourceId: 资源ID，指定resourceId时须指定resourceType (Optional)
 * param idc: 机房英文标识 (Optional)
 * param status: 规则状态 disabled:禁用 enabled:启用 (Optional)
 * param filters: alarmId - 规则实施ID，精确匹配，支持多个
 (Optional)
 */
func NewDescribeAlarmsRequestWithAllParams(
    pageNumber *int,
    pageSize *int,
    resourceType *string,
    resourceId *string,
    idc *string,
    status *string,
    filters []common.Filter,
) *DescribeAlarmsRequest {

    return &DescribeAlarmsRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/alarms",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        PageNumber: pageNumber,
        PageSize: pageSize,
        ResourceType: resourceType,
        ResourceId: resourceId,
        Idc: idc,
        Status: status,
        Filters: filters,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeAlarmsRequestWithoutParam() *DescribeAlarmsRequest {

    return &DescribeAlarmsRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/alarms",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param pageNumber: 页码, 默认为1(Optional) */
func (r *DescribeAlarmsRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}
/* param pageSize: 分页大小，默认为20(Optional) */
func (r *DescribeAlarmsRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}
/* param resourceType: 资源类型 bandwidth:带宽(Optional) */
func (r *DescribeAlarmsRequest) SetResourceType(resourceType string) {
    r.ResourceType = &resourceType
}
/* param resourceId: 资源ID，指定resourceId时须指定resourceType(Optional) */
func (r *DescribeAlarmsRequest) SetResourceId(resourceId string) {
    r.ResourceId = &resourceId
}
/* param idc: 机房英文标识(Optional) */
func (r *DescribeAlarmsRequest) SetIdc(idc string) {
    r.Idc = &idc
}
/* param status: 规则状态 disabled:禁用 enabled:启用(Optional) */
func (r *DescribeAlarmsRequest) SetStatus(status string) {
    r.Status = &status
}
/* param filters: alarmId - 规则实施ID，精确匹配，支持多个
(Optional) */
func (r *DescribeAlarmsRequest) SetFilters(filters []common.Filter) {
    r.Filters = filters
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeAlarmsRequest) GetRegionId() string {
    return ""
}

type DescribeAlarmsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeAlarmsResult `json:"result"`
}

type DescribeAlarmsResult struct {
    Alarms []jdccs.DescribeAlarm `json:"alarms"`
    PageNumber int `json:"pageNumber"`
    PageSize int `json:"pageSize"`
    TotalCount int `json:"totalCount"`
}