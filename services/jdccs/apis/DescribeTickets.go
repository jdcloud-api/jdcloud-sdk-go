// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    jdccs "github.com/jdcloud-api/jdcloud-sdk-go/services/jdccs/models"
    common "github.com/jdcloud-api/jdcloud-sdk-go/services/common/models"
)

type DescribeTicketsRequest struct {

    core.JDCloudRequest

    /* 页码, 默认为1 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 分页大小，默认为20 (Optional) */
    PageSize *int `json:"pageSize"`

    /* 工单TAB类型 pendingProcess:待我处理 pendingReview:待审核 processing:处理中 all:全部(默认) (Optional) */
    Type *string `json:"type"`

    /* 工单类型 (Optional) */
    TicketTypeName *string `json:"ticketTypeName"`

    /* 工单状态 pendingReview:待审核 revoked:已撤销 processing:处理中 pendingVerification:待核验 pendingClose:待关单 rejected:已拒绝 completed:已完成 cancelled:已取消 draft:草稿中 (Optional) */
    Status *string `json:"status"`

    /* 工单编号 (Optional) */
    TicketNo *string `json:"ticketNo"`

    /* 工单名称 (Optional) */
    TicketTemplateName *string `json:"ticketTemplateName"`

    /* 描述 (Optional) */
    Description *string `json:"description"`

    /* 创建开始时间，遵循ISO8601标准，使用UTC时间，格式为：yyyy-MM-ddTHH:mm:ssZ (Optional) */
    StartTime *string `json:"startTime"`

    /* 创建结束时间，遵循ISO8601标准，使用UTC时间，格式为：yyyy-MM-ddTHH:mm:ssZ (Optional) */
    EndTime *string `json:"endTime"`

    /* ticketNo - 工单编号，精确匹配，支持多个
 (Optional) */
    Filters []common.Filter `json:"filters"`

    /* createdTime - 创建时间 closedTime - 关闭时间 (Optional) */
    Sorts []common.Sort `json:"sorts"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeTicketsRequest(
) *DescribeTicketsRequest {

	return &DescribeTicketsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/tickets",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param pageNumber: 页码, 默认为1 (Optional)
 * param pageSize: 分页大小，默认为20 (Optional)
 * param type_: 工单TAB类型 pendingProcess:待我处理 pendingReview:待审核 processing:处理中 all:全部(默认) (Optional)
 * param ticketTypeName: 工单类型 (Optional)
 * param status: 工单状态 pendingReview:待审核 revoked:已撤销 processing:处理中 pendingVerification:待核验 pendingClose:待关单 rejected:已拒绝 completed:已完成 cancelled:已取消 draft:草稿中 (Optional)
 * param ticketNo: 工单编号 (Optional)
 * param ticketTemplateName: 工单名称 (Optional)
 * param description: 描述 (Optional)
 * param startTime: 创建开始时间，遵循ISO8601标准，使用UTC时间，格式为：yyyy-MM-ddTHH:mm:ssZ (Optional)
 * param endTime: 创建结束时间，遵循ISO8601标准，使用UTC时间，格式为：yyyy-MM-ddTHH:mm:ssZ (Optional)
 * param filters: ticketNo - 工单编号，精确匹配，支持多个
 (Optional)
 * param sorts: createdTime - 创建时间 closedTime - 关闭时间 (Optional)
 */
func NewDescribeTicketsRequestWithAllParams(
    pageNumber *int,
    pageSize *int,
    type_ *string,
    ticketTypeName *string,
    status *string,
    ticketNo *string,
    ticketTemplateName *string,
    description *string,
    startTime *string,
    endTime *string,
    filters []common.Filter,
    sorts []common.Sort,
) *DescribeTicketsRequest {

    return &DescribeTicketsRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/tickets",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        PageNumber: pageNumber,
        PageSize: pageSize,
        Type: type_,
        TicketTypeName: ticketTypeName,
        Status: status,
        TicketNo: ticketNo,
        TicketTemplateName: ticketTemplateName,
        Description: description,
        StartTime: startTime,
        EndTime: endTime,
        Filters: filters,
        Sorts: sorts,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeTicketsRequestWithoutParam() *DescribeTicketsRequest {

    return &DescribeTicketsRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/tickets",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param pageNumber: 页码, 默认为1(Optional) */
func (r *DescribeTicketsRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}
/* param pageSize: 分页大小，默认为20(Optional) */
func (r *DescribeTicketsRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}
/* param type_: 工单TAB类型 pendingProcess:待我处理 pendingReview:待审核 processing:处理中 all:全部(默认)(Optional) */
func (r *DescribeTicketsRequest) SetType(type_ string) {
    r.Type = &type_
}
/* param ticketTypeName: 工单类型(Optional) */
func (r *DescribeTicketsRequest) SetTicketTypeName(ticketTypeName string) {
    r.TicketTypeName = &ticketTypeName
}
/* param status: 工单状态 pendingReview:待审核 revoked:已撤销 processing:处理中 pendingVerification:待核验 pendingClose:待关单 rejected:已拒绝 completed:已完成 cancelled:已取消 draft:草稿中(Optional) */
func (r *DescribeTicketsRequest) SetStatus(status string) {
    r.Status = &status
}
/* param ticketNo: 工单编号(Optional) */
func (r *DescribeTicketsRequest) SetTicketNo(ticketNo string) {
    r.TicketNo = &ticketNo
}
/* param ticketTemplateName: 工单名称(Optional) */
func (r *DescribeTicketsRequest) SetTicketTemplateName(ticketTemplateName string) {
    r.TicketTemplateName = &ticketTemplateName
}
/* param description: 描述(Optional) */
func (r *DescribeTicketsRequest) SetDescription(description string) {
    r.Description = &description
}
/* param startTime: 创建开始时间，遵循ISO8601标准，使用UTC时间，格式为：yyyy-MM-ddTHH:mm:ssZ(Optional) */
func (r *DescribeTicketsRequest) SetStartTime(startTime string) {
    r.StartTime = &startTime
}
/* param endTime: 创建结束时间，遵循ISO8601标准，使用UTC时间，格式为：yyyy-MM-ddTHH:mm:ssZ(Optional) */
func (r *DescribeTicketsRequest) SetEndTime(endTime string) {
    r.EndTime = &endTime
}
/* param filters: ticketNo - 工单编号，精确匹配，支持多个
(Optional) */
func (r *DescribeTicketsRequest) SetFilters(filters []common.Filter) {
    r.Filters = filters
}
/* param sorts: createdTime - 创建时间 closedTime - 关闭时间(Optional) */
func (r *DescribeTicketsRequest) SetSorts(sorts []common.Sort) {
    r.Sorts = sorts
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeTicketsRequest) GetRegionId() string {
    return ""
}

type DescribeTicketsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeTicketsResult `json:"result"`
}

type DescribeTicketsResult struct {
    Tickets []jdccs.Ticket `json:"tickets"`
    PageNumber int `json:"pageNumber"`
    PageSize int `json:"pageSize"`
    TotalCount int `json:"totalCount"`
}