// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    jdccs "github.com/lshuining/jdcloud-sdk-go/services/jdccs/models"
    common "github.com/lshuining/jdcloud-sdk-go/services/common/models"
)

type DescribeBandwidthsRequest struct {

    core.JDCloudRequest

    /* IDC机房ID  */
    Idc string `json:"idc"`

    /* 页码, 默认为1 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 分页大小，默认为20 (Optional) */
    PageSize *int `json:"pageSize"`

    /* 是否查询全部，默认分页 (Optional) */
    All *int `json:"all"`

    /* 线路类型 dynamicBGP:动态BGP thirdLineBGP:三线BGP telecom:电信单线 unicom:联通单线 mobile:移动单线 (Optional) */
    LineType *string `json:"lineType"`

    /* 计费方式 fixedBandwidth:固定带宽 95thPercentile:95峰值 merge95thPercentile:合并95峰值 (Optional) */
    ChargeType *string `json:"chargeType"`

    /* 带宽（出口）名称 (Optional) */
    BandwidthName *string `json:"bandwidthName"`

    /* 关联的公网IP (Optional) */
    RelatedIp *string `json:"relatedIp"`

    /* bandwidthId - 带宽实例ID，精确匹配，支持多个
 (Optional) */
    Filters []common.Filter `json:"filters"`

    /* null (Optional) */
    Sorts []common.Sort `json:"sorts"`
}

/*
 * param idc: IDC机房ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeBandwidthsRequest(
    idc string,
) *DescribeBandwidthsRequest {

	return &DescribeBandwidthsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/idcs/{idc}/bandwidths",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        Idc: idc,
	}
}

/*
 * param idc: IDC机房ID (Required)
 * param pageNumber: 页码, 默认为1 (Optional)
 * param pageSize: 分页大小，默认为20 (Optional)
 * param all: 是否查询全部，默认分页 (Optional)
 * param lineType: 线路类型 dynamicBGP:动态BGP thirdLineBGP:三线BGP telecom:电信单线 unicom:联通单线 mobile:移动单线 (Optional)
 * param chargeType: 计费方式 fixedBandwidth:固定带宽 95thPercentile:95峰值 merge95thPercentile:合并95峰值 (Optional)
 * param bandwidthName: 带宽（出口）名称 (Optional)
 * param relatedIp: 关联的公网IP (Optional)
 * param filters: bandwidthId - 带宽实例ID，精确匹配，支持多个
 (Optional)
 * param sorts: null (Optional)
 */
func NewDescribeBandwidthsRequestWithAllParams(
    idc string,
    pageNumber *int,
    pageSize *int,
    all *int,
    lineType *string,
    chargeType *string,
    bandwidthName *string,
    relatedIp *string,
    filters []common.Filter,
    sorts []common.Sort,
) *DescribeBandwidthsRequest {

    return &DescribeBandwidthsRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/idcs/{idc}/bandwidths",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        Idc: idc,
        PageNumber: pageNumber,
        PageSize: pageSize,
        All: all,
        LineType: lineType,
        ChargeType: chargeType,
        BandwidthName: bandwidthName,
        RelatedIp: relatedIp,
        Filters: filters,
        Sorts: sorts,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeBandwidthsRequestWithoutParam() *DescribeBandwidthsRequest {

    return &DescribeBandwidthsRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/idcs/{idc}/bandwidths",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param idc: IDC机房ID(Required) */
func (r *DescribeBandwidthsRequest) SetIdc(idc string) {
    r.Idc = idc
}

/* param pageNumber: 页码, 默认为1(Optional) */
func (r *DescribeBandwidthsRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}

/* param pageSize: 分页大小，默认为20(Optional) */
func (r *DescribeBandwidthsRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

/* param all: 是否查询全部，默认分页(Optional) */
func (r *DescribeBandwidthsRequest) SetAll(all int) {
    r.All = &all
}

/* param lineType: 线路类型 dynamicBGP:动态BGP thirdLineBGP:三线BGP telecom:电信单线 unicom:联通单线 mobile:移动单线(Optional) */
func (r *DescribeBandwidthsRequest) SetLineType(lineType string) {
    r.LineType = &lineType
}

/* param chargeType: 计费方式 fixedBandwidth:固定带宽 95thPercentile:95峰值 merge95thPercentile:合并95峰值(Optional) */
func (r *DescribeBandwidthsRequest) SetChargeType(chargeType string) {
    r.ChargeType = &chargeType
}

/* param bandwidthName: 带宽（出口）名称(Optional) */
func (r *DescribeBandwidthsRequest) SetBandwidthName(bandwidthName string) {
    r.BandwidthName = &bandwidthName
}

/* param relatedIp: 关联的公网IP(Optional) */
func (r *DescribeBandwidthsRequest) SetRelatedIp(relatedIp string) {
    r.RelatedIp = &relatedIp
}

/* param filters: bandwidthId - 带宽实例ID，精确匹配，支持多个
(Optional) */
func (r *DescribeBandwidthsRequest) SetFilters(filters []common.Filter) {
    r.Filters = filters
}

/* param sorts: null(Optional) */
func (r *DescribeBandwidthsRequest) SetSorts(sorts []common.Sort) {
    r.Sorts = sorts
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeBandwidthsRequest) GetRegionId() string {
    return ""
}

type DescribeBandwidthsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeBandwidthsResult `json:"result"`
}

type DescribeBandwidthsResult struct {
    Bandwidths []jdccs.DescribeBandwidth `json:"bandwidths"`
    PageNumber int `json:"pageNumber"`
    PageSize int `json:"pageSize"`
    TotalCount int `json:"totalCount"`
}