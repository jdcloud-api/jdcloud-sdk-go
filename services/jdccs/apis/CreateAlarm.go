// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type CreateAlarmRequest struct {

    core.JDCloudRequest

    /* idc机房实例ID (Optional) */
    Idc *string `json:"idc"`

    /* 资源类型，bandwidth:带宽 (Optional) */
    ResourceType *string `json:"resourceType"`

    /* 带宽实例ID (Optional) */
    ResourceId *string `json:"resourceId"`

    /* 规则名称 (Optional) */
    Name *string `json:"name"`

    /* 监控项，bandwidthTrafficIn:上行实时流量 bandwidthTrafficOut:下行实时流量 (Optional) */
    Metric *string `json:"metric"`

    /* 统计周期（单位：分钟） (Optional) */
    Period *int `json:"period"`

    /* 统计方法：平均值=avg、最大值=max、最小值=min (Optional) */
    StatisticMethod *string `json:"statisticMethod"`

    /* 计算方式 >=、>、<、<=、=、！= (Optional) */
    Operator *string `json:"operator"`

    /* 阈值 (Optional) */
    Threshold *float64 `json:"threshold"`

    /* 连续多少次后报警 (Optional) */
    Times *int `json:"times"`

    /* 通知周期 单位：小时 (Optional) */
    NoticePeriod *int `json:"noticePeriod"`

    /* 规则状态 disabled:禁用 enabled:启用 (Optional) */
    Status *string `json:"status"`

    /* 通知方式 all:全部 sms：短信 email:邮件 (Optional) */
    NoticeMethod *string `json:"noticeMethod"`

    /* 通知对象 all:全部 persons：个人 groups:角色组 (Optional) */
    NoticeObj *string `json:"noticeObj"`

    /* 通知对象用户ID,若多个用逗号分隔 (Optional) */
    UserId *string `json:"userId"`

    /* 通知对象组ID (Optional) */
    GroupId *string `json:"groupId"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateAlarmRequest(
) *CreateAlarmRequest {

	return &CreateAlarmRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/alarms",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param idc: idc机房实例ID (Optional)
 * param resourceType: 资源类型，bandwidth:带宽 (Optional)
 * param resourceId: 带宽实例ID (Optional)
 * param name: 规则名称 (Optional)
 * param metric: 监控项，bandwidthTrafficIn:上行实时流量 bandwidthTrafficOut:下行实时流量 (Optional)
 * param period: 统计周期（单位：分钟） (Optional)
 * param statisticMethod: 统计方法：平均值=avg、最大值=max、最小值=min (Optional)
 * param operator: 计算方式 >=、>、<、<=、=、！= (Optional)
 * param threshold: 阈值 (Optional)
 * param times: 连续多少次后报警 (Optional)
 * param noticePeriod: 通知周期 单位：小时 (Optional)
 * param status: 规则状态 disabled:禁用 enabled:启用 (Optional)
 * param noticeMethod: 通知方式 all:全部 sms：短信 email:邮件 (Optional)
 * param noticeObj: 通知对象 all:全部 persons：个人 groups:角色组 (Optional)
 * param userId: 通知对象用户ID,若多个用逗号分隔 (Optional)
 * param groupId: 通知对象组ID (Optional)
 */
func NewCreateAlarmRequestWithAllParams(
    idc *string,
    resourceType *string,
    resourceId *string,
    name *string,
    metric *string,
    period *int,
    statisticMethod *string,
    operator *string,
    threshold *float64,
    times *int,
    noticePeriod *int,
    status *string,
    noticeMethod *string,
    noticeObj *string,
    userId *string,
    groupId *string,
) *CreateAlarmRequest {

    return &CreateAlarmRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/alarms",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Idc: idc,
        ResourceType: resourceType,
        ResourceId: resourceId,
        Name: name,
        Metric: metric,
        Period: period,
        StatisticMethod: statisticMethod,
        Operator: operator,
        Threshold: threshold,
        Times: times,
        NoticePeriod: noticePeriod,
        Status: status,
        NoticeMethod: noticeMethod,
        NoticeObj: noticeObj,
        UserId: userId,
        GroupId: groupId,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateAlarmRequestWithoutParam() *CreateAlarmRequest {

    return &CreateAlarmRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/alarms",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param idc: idc机房实例ID(Optional) */
func (r *CreateAlarmRequest) SetIdc(idc string) {
    r.Idc = &idc
}

/* param resourceType: 资源类型，bandwidth:带宽(Optional) */
func (r *CreateAlarmRequest) SetResourceType(resourceType string) {
    r.ResourceType = &resourceType
}

/* param resourceId: 带宽实例ID(Optional) */
func (r *CreateAlarmRequest) SetResourceId(resourceId string) {
    r.ResourceId = &resourceId
}

/* param name: 规则名称(Optional) */
func (r *CreateAlarmRequest) SetName(name string) {
    r.Name = &name
}

/* param metric: 监控项，bandwidthTrafficIn:上行实时流量 bandwidthTrafficOut:下行实时流量(Optional) */
func (r *CreateAlarmRequest) SetMetric(metric string) {
    r.Metric = &metric
}

/* param period: 统计周期（单位：分钟）(Optional) */
func (r *CreateAlarmRequest) SetPeriod(period int) {
    r.Period = &period
}

/* param statisticMethod: 统计方法：平均值=avg、最大值=max、最小值=min(Optional) */
func (r *CreateAlarmRequest) SetStatisticMethod(statisticMethod string) {
    r.StatisticMethod = &statisticMethod
}

/* param operator: 计算方式 >=、>、<、<=、=、！=(Optional) */
func (r *CreateAlarmRequest) SetOperator(operator string) {
    r.Operator = &operator
}

/* param threshold: 阈值(Optional) */
func (r *CreateAlarmRequest) SetThreshold(threshold float64) {
    r.Threshold = &threshold
}

/* param times: 连续多少次后报警(Optional) */
func (r *CreateAlarmRequest) SetTimes(times int) {
    r.Times = &times
}

/* param noticePeriod: 通知周期 单位：小时(Optional) */
func (r *CreateAlarmRequest) SetNoticePeriod(noticePeriod int) {
    r.NoticePeriod = &noticePeriod
}

/* param status: 规则状态 disabled:禁用 enabled:启用(Optional) */
func (r *CreateAlarmRequest) SetStatus(status string) {
    r.Status = &status
}

/* param noticeMethod: 通知方式 all:全部 sms：短信 email:邮件(Optional) */
func (r *CreateAlarmRequest) SetNoticeMethod(noticeMethod string) {
    r.NoticeMethod = &noticeMethod
}

/* param noticeObj: 通知对象 all:全部 persons：个人 groups:角色组(Optional) */
func (r *CreateAlarmRequest) SetNoticeObj(noticeObj string) {
    r.NoticeObj = &noticeObj
}

/* param userId: 通知对象用户ID,若多个用逗号分隔(Optional) */
func (r *CreateAlarmRequest) SetUserId(userId string) {
    r.UserId = &userId
}

/* param groupId: 通知对象组ID(Optional) */
func (r *CreateAlarmRequest) SetGroupId(groupId string) {
    r.GroupId = &groupId
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateAlarmRequest) GetRegionId() string {
    return ""
}

type CreateAlarmResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateAlarmResult `json:"result"`
}

type CreateAlarmResult struct {
    Success bool `json:"success"`
}