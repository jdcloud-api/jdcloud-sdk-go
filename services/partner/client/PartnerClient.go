// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    partner "github.com/lshuining/jdcloud-sdk-go/services/partner/apis"
    "encoding/json"
    "errors"
)

type PartnerClient struct {
    core.JDCloudClient
}

func NewPartnerClient(credential *core.Credential) *PartnerClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("partner.jdcloud-api.com")

    return &PartnerClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "partner",
            Revision:    "1.1.4",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *PartnerClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *PartnerClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *PartnerClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 查询客户信息 */
func (c *PartnerClient) QueryMyCustomerList(request *partner.QueryMyCustomerListRequest) (*partner.QueryMyCustomerListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &partner.QueryMyCustomerListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询服务商下每个客户总消费数据 */
func (c *PartnerClient) GetEachConsumption(request *partner.GetEachConsumptionRequest) (*partner.GetEachConsumptionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &partner.GetEachConsumptionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询服务商相关pin下每个产品的消费数据 */
func (c *PartnerClient) DescribeCustomerBillByProduct(request *partner.DescribeCustomerBillByProductRequest) (*partner.DescribeCustomerBillByProductResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &partner.DescribeCustomerBillByProductResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询服务商相关的总消费数据 */
func (c *PartnerClient) GetTotalConsumption(request *partner.GetTotalConsumptionRequest) (*partner.GetTotalConsumptionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &partner.GetTotalConsumptionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

