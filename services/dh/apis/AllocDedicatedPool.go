// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type AllocDedicatedPoolRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 支持的专有宿主机机型，每个专有宿主机池只能且必须指定一个专有宿主机机型
 (Optional) */
    DedicatedHostType *string `json:"dedicatedHostType"`

    /* 专有宿主机池名称
 (Optional) */
    Name *string `json:"name"`

    /* 指定专有宿主机池支持的可用区，可指定多个。
 (Optional) */
    Az []string `json:"az"`

    /* 专有宿主机池的描述信息。
 (Optional) */
    Description *string `json:"description"`
}

/*
 * param regionId: 地域ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewAllocDedicatedPoolRequest(
    regionId string,
) *AllocDedicatedPoolRequest {

	return &AllocDedicatedPoolRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/dedicatedPools",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param dedicatedHostType: 支持的专有宿主机机型，每个专有宿主机池只能且必须指定一个专有宿主机机型
 (Optional)
 * param name: 专有宿主机池名称
 (Optional)
 * param az: 指定专有宿主机池支持的可用区，可指定多个。
 (Optional)
 * param description: 专有宿主机池的描述信息。
 (Optional)
 */
func NewAllocDedicatedPoolRequestWithAllParams(
    regionId string,
    dedicatedHostType *string,
    name *string,
    az []string,
    description *string,
) *AllocDedicatedPoolRequest {

    return &AllocDedicatedPoolRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/dedicatedPools",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        DedicatedHostType: dedicatedHostType,
        Name: name,
        Az: az,
        Description: description,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewAllocDedicatedPoolRequestWithoutParam() *AllocDedicatedPoolRequest {

    return &AllocDedicatedPoolRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/dedicatedPools",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *AllocDedicatedPoolRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param dedicatedHostType: 支持的专有宿主机机型，每个专有宿主机池只能且必须指定一个专有宿主机机型
(Optional) */
func (r *AllocDedicatedPoolRequest) SetDedicatedHostType(dedicatedHostType string) {
    r.DedicatedHostType = &dedicatedHostType
}

/* param name: 专有宿主机池名称
(Optional) */
func (r *AllocDedicatedPoolRequest) SetName(name string) {
    r.Name = &name
}

/* param az: 指定专有宿主机池支持的可用区，可指定多个。
(Optional) */
func (r *AllocDedicatedPoolRequest) SetAz(az []string) {
    r.Az = az
}

/* param description: 专有宿主机池的描述信息。
(Optional) */
func (r *AllocDedicatedPoolRequest) SetDescription(description string) {
    r.Description = &description
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r AllocDedicatedPoolRequest) GetRegionId() string {
    return r.RegionId
}

type AllocDedicatedPoolResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result AllocDedicatedPoolResult `json:"result"`
}

type AllocDedicatedPoolResult struct {
    DedicatedPoolId string `json:"dedicatedPoolId"`
}