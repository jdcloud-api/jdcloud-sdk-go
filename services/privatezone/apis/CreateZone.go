// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    privatezone "github.com/lshuining/jdcloud-sdk-go/services/privatezone/models"
)

type CreateZoneRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* zone  */
    Zone string `json:"zone"`

    /* 购买的套餐实例ID  */
    InstanceId string `json:"instanceId"`

    /* 域名类型 LOCAL->云内全局 PTR->反向解析zone PV->私有zone  */
    ZoneType string `json:"zoneType"`

    /* 解析失败后是否进行递归解析 (Optional) */
    RetryRecurse *bool `json:"retryRecurse"`

    /* 绑定的vpc信息 (Optional) */
    BindVpc []privatezone.BindVpcReq `json:"bindVpc"`
}

/*
 * param regionId: 地域ID (Required)
 * param zone: zone (Required)
 * param instanceId: 购买的套餐实例ID (Required)
 * param zoneType: 域名类型 LOCAL->云内全局 PTR->反向解析zone PV->私有zone (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateZoneRequest(
    regionId string,
    zone string,
    instanceId string,
    zoneType string,
) *CreateZoneRequest {

	return &CreateZoneRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/zones",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        Zone: zone,
        InstanceId: instanceId,
        ZoneType: zoneType,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param zone: zone (Required)
 * param instanceId: 购买的套餐实例ID (Required)
 * param zoneType: 域名类型 LOCAL->云内全局 PTR->反向解析zone PV->私有zone (Required)
 * param retryRecurse: 解析失败后是否进行递归解析 (Optional)
 * param bindVpc: 绑定的vpc信息 (Optional)
 */
func NewCreateZoneRequestWithAllParams(
    regionId string,
    zone string,
    instanceId string,
    zoneType string,
    retryRecurse *bool,
    bindVpc []privatezone.BindVpcReq,
) *CreateZoneRequest {

    return &CreateZoneRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/zones",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Zone: zone,
        InstanceId: instanceId,
        ZoneType: zoneType,
        RetryRecurse: retryRecurse,
        BindVpc: bindVpc,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateZoneRequestWithoutParam() *CreateZoneRequest {

    return &CreateZoneRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/zones",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *CreateZoneRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param zone: zone(Required) */
func (r *CreateZoneRequest) SetZone(zone string) {
    r.Zone = zone
}

/* param instanceId: 购买的套餐实例ID(Required) */
func (r *CreateZoneRequest) SetInstanceId(instanceId string) {
    r.InstanceId = instanceId
}

/* param zoneType: 域名类型 LOCAL->云内全局 PTR->反向解析zone PV->私有zone(Required) */
func (r *CreateZoneRequest) SetZoneType(zoneType string) {
    r.ZoneType = zoneType
}

/* param retryRecurse: 解析失败后是否进行递归解析(Optional) */
func (r *CreateZoneRequest) SetRetryRecurse(retryRecurse bool) {
    r.RetryRecurse = &retryRecurse
}

/* param bindVpc: 绑定的vpc信息(Optional) */
func (r *CreateZoneRequest) SetBindVpc(bindVpc []privatezone.BindVpcReq) {
    r.BindVpc = bindVpc
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateZoneRequest) GetRegionId() string {
    return r.RegionId
}

type CreateZoneResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateZoneResult `json:"result"`
}

type CreateZoneResult struct {
}