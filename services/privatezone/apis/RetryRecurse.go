// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type RetryRecurseRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* zone id  */
    ZoneId string `json:"zoneId"`

    /* true->解析失败后尝试递归解析 false->解析失败后不进行递归解析  */
    RetryRecurse bool `json:"retryRecurse"`
}

/*
 * param regionId: 地域ID (Required)
 * param zoneId: zone id (Required)
 * param retryRecurse: true->解析失败后尝试递归解析 false->解析失败后不进行递归解析 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewRetryRecurseRequest(
    regionId string,
    zoneId string,
    retryRecurse bool,
) *RetryRecurseRequest {

	return &RetryRecurseRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/zone/{zoneId}:retryRecurse",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        ZoneId: zoneId,
        RetryRecurse: retryRecurse,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param zoneId: zone id (Required)
 * param retryRecurse: true->解析失败后尝试递归解析 false->解析失败后不进行递归解析 (Required)
 */
func NewRetryRecurseRequestWithAllParams(
    regionId string,
    zoneId string,
    retryRecurse bool,
) *RetryRecurseRequest {

    return &RetryRecurseRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/zone/{zoneId}:retryRecurse",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        ZoneId: zoneId,
        RetryRecurse: retryRecurse,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewRetryRecurseRequestWithoutParam() *RetryRecurseRequest {

    return &RetryRecurseRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/zone/{zoneId}:retryRecurse",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *RetryRecurseRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param zoneId: zone id(Required) */
func (r *RetryRecurseRequest) SetZoneId(zoneId string) {
    r.ZoneId = zoneId
}

/* param retryRecurse: true->解析失败后尝试递归解析 false->解析失败后不进行递归解析(Required) */
func (r *RetryRecurseRequest) SetRetryRecurse(retryRecurse bool) {
    r.RetryRecurse = retryRecurse
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r RetryRecurseRequest) GetRegionId() string {
    return r.RegionId
}

type RetryRecurseResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result RetryRecurseResult `json:"result"`
}

type RetryRecurseResult struct {
}