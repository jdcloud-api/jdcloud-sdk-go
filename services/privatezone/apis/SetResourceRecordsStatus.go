// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type SetResourceRecordsStatusRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* zone id  */
    ZoneId string `json:"zoneId"`

    /* 解析记录ID  */
    ResourceRecordId string `json:"resourceRecordId"`

    /* 解析记录状态 START->正常解析 STOP->停止解析  */
    Status string `json:"status"`
}

/*
 * param regionId: 地域ID (Required)
 * param zoneId: zone id (Required)
 * param resourceRecordId: 解析记录ID (Required)
 * param status: 解析记录状态 START->正常解析 STOP->停止解析 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewSetResourceRecordsStatusRequest(
    regionId string,
    zoneId string,
    resourceRecordId string,
    status string,
) *SetResourceRecordsStatusRequest {

	return &SetResourceRecordsStatusRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/zone/{zoneId}/resourceRecords/{resourceRecordId}/status",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        ZoneId: zoneId,
        ResourceRecordId: resourceRecordId,
        Status: status,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param zoneId: zone id (Required)
 * param resourceRecordId: 解析记录ID (Required)
 * param status: 解析记录状态 START->正常解析 STOP->停止解析 (Required)
 */
func NewSetResourceRecordsStatusRequestWithAllParams(
    regionId string,
    zoneId string,
    resourceRecordId string,
    status string,
) *SetResourceRecordsStatusRequest {

    return &SetResourceRecordsStatusRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/zone/{zoneId}/resourceRecords/{resourceRecordId}/status",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        ZoneId: zoneId,
        ResourceRecordId: resourceRecordId,
        Status: status,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewSetResourceRecordsStatusRequestWithoutParam() *SetResourceRecordsStatusRequest {

    return &SetResourceRecordsStatusRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/zone/{zoneId}/resourceRecords/{resourceRecordId}/status",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *SetResourceRecordsStatusRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param zoneId: zone id(Required) */
func (r *SetResourceRecordsStatusRequest) SetZoneId(zoneId string) {
    r.ZoneId = zoneId
}

/* param resourceRecordId: 解析记录ID(Required) */
func (r *SetResourceRecordsStatusRequest) SetResourceRecordId(resourceRecordId string) {
    r.ResourceRecordId = resourceRecordId
}

/* param status: 解析记录状态 START->正常解析 STOP->停止解析(Required) */
func (r *SetResourceRecordsStatusRequest) SetStatus(status string) {
    r.Status = status
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r SetResourceRecordsStatusRequest) GetRegionId() string {
    return r.RegionId
}

type SetResourceRecordsStatusResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result SetResourceRecordsStatusResult `json:"result"`
}

type SetResourceRecordsStatusResult struct {
}