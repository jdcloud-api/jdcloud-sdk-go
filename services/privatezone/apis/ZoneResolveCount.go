// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type ZoneResolveCountRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 查询时间段的起始时间, UTC时间格式，例如2017-11-10T23:00:00Z  */
    Start string `json:"start"`

    /* 查询时间段的终止时间, UTC时间格式，例如2017-11-10T23:00:00Z  */
    End string `json:"end"`

    /* 查询的zone id，默认查询所有zone (Optional) */
    ZoneIds []string `json:"zoneIds"`

    /* 查询的vpc id，默认查询所有vpc (Optional) */
    VpcIds []string `json:"vpcIds"`
}

/*
 * param regionId: 地域ID (Required)
 * param start: 查询时间段的起始时间, UTC时间格式，例如2017-11-10T23:00:00Z (Required)
 * param end: 查询时间段的终止时间, UTC时间格式，例如2017-11-10T23:00:00Z (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewZoneResolveCountRequest(
    regionId string,
    start string,
    end string,
) *ZoneResolveCountRequest {

	return &ZoneResolveCountRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/stat:zoneResolveCount",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        Start: start,
        End: end,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param start: 查询时间段的起始时间, UTC时间格式，例如2017-11-10T23:00:00Z (Required)
 * param end: 查询时间段的终止时间, UTC时间格式，例如2017-11-10T23:00:00Z (Required)
 * param zoneIds: 查询的zone id，默认查询所有zone (Optional)
 * param vpcIds: 查询的vpc id，默认查询所有vpc (Optional)
 */
func NewZoneResolveCountRequestWithAllParams(
    regionId string,
    start string,
    end string,
    zoneIds []string,
    vpcIds []string,
) *ZoneResolveCountRequest {

    return &ZoneResolveCountRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/stat:zoneResolveCount",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Start: start,
        End: end,
        ZoneIds: zoneIds,
        VpcIds: vpcIds,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewZoneResolveCountRequestWithoutParam() *ZoneResolveCountRequest {

    return &ZoneResolveCountRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/stat:zoneResolveCount",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *ZoneResolveCountRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param start: 查询时间段的起始时间, UTC时间格式，例如2017-11-10T23:00:00Z(Required) */
func (r *ZoneResolveCountRequest) SetStart(start string) {
    r.Start = start
}

/* param end: 查询时间段的终止时间, UTC时间格式，例如2017-11-10T23:00:00Z(Required) */
func (r *ZoneResolveCountRequest) SetEnd(end string) {
    r.End = end
}

/* param zoneIds: 查询的zone id，默认查询所有zone(Optional) */
func (r *ZoneResolveCountRequest) SetZoneIds(zoneIds []string) {
    r.ZoneIds = zoneIds
}

/* param vpcIds: 查询的vpc id，默认查询所有vpc(Optional) */
func (r *ZoneResolveCountRequest) SetVpcIds(vpcIds []string) {
    r.VpcIds = vpcIds
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ZoneResolveCountRequest) GetRegionId() string {
    return r.RegionId
}

type ZoneResolveCountResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ZoneResolveCountResult `json:"result"`
}

type ZoneResolveCountResult struct {
    Time []int64 `json:"time"`
    Traffic []int64 `json:"traffic"`
}