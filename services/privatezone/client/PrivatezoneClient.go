// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    privatezone "github.com/lshuining/jdcloud-sdk-go/services/privatezone/apis"
    "encoding/json"
    "errors"
)

type PrivatezoneClient struct {
    core.JDCloudClient
}

func NewPrivatezoneClient(credential *core.Credential) *PrivatezoneClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("privatezone.jdcloud-api.com")

    return &PrivatezoneClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "privatezone",
            Revision:    "0.0.1",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *PrivatezoneClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *PrivatezoneClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *PrivatezoneClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 查询操作日志
 */
func (c *PrivatezoneClient) DescribeActionLogs(request *privatezone.DescribeActionLogsRequest) (*privatezone.DescribeActionLogsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &privatezone.DescribeActionLogsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 导出当前zone下所有解析记录，返回的数据是可以转换为csv文件格式的字符串
 */
func (c *PrivatezoneClient) ExportResourceRecords(request *privatezone.ExportResourceRecordsRequest) (*privatezone.ExportResourceRecordsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &privatezone.ExportResourceRecordsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量导入解析记录，批量导入每次不可超过100条记录
 */
func (c *PrivatezoneClient) ImportResourceRecords(request *privatezone.ImportResourceRecordsRequest) (*privatezone.ImportResourceRecordsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &privatezone.ImportResourceRecordsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 统计zone的解析量
 */
func (c *PrivatezoneClient) ZoneResolveCount(request *privatezone.ZoneResolveCountRequest) (*privatezone.ZoneResolveCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &privatezone.ZoneResolveCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询实例信息
 */
func (c *PrivatezoneClient) DescribeInstances(request *privatezone.DescribeInstancesRequest) (*privatezone.DescribeInstancesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &privatezone.DescribeInstancesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询解析记录
 */
func (c *PrivatezoneClient) DescribeResourceRecords(request *privatezone.DescribeResourceRecordsRequest) (*privatezone.DescribeResourceRecordsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &privatezone.DescribeResourceRecordsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询私有解析zone列表
 */
func (c *PrivatezoneClient) DescribeZones(request *privatezone.DescribeZonesRequest) (*privatezone.DescribeZonesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &privatezone.DescribeZonesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 绑定vpc
- vpc信息为空时，会将之前的绑定关系全部解除
- 该接口为覆盖类的接口，请将需要的vpc全部进行绑定
 */
func (c *PrivatezoneClient) BindVpc(request *privatezone.BindVpcRequest) (*privatezone.BindVpcResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &privatezone.BindVpcResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* - 添加一个私有解析的zone，可添加以下三种类型的zone
- 云内全局zone：zone的后缀是指定的后缀，如：local。该域名在云内自动全局生效，不用关联vpc即可在vpc内解析，该类型全局唯一，不能重复添加
- 反向解析zone：zone的后缀是in-addr.arpa时，我们认为他是一个反向解析的zone，反向解析域名前缀目前支持10/172.16-31/192.168网段，如：10.in-addr.arpa、16.172.in-addr.arpa。反向解析的zone只能添加反向解析的记录
- 私有解析zone：该类型的zone可以时任意符合格式的域名，私有解析zone需要关联vpc后，在vpc内生效解析
 */
func (c *PrivatezoneClient) CreateZone(request *privatezone.CreateZoneRequest) (*privatezone.CreateZoneResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &privatezone.CreateZoneResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除zone，该zone下的解析记录和绑定的vpc关联关系将会被删除
 */
func (c *PrivatezoneClient) DeleteZone(request *privatezone.DeleteZoneRequest) (*privatezone.DeleteZoneResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &privatezone.DeleteZoneResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建解析记录
 */
func (c *PrivatezoneClient) CreateResourceRecord(request *privatezone.CreateResourceRecordRequest) (*privatezone.CreateResourceRecordResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &privatezone.CreateResourceRecordResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 解析失败后，尝试递归解析开关
 */
func (c *PrivatezoneClient) RetryRecurse(request *privatezone.RetryRecurseRequest) (*privatezone.RetryRecurseResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &privatezone.RetryRecurseResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 设置解析记录状态，STOP操作会将停止该记录的解析，直到再次START。批量设置时多个resourceRecordId用","分隔。批量设置时每次最多不超过100个记录
 */
func (c *PrivatezoneClient) SetResourceRecordsStatus(request *privatezone.SetResourceRecordsStatusRequest) (*privatezone.SetResourceRecordsStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &privatezone.SetResourceRecordsStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改解析记录
 */
func (c *PrivatezoneClient) ModifyResourceRecord(request *privatezone.ModifyResourceRecordRequest) (*privatezone.ModifyResourceRecordResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &privatezone.ModifyResourceRecordResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除解析记录。批量删除时多个resourceRecordId用","分隔。批量删除每次最多不超过100个记录
 */
func (c *PrivatezoneClient) DeleteResourceRecords(request *privatezone.DeleteResourceRecordsRequest) (*privatezone.DeleteResourceRecordsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &privatezone.DeleteResourceRecordsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 统计zone的流量
 */
func (c *PrivatezoneClient) ZoneFlowCount(request *privatezone.ZoneFlowCountRequest) (*privatezone.ZoneFlowCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &privatezone.ZoneFlowCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

