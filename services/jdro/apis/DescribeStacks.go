// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    jdro "github.com/jdcloud-api/jdcloud-sdk-go/services/jdro/models"
)

type DescribeStacksRequest struct {

    core.JDCloudRequest

    /* 地域 ID  */
    RegionId string `json:"regionId"`

    /* 当前所在页，默认为1 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 页面大小，默认为20；取值范围[1, 100] (Optional) */
    PageSize *int `json:"pageSize"`

    /* 资源栈名称 (Optional) */
    StackName *string `json:"stackName"`

    /* 资源栈正在执行的动作 (Optional) */
    Action *string `json:"action"`

    /* 资源栈正在执行的动作的状态 (Optional) */
    Status *string `json:"status"`

    /* 创建开始时间 (Optional) */
    CreateStartTime *string `json:"createStartTime"`

    /* 创建结束时间 (Optional) */
    CreateEndTime *string `json:"createEndTime"`

    /* 更新开始时间 (Optional) */
    UpdateStartTime *string `json:"updateStartTime"`

    /* 更新结束时间 (Optional) */
    UpdateEndTime *string `json:"updateEndTime"`

    /* 排序字段, createtime, updatetime (Optional) */
    SortField *string `json:"sortField"`

    /* 排序方式，asc，desc (Optional) */
    SortBy *string `json:"sortBy"`
}

/*
 * param regionId: 地域 ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeStacksRequest(
    regionId string,
) *DescribeStacksRequest {

	return &DescribeStacksRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/stacks",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: 地域 ID (Required)
 * param pageNumber: 当前所在页，默认为1 (Optional)
 * param pageSize: 页面大小，默认为20；取值范围[1, 100] (Optional)
 * param stackName: 资源栈名称 (Optional)
 * param action: 资源栈正在执行的动作 (Optional)
 * param status: 资源栈正在执行的动作的状态 (Optional)
 * param createStartTime: 创建开始时间 (Optional)
 * param createEndTime: 创建结束时间 (Optional)
 * param updateStartTime: 更新开始时间 (Optional)
 * param updateEndTime: 更新结束时间 (Optional)
 * param sortField: 排序字段, createtime, updatetime (Optional)
 * param sortBy: 排序方式，asc，desc (Optional)
 */
func NewDescribeStacksRequestWithAllParams(
    regionId string,
    pageNumber *int,
    pageSize *int,
    stackName *string,
    action *string,
    status *string,
    createStartTime *string,
    createEndTime *string,
    updateStartTime *string,
    updateEndTime *string,
    sortField *string,
    sortBy *string,
) *DescribeStacksRequest {

    return &DescribeStacksRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/stacks",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        PageNumber: pageNumber,
        PageSize: pageSize,
        StackName: stackName,
        Action: action,
        Status: status,
        CreateStartTime: createStartTime,
        CreateEndTime: createEndTime,
        UpdateStartTime: updateStartTime,
        UpdateEndTime: updateEndTime,
        SortField: sortField,
        SortBy: sortBy,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeStacksRequestWithoutParam() *DescribeStacksRequest {

    return &DescribeStacksRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/stacks",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 ID(Required) */
func (r *DescribeStacksRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param pageNumber: 当前所在页，默认为1(Optional) */
func (r *DescribeStacksRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}

/* param pageSize: 页面大小，默认为20；取值范围[1, 100](Optional) */
func (r *DescribeStacksRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

/* param stackName: 资源栈名称(Optional) */
func (r *DescribeStacksRequest) SetStackName(stackName string) {
    r.StackName = &stackName
}

/* param action: 资源栈正在执行的动作(Optional) */
func (r *DescribeStacksRequest) SetAction(action string) {
    r.Action = &action
}

/* param status: 资源栈正在执行的动作的状态(Optional) */
func (r *DescribeStacksRequest) SetStatus(status string) {
    r.Status = &status
}

/* param createStartTime: 创建开始时间(Optional) */
func (r *DescribeStacksRequest) SetCreateStartTime(createStartTime string) {
    r.CreateStartTime = &createStartTime
}

/* param createEndTime: 创建结束时间(Optional) */
func (r *DescribeStacksRequest) SetCreateEndTime(createEndTime string) {
    r.CreateEndTime = &createEndTime
}

/* param updateStartTime: 更新开始时间(Optional) */
func (r *DescribeStacksRequest) SetUpdateStartTime(updateStartTime string) {
    r.UpdateStartTime = &updateStartTime
}

/* param updateEndTime: 更新结束时间(Optional) */
func (r *DescribeStacksRequest) SetUpdateEndTime(updateEndTime string) {
    r.UpdateEndTime = &updateEndTime
}

/* param sortField: 排序字段, createtime, updatetime(Optional) */
func (r *DescribeStacksRequest) SetSortField(sortField string) {
    r.SortField = &sortField
}

/* param sortBy: 排序方式，asc，desc(Optional) */
func (r *DescribeStacksRequest) SetSortBy(sortBy string) {
    r.SortBy = &sortBy
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeStacksRequest) GetRegionId() string {
    return r.RegionId
}

type DescribeStacksResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeStacksResult `json:"result"`
}

type DescribeStacksResult struct {
    List []jdro.StackOut `json:"list"`
    TotalCount int64 `json:"totalCount"`
}