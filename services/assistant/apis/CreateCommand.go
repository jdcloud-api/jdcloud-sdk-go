// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type CreateCommandRequest struct {

    core.JDCloudRequest

    /* 地域ID。  */
    RegionId string `json:"regionId"`

    /* 命令名称，长度为1\~128个字符，只允许中文、数字、大小写字母、英文下划线（\_）、连字符（-）及点（.）。
  */
    CommandName string `json:"commandName"`

    /* 命令类型，可选值：shell和powershell，默认shell
 (Optional) */
    CommandType *string `json:"commandType"`

    /* 以base64编码的命令内容，编码后长度小于36KB
  */
    CommandContent string `json:"commandContent"`

    /* 超时时间，取值范围：[10, 86400], 超过该时间后，尚未执行完的命令会置为失败。默认60s
 (Optional) */
    Timeout *int `json:"timeout"`

    /* 用户名，执行该命令时的用户身份。在linux上默认是root，windows上默认是administrator。长度小于256
 (Optional) */
    Username *string `json:"username"`

    /* 命令执行路径。在linux上默认是/root，windows上默认是C:\Windows\System32。长度小于256。
 (Optional) */
    Workdir *string `json:"workdir"`

    /* 命令描述，描述该命令详细信息，如功能、使用注意事项等。长度小于256。
 (Optional) */
    CommandDescription *string `json:"commandDescription"`

    /* 是否使用参数, 默认false，不使用参数 (Optional) */
    EnableParameter *bool `json:"enableParameter"`
}

/*
 * param regionId: 地域ID。 (Required)
 * param commandName: 命令名称，长度为1\~128个字符，只允许中文、数字、大小写字母、英文下划线（\_）、连字符（-）及点（.）。
 (Required)
 * param commandContent: 以base64编码的命令内容，编码后长度小于36KB
 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateCommandRequest(
    regionId string,
    commandName string,
    commandContent string,
) *CreateCommandRequest {

	return &CreateCommandRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/createCommand",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        CommandName: commandName,
        CommandContent: commandContent,
	}
}

/*
 * param regionId: 地域ID。 (Required)
 * param commandName: 命令名称，长度为1\~128个字符，只允许中文、数字、大小写字母、英文下划线（\_）、连字符（-）及点（.）。
 (Required)
 * param commandType: 命令类型，可选值：shell和powershell，默认shell
 (Optional)
 * param commandContent: 以base64编码的命令内容，编码后长度小于36KB
 (Required)
 * param timeout: 超时时间，取值范围：[10, 86400], 超过该时间后，尚未执行完的命令会置为失败。默认60s
 (Optional)
 * param username: 用户名，执行该命令时的用户身份。在linux上默认是root，windows上默认是administrator。长度小于256
 (Optional)
 * param workdir: 命令执行路径。在linux上默认是/root，windows上默认是C:\Windows\System32。长度小于256。
 (Optional)
 * param commandDescription: 命令描述，描述该命令详细信息，如功能、使用注意事项等。长度小于256。
 (Optional)
 * param enableParameter: 是否使用参数, 默认false，不使用参数 (Optional)
 */
func NewCreateCommandRequestWithAllParams(
    regionId string,
    commandName string,
    commandType *string,
    commandContent string,
    timeout *int,
    username *string,
    workdir *string,
    commandDescription *string,
    enableParameter *bool,
) *CreateCommandRequest {

    return &CreateCommandRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/createCommand",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        CommandName: commandName,
        CommandType: commandType,
        CommandContent: commandContent,
        Timeout: timeout,
        Username: username,
        Workdir: workdir,
        CommandDescription: commandDescription,
        EnableParameter: enableParameter,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateCommandRequestWithoutParam() *CreateCommandRequest {

    return &CreateCommandRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/createCommand",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID。(Required) */
func (r *CreateCommandRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param commandName: 命令名称，长度为1\~128个字符，只允许中文、数字、大小写字母、英文下划线（\_）、连字符（-）及点（.）。
(Required) */
func (r *CreateCommandRequest) SetCommandName(commandName string) {
    r.CommandName = commandName
}
/* param commandType: 命令类型，可选值：shell和powershell，默认shell
(Optional) */
func (r *CreateCommandRequest) SetCommandType(commandType string) {
    r.CommandType = &commandType
}
/* param commandContent: 以base64编码的命令内容，编码后长度小于36KB
(Required) */
func (r *CreateCommandRequest) SetCommandContent(commandContent string) {
    r.CommandContent = commandContent
}
/* param timeout: 超时时间，取值范围：[10, 86400], 超过该时间后，尚未执行完的命令会置为失败。默认60s
(Optional) */
func (r *CreateCommandRequest) SetTimeout(timeout int) {
    r.Timeout = &timeout
}
/* param username: 用户名，执行该命令时的用户身份。在linux上默认是root，windows上默认是administrator。长度小于256
(Optional) */
func (r *CreateCommandRequest) SetUsername(username string) {
    r.Username = &username
}
/* param workdir: 命令执行路径。在linux上默认是/root，windows上默认是C:\Windows\System32。长度小于256。
(Optional) */
func (r *CreateCommandRequest) SetWorkdir(workdir string) {
    r.Workdir = &workdir
}
/* param commandDescription: 命令描述，描述该命令详细信息，如功能、使用注意事项等。长度小于256。
(Optional) */
func (r *CreateCommandRequest) SetCommandDescription(commandDescription string) {
    r.CommandDescription = &commandDescription
}
/* param enableParameter: 是否使用参数, 默认false，不使用参数(Optional) */
func (r *CreateCommandRequest) SetEnableParameter(enableParameter bool) {
    r.EnableParameter = &enableParameter
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateCommandRequest) GetRegionId() string {
    return r.RegionId
}

type CreateCommandResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateCommandResult `json:"result"`
}

type CreateCommandResult struct {
    CommandId string `json:"commandId"`
}