// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type CreateSmsSignUsingPOSTRequest struct {

    core.JDCloudRequest

    /* 应用id  */
    AppId string `json:"appId"`

    /* 申请说明 (Optional) */
    ApplyExplanation *string `json:"applyExplanation"`

    /* 授权委托下载地址，若短信签名用途为他用，涉及第三方权益需上传，上传至 oss (Optional) */
    SignAttorneyUrl *string `json:"signAttorneyUrl"`

    /* 证明材料下载地址，上传至 oss  */
    SignCertificateUrl string `json:"signCertificateUrl"`

    /* 若签名内容侵犯到第三方权益必须获得第三方真实授权，长度为 2~12 个字符无须添加【】、()、[] 符号，签名发送会自带【】符号，避免重复  */
    SignContent string `json:"signContent"`

    /* 其他证明材料下载地址 上传至 oss (Optional) */
    SignOtherCertificateUrl *string `json:"signOtherCertificateUrl"`

    /* 签名用途，0自用 1他用  */
    SignPurpose int `json:"signPurpose"`

    /* 签名类型id，调用listSmsSignTypesUsingGET 接口获取  */
    SignTypeId int `json:"signTypeId"`
}

/*
 * param appId: 应用id (Required)
 * param signCertificateUrl: 证明材料下载地址，上传至 oss (Required)
 * param signContent: 若签名内容侵犯到第三方权益必须获得第三方真实授权，长度为 2~12 个字符无须添加【】、()、[] 符号，签名发送会自带【】符号，避免重复 (Required)
 * param signPurpose: 签名用途，0自用 1他用 (Required)
 * param signTypeId: 签名类型id，调用listSmsSignTypesUsingGET 接口获取 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateSmsSignUsingPOSTRequest(
    appId string,
    signCertificateUrl string,
    signContent string,
    signPurpose int,
    signTypeId int,
) *CreateSmsSignUsingPOSTRequest {

	return &CreateSmsSignUsingPOSTRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/smsSigns",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        AppId: appId,
        SignCertificateUrl: signCertificateUrl,
        SignContent: signContent,
        SignPurpose: signPurpose,
        SignTypeId: signTypeId,
	}
}

/*
 * param appId: 应用id (Required)
 * param applyExplanation: 申请说明 (Optional)
 * param signAttorneyUrl: 授权委托下载地址，若短信签名用途为他用，涉及第三方权益需上传，上传至 oss (Optional)
 * param signCertificateUrl: 证明材料下载地址，上传至 oss (Required)
 * param signContent: 若签名内容侵犯到第三方权益必须获得第三方真实授权，长度为 2~12 个字符无须添加【】、()、[] 符号，签名发送会自带【】符号，避免重复 (Required)
 * param signOtherCertificateUrl: 其他证明材料下载地址 上传至 oss (Optional)
 * param signPurpose: 签名用途，0自用 1他用 (Required)
 * param signTypeId: 签名类型id，调用listSmsSignTypesUsingGET 接口获取 (Required)
 */
func NewCreateSmsSignUsingPOSTRequestWithAllParams(
    appId string,
    applyExplanation *string,
    signAttorneyUrl *string,
    signCertificateUrl string,
    signContent string,
    signOtherCertificateUrl *string,
    signPurpose int,
    signTypeId int,
) *CreateSmsSignUsingPOSTRequest {

    return &CreateSmsSignUsingPOSTRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/smsSigns",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        AppId: appId,
        ApplyExplanation: applyExplanation,
        SignAttorneyUrl: signAttorneyUrl,
        SignCertificateUrl: signCertificateUrl,
        SignContent: signContent,
        SignOtherCertificateUrl: signOtherCertificateUrl,
        SignPurpose: signPurpose,
        SignTypeId: signTypeId,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateSmsSignUsingPOSTRequestWithoutParam() *CreateSmsSignUsingPOSTRequest {

    return &CreateSmsSignUsingPOSTRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/smsSigns",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param appId: 应用id(Required) */
func (r *CreateSmsSignUsingPOSTRequest) SetAppId(appId string) {
    r.AppId = appId
}

/* param applyExplanation: 申请说明(Optional) */
func (r *CreateSmsSignUsingPOSTRequest) SetApplyExplanation(applyExplanation string) {
    r.ApplyExplanation = &applyExplanation
}

/* param signAttorneyUrl: 授权委托下载地址，若短信签名用途为他用，涉及第三方权益需上传，上传至 oss(Optional) */
func (r *CreateSmsSignUsingPOSTRequest) SetSignAttorneyUrl(signAttorneyUrl string) {
    r.SignAttorneyUrl = &signAttorneyUrl
}

/* param signCertificateUrl: 证明材料下载地址，上传至 oss(Required) */
func (r *CreateSmsSignUsingPOSTRequest) SetSignCertificateUrl(signCertificateUrl string) {
    r.SignCertificateUrl = signCertificateUrl
}

/* param signContent: 若签名内容侵犯到第三方权益必须获得第三方真实授权，长度为 2~12 个字符无须添加【】、()、[] 符号，签名发送会自带【】符号，避免重复(Required) */
func (r *CreateSmsSignUsingPOSTRequest) SetSignContent(signContent string) {
    r.SignContent = signContent
}

/* param signOtherCertificateUrl: 其他证明材料下载地址 上传至 oss(Optional) */
func (r *CreateSmsSignUsingPOSTRequest) SetSignOtherCertificateUrl(signOtherCertificateUrl string) {
    r.SignOtherCertificateUrl = &signOtherCertificateUrl
}

/* param signPurpose: 签名用途，0自用 1他用(Required) */
func (r *CreateSmsSignUsingPOSTRequest) SetSignPurpose(signPurpose int) {
    r.SignPurpose = signPurpose
}

/* param signTypeId: 签名类型id，调用listSmsSignTypesUsingGET 接口获取(Required) */
func (r *CreateSmsSignUsingPOSTRequest) SetSignTypeId(signTypeId int) {
    r.SignTypeId = signTypeId
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateSmsSignUsingPOSTRequest) GetRegionId() string {
    return ""
}

type CreateSmsSignUsingPOSTResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateSmsSignUsingPOSTResult `json:"result"`
}

type CreateSmsSignUsingPOSTResult struct {
    SignId string `json:"signId"`
}