// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type AddCustomLiveStreamTranscodeTemplateRequest struct {

    core.JDCloudRequest

    /* 转码模板名称
- 长度范围：[1,50]
 (Optional) */
    TemplateName *string `json:"templateName"`

    /* 视频编码格式，取值：h264,h265，默认h264
- h264时,分辨率小于等于1080p
- h265时,分辨率小于等于4k
 (Optional) */
    VideoCodec *string `json:"videoCodec"`

    /* 转码输出的码率值
- 取值范围: [128,15000]
- 单位: kpbs
  */
    VideoCodeRate int `json:"videoCodeRate"`

    /* 转码输出的帧率值
- 取值：[1,30]
  */
    VideoFrameRate string `json:"videoFrameRate"`

    /* 转码输出视频宽度
- 取值: [128,4096]
- 如果(width,height)只设置其中之一,则按所设置参数项等比缩放另一项输出转码
- 如果(width,height)都不设置，则按源流大小输出转码
 (Optional) */
    Width *int `json:"width"`

    /* 转码输出视频高度
- 取值: [128,4096]
- 如果(width,height)只设置其中之一,则按所设置参数项等比缩放另一项输出转码
- 如果(width,height)都不设置，则按源流大小输出转码
 (Optional) */
    Height *int `json:"height"`

    /* 转码模板(转码流输出后缀)
- 取值要求：数字、大小写字母或短横线("-"),必须以数字或字母作为开头和结尾,长度不超过50字符
- <b>注意: 不能与系统的标准的转码模板和当前用户已自定义命名重复</b>
- 系统标准转码模板
  ld (h.264/640*360/15f)
  sd (h.264/960*540/25f)
  hd (h.264/1280*720/25f)
  shd (h.264/1920*1080/30f)
  ld-265 (h.265/640*360/15f)
  sd-265 (h.265/960*540/25f)
  hd-265 (h.265/1280*720/25f)
  shd-265 (h.265/1920*1080/30f)
  */
    Template string `json:"template"`

    /* 转码输出音频编码格式
- 取值: aac、mp3
- 不区分大小写
  */
    AudioCodec string `json:"audioCodec"`

    /* 转码输出音频格式
- 取值: aac_lc,aac_low,aac_he,aac_he_v2; 默认:aac_he
- 不区分大小写
 (Optional) */
    AudioFormat *string `json:"audioFormat"`

    /* 转码输出音频采样率
- 取值: [44100,48000]
  */
    AudioSampleRate int `json:"audioSampleRate"`

    /* 转码输出音频通道数
  1: 单声道
  2: 双声道
  */
    AudioChannel int `json:"audioChannel"`

    /* 转码输出音频码率
- 取值: [16,128]
- 单位: kbps
  */
    AudioCodeRate int `json:"audioCodeRate"`

    /* 京享超清开关
- 取值: jdchd-1.0,off
- 京享超清暂时只支持h.264
 (Optional) */
    Jdchd *string `json:"jdchd"`

    /* 舒适音频
- 取值: on,off
 (Optional) */
    AudioComfort *string `json:"audioComfort"`
}

/*
 * param videoCodeRate: 转码输出的码率值
- 取值范围: [128,15000]
- 单位: kpbs
 (Required)
 * param videoFrameRate: 转码输出的帧率值
- 取值：[1,30]
 (Required)
 * param template: 转码模板(转码流输出后缀)
- 取值要求：数字、大小写字母或短横线("-"),必须以数字或字母作为开头和结尾,长度不超过50字符
- <b>注意: 不能与系统的标准的转码模板和当前用户已自定义命名重复</b>
- 系统标准转码模板
  ld (h.264/640*360/15f)
  sd (h.264/960*540/25f)
  hd (h.264/1280*720/25f)
  shd (h.264/1920*1080/30f)
  ld-265 (h.265/640*360/15f)
  sd-265 (h.265/960*540/25f)
  hd-265 (h.265/1280*720/25f)
  shd-265 (h.265/1920*1080/30f)
 (Required)
 * param audioCodec: 转码输出音频编码格式
- 取值: aac、mp3
- 不区分大小写
 (Required)
 * param audioSampleRate: 转码输出音频采样率
- 取值: [44100,48000]
 (Required)
 * param audioChannel: 转码输出音频通道数
  1: 单声道
  2: 双声道
 (Required)
 * param audioCodeRate: 转码输出音频码率
- 取值: [16,128]
- 单位: kbps
 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewAddCustomLiveStreamTranscodeTemplateRequest(
    videoCodeRate int,
    videoFrameRate string,
    template string,
    audioCodec string,
    audioSampleRate int,
    audioChannel int,
    audioCodeRate int,
) *AddCustomLiveStreamTranscodeTemplateRequest {

	return &AddCustomLiveStreamTranscodeTemplateRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/transcodeCustoms:template",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        VideoCodeRate: videoCodeRate,
        VideoFrameRate: videoFrameRate,
        Template: template,
        AudioCodec: audioCodec,
        AudioSampleRate: audioSampleRate,
        AudioChannel: audioChannel,
        AudioCodeRate: audioCodeRate,
	}
}

/*
 * param templateName: 转码模板名称
- 长度范围：[1,50]
 (Optional)
 * param videoCodec: 视频编码格式，取值：h264,h265，默认h264
- h264时,分辨率小于等于1080p
- h265时,分辨率小于等于4k
 (Optional)
 * param videoCodeRate: 转码输出的码率值
- 取值范围: [128,15000]
- 单位: kpbs
 (Required)
 * param videoFrameRate: 转码输出的帧率值
- 取值：[1,30]
 (Required)
 * param width: 转码输出视频宽度
- 取值: [128,4096]
- 如果(width,height)只设置其中之一,则按所设置参数项等比缩放另一项输出转码
- 如果(width,height)都不设置，则按源流大小输出转码
 (Optional)
 * param height: 转码输出视频高度
- 取值: [128,4096]
- 如果(width,height)只设置其中之一,则按所设置参数项等比缩放另一项输出转码
- 如果(width,height)都不设置，则按源流大小输出转码
 (Optional)
 * param template: 转码模板(转码流输出后缀)
- 取值要求：数字、大小写字母或短横线("-"),必须以数字或字母作为开头和结尾,长度不超过50字符
- <b>注意: 不能与系统的标准的转码模板和当前用户已自定义命名重复</b>
- 系统标准转码模板
  ld (h.264/640*360/15f)
  sd (h.264/960*540/25f)
  hd (h.264/1280*720/25f)
  shd (h.264/1920*1080/30f)
  ld-265 (h.265/640*360/15f)
  sd-265 (h.265/960*540/25f)
  hd-265 (h.265/1280*720/25f)
  shd-265 (h.265/1920*1080/30f)
 (Required)
 * param audioCodec: 转码输出音频编码格式
- 取值: aac、mp3
- 不区分大小写
 (Required)
 * param audioFormat: 转码输出音频格式
- 取值: aac_lc,aac_low,aac_he,aac_he_v2; 默认:aac_he
- 不区分大小写
 (Optional)
 * param audioSampleRate: 转码输出音频采样率
- 取值: [44100,48000]
 (Required)
 * param audioChannel: 转码输出音频通道数
  1: 单声道
  2: 双声道
 (Required)
 * param audioCodeRate: 转码输出音频码率
- 取值: [16,128]
- 单位: kbps
 (Required)
 * param jdchd: 京享超清开关
- 取值: jdchd-1.0,off
- 京享超清暂时只支持h.264
 (Optional)
 * param audioComfort: 舒适音频
- 取值: on,off
 (Optional)
 */
func NewAddCustomLiveStreamTranscodeTemplateRequestWithAllParams(
    templateName *string,
    videoCodec *string,
    videoCodeRate int,
    videoFrameRate string,
    width *int,
    height *int,
    template string,
    audioCodec string,
    audioFormat *string,
    audioSampleRate int,
    audioChannel int,
    audioCodeRate int,
    jdchd *string,
    audioComfort *string,
) *AddCustomLiveStreamTranscodeTemplateRequest {

    return &AddCustomLiveStreamTranscodeTemplateRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/transcodeCustoms:template",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        TemplateName: templateName,
        VideoCodec: videoCodec,
        VideoCodeRate: videoCodeRate,
        VideoFrameRate: videoFrameRate,
        Width: width,
        Height: height,
        Template: template,
        AudioCodec: audioCodec,
        AudioFormat: audioFormat,
        AudioSampleRate: audioSampleRate,
        AudioChannel: audioChannel,
        AudioCodeRate: audioCodeRate,
        Jdchd: jdchd,
        AudioComfort: audioComfort,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewAddCustomLiveStreamTranscodeTemplateRequestWithoutParam() *AddCustomLiveStreamTranscodeTemplateRequest {

    return &AddCustomLiveStreamTranscodeTemplateRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/transcodeCustoms:template",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param templateName: 转码模板名称
- 长度范围：[1,50]
(Optional) */
func (r *AddCustomLiveStreamTranscodeTemplateRequest) SetTemplateName(templateName string) {
    r.TemplateName = &templateName
}

/* param videoCodec: 视频编码格式，取值：h264,h265，默认h264
- h264时,分辨率小于等于1080p
- h265时,分辨率小于等于4k
(Optional) */
func (r *AddCustomLiveStreamTranscodeTemplateRequest) SetVideoCodec(videoCodec string) {
    r.VideoCodec = &videoCodec
}

/* param videoCodeRate: 转码输出的码率值
- 取值范围: [128,15000]
- 单位: kpbs
(Required) */
func (r *AddCustomLiveStreamTranscodeTemplateRequest) SetVideoCodeRate(videoCodeRate int) {
    r.VideoCodeRate = videoCodeRate
}

/* param videoFrameRate: 转码输出的帧率值
- 取值：[1,30]
(Required) */
func (r *AddCustomLiveStreamTranscodeTemplateRequest) SetVideoFrameRate(videoFrameRate string) {
    r.VideoFrameRate = videoFrameRate
}

/* param width: 转码输出视频宽度
- 取值: [128,4096]
- 如果(width,height)只设置其中之一,则按所设置参数项等比缩放另一项输出转码
- 如果(width,height)都不设置，则按源流大小输出转码
(Optional) */
func (r *AddCustomLiveStreamTranscodeTemplateRequest) SetWidth(width int) {
    r.Width = &width
}

/* param height: 转码输出视频高度
- 取值: [128,4096]
- 如果(width,height)只设置其中之一,则按所设置参数项等比缩放另一项输出转码
- 如果(width,height)都不设置，则按源流大小输出转码
(Optional) */
func (r *AddCustomLiveStreamTranscodeTemplateRequest) SetHeight(height int) {
    r.Height = &height
}

/* param template: 转码模板(转码流输出后缀)
- 取值要求：数字、大小写字母或短横线("-"),必须以数字或字母作为开头和结尾,长度不超过50字符
- <b>注意: 不能与系统的标准的转码模板和当前用户已自定义命名重复</b>
- 系统标准转码模板
  ld (h.264/640*360/15f)
  sd (h.264/960*540/25f)
  hd (h.264/1280*720/25f)
  shd (h.264/1920*1080/30f)
  ld-265 (h.265/640*360/15f)
  sd-265 (h.265/960*540/25f)
  hd-265 (h.265/1280*720/25f)
  shd-265 (h.265/1920*1080/30f)
(Required) */
func (r *AddCustomLiveStreamTranscodeTemplateRequest) SetTemplate(template string) {
    r.Template = template
}

/* param audioCodec: 转码输出音频编码格式
- 取值: aac、mp3
- 不区分大小写
(Required) */
func (r *AddCustomLiveStreamTranscodeTemplateRequest) SetAudioCodec(audioCodec string) {
    r.AudioCodec = audioCodec
}

/* param audioFormat: 转码输出音频格式
- 取值: aac_lc,aac_low,aac_he,aac_he_v2; 默认:aac_he
- 不区分大小写
(Optional) */
func (r *AddCustomLiveStreamTranscodeTemplateRequest) SetAudioFormat(audioFormat string) {
    r.AudioFormat = &audioFormat
}

/* param audioSampleRate: 转码输出音频采样率
- 取值: [44100,48000]
(Required) */
func (r *AddCustomLiveStreamTranscodeTemplateRequest) SetAudioSampleRate(audioSampleRate int) {
    r.AudioSampleRate = audioSampleRate
}

/* param audioChannel: 转码输出音频通道数
  1: 单声道
  2: 双声道
(Required) */
func (r *AddCustomLiveStreamTranscodeTemplateRequest) SetAudioChannel(audioChannel int) {
    r.AudioChannel = audioChannel
}

/* param audioCodeRate: 转码输出音频码率
- 取值: [16,128]
- 单位: kbps
(Required) */
func (r *AddCustomLiveStreamTranscodeTemplateRequest) SetAudioCodeRate(audioCodeRate int) {
    r.AudioCodeRate = audioCodeRate
}

/* param jdchd: 京享超清开关
- 取值: jdchd-1.0,off
- 京享超清暂时只支持h.264
(Optional) */
func (r *AddCustomLiveStreamTranscodeTemplateRequest) SetJdchd(jdchd string) {
    r.Jdchd = &jdchd
}

/* param audioComfort: 舒适音频
- 取值: on,off
(Optional) */
func (r *AddCustomLiveStreamTranscodeTemplateRequest) SetAudioComfort(audioComfort string) {
    r.AudioComfort = &audioComfort
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r AddCustomLiveStreamTranscodeTemplateRequest) GetRegionId() string {
    return ""
}

type AddCustomLiveStreamTranscodeTemplateResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result AddCustomLiveStreamTranscodeTemplateResult `json:"result"`
}

type AddCustomLiveStreamTranscodeTemplateResult struct {
}