// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    live "github.com/jdcloud-api/jdcloud-sdk-go/services/live/apis"
    "encoding/json"
    "errors"
)

type LiveClient struct {
    core.JDCloudClient
}

func NewLiveClient(credential *core.Credential) *LiveClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("live.jdcloud-api.com")

    return &LiveClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "live",
            Revision:    "1.0.3",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *LiveClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *LiveClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 查询直播截图配置
- 截图模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效
- 域名、应用、流 依次粒度递减 即: 域名>应用>流
- 该查询旨在查询域名、应用、流最终生效的截图模板配置,并非各级的模板绑定情况
 */
func (c *LiveClient) DescribeCustomLiveStreamSnapshotConfig(request *live.DescribeCustomLiveStreamSnapshotConfigRequest) (*live.DescribeCustomLiveStreamSnapshotConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeCustomLiveStreamSnapshotConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询用户自定义转码模板详情
- 查询用户自定义转码模板详情
- 系统标准转码模板
    ld (h.264/640*360/15f)
    sd (h.264/854*480/24f)
    hd (h.264/1280*720/25f)
    shd (h.264/1920*1080/30f)
 */
func (c *LiveClient) DescribeCustomLiveStreamTranscodeTemplate(request *live.DescribeCustomLiveStreamTranscodeTemplateRequest) (*live.DescribeCustomLiveStreamTranscodeTemplateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeCustomLiveStreamTranscodeTemplateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加应用截图配置
- 添加应用级别的截图模板配置
 */
func (c *LiveClient) AddLiveStreamAppSnapshot(request *live.AddLiveStreamAppSnapshotRequest) (*live.AddLiveStreamAppSnapshotResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.AddLiveStreamAppSnapshotResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 关闭时移 */
func (c *LiveClient) CloseLiveTimeshift(request *live.CloseLiveTimeshiftRequest) (*live.CloseLiveTimeshiftResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.CloseLiveTimeshiftResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除直播流状态回调地址 */
func (c *LiveClient) DeleteLiveStreamNotifyConfig(request *live.DeleteLiveStreamNotifyConfigRequest) (*live.DeleteLiveStreamNotifyConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DeleteLiveStreamNotifyConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加打点录制任务
- 您可以调用此接口精确提取已录制的文件中所需要的部分
 */
func (c *LiveClient) AddLiveRecordTask(request *live.AddLiveRecordTaskRequest) (*live.AddLiveRecordTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.AddLiveRecordTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加域名水印配置
 */
func (c *LiveClient) AddLiveStreamDomainWatermark(request *live.AddLiveStreamDomainWatermarkRequest) (*live.AddLiveStreamDomainWatermarkResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.AddLiveStreamDomainWatermarkResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除域名截图配置
- 删除域名级别的截图模板配置,重新推流后生效
 */
func (c *LiveClient) DeleteLiveStreamDomainSnapshot(request *live.DeleteLiveStreamDomainSnapshotRequest) (*live.DeleteLiveStreamDomainSnapshotResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DeleteLiveStreamDomainSnapshotResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询用户自定义直播录制模板列表
 */
func (c *LiveClient) DescribeCustomLiveStreamRecordTemplates(request *live.DescribeCustomLiveStreamRecordTemplatesRequest) (*live.DescribeCustomLiveStreamRecordTemplatesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeCustomLiveStreamRecordTemplatesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询直播直播录制配置
- 录制模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效
- 域名、应用、流 依次粒度递减 即: 域名>应用>流
- 该查询旨在查询域名、应用、流最终生效的录制模板配置,并非各级的模板绑定情况
 */
func (c *LiveClient) DescribeCustomLiveStreamRecordConfig(request *live.DescribeCustomLiveStreamRecordConfigRequest) (*live.DescribeCustomLiveStreamRecordConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeCustomLiveStreamRecordConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 禁止直播流推送 */
func (c *LiveClient) ForbidLiveStream(request *live.ForbidLiveStreamRequest) (*live.ForbidLiveStreamResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.ForbidLiveStreamResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询域名列表 */
func (c *LiveClient) DescribeLiveDomains(request *live.DescribeLiveDomainsRequest) (*live.DescribeLiveDomainsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeLiveDomainsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询指定域名相关信息 */
func (c *LiveClient) DescribeLiveDomainDetail(request *live.DescribeLiveDomainDetailRequest) (*live.DescribeLiveDomainDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeLiveDomainDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加直播应用名
- 需要提前在应用(app)级别绑定功能模板时才需要提前新建应用名
- 新的应用名可以推流时自动创建
 */
func (c *LiveClient) AddLiveApp(request *live.AddLiveAppRequest) (*live.AddLiveAppResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.AddLiveAppResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除用户自定义直播截图模板
- 删除截图模板前,请先删除此模板相关的截图配置,否则将会影响线上业务
 */
func (c *LiveClient) DeleteCustomLiveStreamSnapshotTemplate(request *live.DeleteCustomLiveStreamSnapshotTemplateRequest) (*live.DeleteCustomLiveStreamSnapshotTemplateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DeleteCustomLiveStreamSnapshotTemplateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除应用级别水印模板配置
- 删除应用级别的水印模板配置,重新推流后生效
 */
func (c *LiveClient) DeleteLiveStreamAppWatermark(request *live.DeleteLiveStreamAppWatermarkRequest) (*live.DeleteLiveStreamAppWatermarkResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DeleteLiveStreamAppWatermarkResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加用户自定义水印模板
 */
func (c *LiveClient) AddCustomLiveStreamWatermarkTemplate(request *live.AddCustomLiveStreamWatermarkTemplateRequest) (*live.AddCustomLiveStreamWatermarkTemplateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.AddCustomLiveStreamWatermarkTemplateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除用户自定义水印模板
- 删除用户自定义水印模板之前必须先删除此模板在各域名、应用、流级别的水印设置
 */
func (c *LiveClient) DeleteCustomLiveStreamWatermarkTemplate(request *live.DeleteCustomLiveStreamWatermarkTemplateRequest) (*live.DeleteCustomLiveStreamWatermarkTemplateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DeleteCustomLiveStreamWatermarkTemplateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除域名级别水印模板配置
- 删除域名级别水印模板配置,重新推流后生效
 */
func (c *LiveClient) DeleteLiveStreamDomainWatermark(request *live.DeleteLiveStreamDomainWatermarkRequest) (*live.DeleteLiveStreamDomainWatermarkResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DeleteLiveStreamDomainWatermarkResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除应用级别录制模板配置
- 删除应用级别的录制模板配置,重新推流后生效
 */
func (c *LiveClient) DeleteLiveStreamAppRecord(request *live.DeleteLiveStreamAppRecordRequest) (*live.DeleteLiveStreamAppRecordResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DeleteLiveStreamAppRecordResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除用户自定义录制模板
- 删除用户自定义录制模板之前必须先删除此模板在各域名、应用、流级别的录制设置
 */
func (c *LiveClient) DeleteCustomLiveStreamRecordTemplate(request *live.DeleteCustomLiveStreamRecordTemplateRequest) (*live.DeleteCustomLiveStreamRecordTemplateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DeleteCustomLiveStreamRecordTemplateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询直播截图张数数据 */
func (c *LiveClient) DescribeLiveSnapshotData(request *live.DescribeLiveSnapshotDataRequest) (*live.DescribeLiveSnapshotDataResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeLiveSnapshotDataResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除域名级别转码模板配置
- 删除域名级别转码模板配置,重新推流后生效
 */
func (c *LiveClient) DeleteLiveStreamDomainTranscode(request *live.DeleteLiveStreamDomainTranscodeRequest) (*live.DeleteLiveStreamDomainTranscodeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DeleteLiveStreamDomainTranscodeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 启用应用
- 启用 停用 状态的应用
 */
func (c *LiveClient) StartLiveApp(request *live.StartLiveAppRequest) (*live.StartLiveAppResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.StartLiveAppResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 设置直播录制回调通知
 */
func (c *LiveClient) SetLiveStreamRecordNotifyConfig(request *live.SetLiveStreamRecordNotifyConfigRequest) (*live.SetLiveStreamRecordNotifyConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.SetLiveStreamRecordNotifyConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除域名级别录制模板配置
- 删除域名级别录制模板配置,重新推流后生效
 */
func (c *LiveClient) DeleteLiveStreamDomainRecord(request *live.DeleteLiveStreamDomainRecordRequest) (*live.DeleteLiveStreamDomainRecordResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DeleteLiveStreamDomainRecordResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加直播截图模板 */
func (c *LiveClient) AddCustomLiveStreamSnapshotTemplate(request *live.AddCustomLiveStreamSnapshotTemplateRequest) (*live.AddCustomLiveStreamSnapshotTemplateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.AddCustomLiveStreamSnapshotTemplateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 启动域名
- 启用状态为 停用 的直播域名对(推流域名,播放域名)将DomainStatus变更为online
 */
func (c *LiveClient) StartLiveDomain(request *live.StartLiveDomainRequest) (*live.StartLiveDomainResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.StartLiveDomainResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询用户定义水印模板列表
 */
func (c *LiveClient) DescribeCustomLiveStreamWatermarkTemplates(request *live.DescribeCustomLiveStreamWatermarkTemplatesRequest) (*live.DescribeCustomLiveStreamWatermarkTemplatesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeCustomLiveStreamWatermarkTemplatesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加应用转码配置
- 添加应用级别的转码模板配置
 */
func (c *LiveClient) AddLiveStreamAppTranscode(request *live.AddLiveStreamAppTranscodeRequest) (*live.AddLiveStreamAppTranscodeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.AddLiveStreamAppTranscodeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除截图回调配置
 */
func (c *LiveClient) DeleteLiveStreamSnapshotNotifyConfig(request *live.DeleteLiveStreamSnapshotNotifyConfigRequest) (*live.DeleteLiveStreamSnapshotNotifyConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DeleteLiveStreamSnapshotNotifyConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查看推流历史记录 */
func (c *LiveClient) DescribeLiveStreamPublishList(request *live.DescribeLiveStreamPublishListRequest) (*live.DescribeLiveStreamPublishListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeLiveStreamPublishListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询时移配置 */
func (c *LiveClient) DescribeLiveTimeshiftConfigs(request *live.DescribeLiveTimeshiftConfigsRequest) (*live.DescribeLiveTimeshiftConfigsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeLiveTimeshiftConfigsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加应用级别水印配置
 */
func (c *LiveClient) AddLiveStreamAppWatermark(request *live.AddLiveStreamAppWatermarkRequest) (*live.AddLiveStreamAppWatermarkResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.AddLiveStreamAppWatermarkResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加应用级别直播录制配置
- 添加应用级别的直播录制模板配置
 */
func (c *LiveClient) AddLiveStreamAppRecord(request *live.AddLiveStreamAppRecordRequest) (*live.AddLiveStreamAppRecordResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.AddLiveStreamAppRecordResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加域名级别直播录制配置
- 添加域名级别的直播录制模板配置
 */
func (c *LiveClient) AddLiveStreamDomainRecord(request *live.AddLiveStreamDomainRecordRequest) (*live.AddLiveStreamDomainRecordResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.AddLiveStreamDomainRecordResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除APP截图配置 */
func (c *LiveClient) DeleteLiveStreamAppSnapshot(request *live.DeleteLiveStreamAppSnapshotRequest) (*live.DeleteLiveStreamAppSnapshotResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DeleteLiveStreamAppSnapshotResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询截图回调配置
 */
func (c *LiveClient) DescribeLiveStreamSnapshotNotifyConfig(request *live.DescribeLiveStreamSnapshotNotifyConfigRequest) (*live.DescribeLiveStreamSnapshotNotifyConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeLiveStreamSnapshotNotifyConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除录制回调配置
 */
func (c *LiveClient) DeleteLiveStreamRecordNotifyConfig(request *live.DeleteLiveStreamRecordNotifyConfigRequest) (*live.DeleteLiveStreamRecordNotifyConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DeleteLiveStreamRecordNotifyConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询转码模板配置
- 转码模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效原则
- 域名、应用、流 依次粒度递减 即: 域名>应用>流
- 该查询旨在查询域名、应用、流最终生效的转码模板配置,并非各级的模板绑定情况
 */
func (c *LiveClient) DescribeLiveStreamTranscodeConfig(request *live.DescribeLiveStreamTranscodeConfigRequest) (*live.DescribeLiveStreamTranscodeConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeLiveStreamTranscodeConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除应用
- 删除应用之前需要先停用应用
- 删除应用同时会删除此应用下的所有数据
 */
func (c *LiveClient) DeleteLiveApp(request *live.DeleteLiveAppRequest) (*live.DeleteLiveAppResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DeleteLiveAppResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 设置播放鉴权KEY */
func (c *LiveClient) SetLivePlayAuthKey(request *live.SetLivePlayAuthKeyRequest) (*live.SetLivePlayAuthKeyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.SetLivePlayAuthKeyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询直播水印配置
- 水印模板配置按照 域名,应用,流 3级配置添加,以最小的粒度配置生效
- 域名、应用、流 依次粒度递减 即: 域名>应用>流
- 该查询旨在查询域名、应用、流最终生效的水印模板配置,并非各级的模板绑定情况
 */
func (c *LiveClient) DescribeCustomLiveStreamWatermarkConfig(request *live.DescribeCustomLiveStreamWatermarkConfigRequest) (*live.DescribeCustomLiveStreamWatermarkConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeCustomLiveStreamWatermarkConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加用户自定义直播录制模板
 */
func (c *LiveClient) AddCustomLiveStreamRecordTemplate(request *live.AddCustomLiveStreamRecordTemplateRequest) (*live.AddCustomLiveStreamRecordTemplateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.AddCustomLiveStreamRecordTemplateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询域名下的APP列表 */
func (c *LiveClient) DescribeLiveApp(request *live.DescribeLiveAppRequest) (*live.DescribeLiveAppResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeLiveAppResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询播放鉴权KEY */
func (c *LiveClient) DescribeLivePlayAuthKey(request *live.DescribeLivePlayAuthKeyRequest) (*live.DescribeLivePlayAuthKeyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeLivePlayAuthKeyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除用户自定义转码模板
- 删除用户自定义转码模板之前必须先删除此模板在各域名、应用、流级别的转码设置
 */
func (c *LiveClient) DeleteCustomLiveStreamTranscodeTemplate(request *live.DeleteCustomLiveStreamTranscodeTemplateRequest) (*live.DeleteCustomLiveStreamTranscodeTemplateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DeleteCustomLiveStreamTranscodeTemplateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加直播域名
- 创建直播域名之前,必须先开通直播服务
- 直播域名必须已经备案完成
 */
func (c *LiveClient) AddLiveDomain(request *live.AddLiveDomainRequest) (*live.AddLiveDomainResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.AddLiveDomainResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询用户自定义转码模板列表
 */
func (c *LiveClient) DescribeCustomLiveStreamTranscodeTemplates(request *live.DescribeCustomLiveStreamTranscodeTemplatesRequest) (*live.DescribeCustomLiveStreamTranscodeTemplatesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeCustomLiveStreamTranscodeTemplatesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询直播鉴黄张数数据 */
func (c *LiveClient) DescribeLivePornData(request *live.DescribeLivePornDataRequest) (*live.DescribeLivePornDataResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeLivePornDataResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 停用域名
- 停用直播域名对(推流域名,播放域名),将DomainStatus变更为offline
- 停用该直播域名对后,直播域名信息仍保留,但用户将不能再用该推流域名推流或播放域名播放
 */
func (c *LiveClient) StopLiveDomain(request *live.StopLiveDomainRequest) (*live.StopLiveDomainResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.StopLiveDomainResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询直播中的流的信息 */
func (c *LiveClient) DescribeLiveStreamOnlineList(request *live.DescribeLiveStreamOnlineListRequest) (*live.DescribeLiveStreamOnlineListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeLiveStreamOnlineListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询录制回调配置
 */
func (c *LiveClient) DescribeLiveStreamRecordNotifyConfig(request *live.DescribeLiveStreamRecordNotifyConfigRequest) (*live.DescribeLiveStreamRecordNotifyConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeLiveStreamRecordNotifyConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询直播流状态回调地址 */
func (c *LiveClient) DescribeLiveStreamNotifyConfig(request *live.DescribeLiveStreamNotifyConfigRequest) (*live.DescribeLiveStreamNotifyConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeLiveStreamNotifyConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加域名截图配置
- 添加域名级别的截图模板配置
 */
func (c *LiveClient) AddLiveStreamDomainSnapshot(request *live.AddLiveStreamDomainSnapshotRequest) (*live.AddLiveStreamDomainSnapshotResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.AddLiveStreamDomainSnapshotResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 设置直播流状态回调地址 */
func (c *LiveClient) SetLiveStreamNotifyConfig(request *live.SetLiveStreamNotifyConfigRequest) (*live.SetLiveStreamNotifyConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.SetLiveStreamNotifyConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 设置直播截图回调通知地址
 */
func (c *LiveClient) SetLiveStreamSnapshotNotifyConfig(request *live.SetLiveStreamSnapshotNotifyConfigRequest) (*live.SetLiveStreamSnapshotNotifyConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.SetLiveStreamSnapshotNotifyConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询直播截图模板列表 */
func (c *LiveClient) DescribeCustomLiveStreamSnapshotTemplates(request *live.DescribeCustomLiveStreamSnapshotTemplatesRequest) (*live.DescribeCustomLiveStreamSnapshotTemplatesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DescribeCustomLiveStreamSnapshotTemplatesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 停用 运行中 状态的应用
- 停用应用之后,不能再用此应用名推流
 */
func (c *LiveClient) StopLiveApp(request *live.StopLiveAppRequest) (*live.StopLiveAppResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.StopLiveAppResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除直播域名
- 请慎重操作（建议在进行域名删除前到域名解析服务商处恢复域名A记录），以免导致删除操作后此域名不可访问。
  deleteLiveDomain调用成功后将删除本条直播域名的全部相关记录，对于仅需要暂停使用该直播域名，推荐stopLiveDomain接口
 */
func (c *LiveClient) DeleteLiveDomain(request *live.DeleteLiveDomainRequest) (*live.DeleteLiveDomainResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DeleteLiveDomainResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加自定义转码模板
- 系统为您预设了标准转码模板,如果不能满足您的转码需求,可以通过此接口添加自定义转码模板
- 系统标准转码模板
    ld (h.264/640*360/15f)
    sd (h.264/854*480/24f)
    hd (h.264/1280*720/25f)
    shd (h.264/1920*1080/30f)
 */
func (c *LiveClient) AddCustomLiveStreamTranscodeTemplate(request *live.AddCustomLiveStreamTranscodeTemplateRequest) (*live.AddCustomLiveStreamTranscodeTemplateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.AddCustomLiveStreamTranscodeTemplateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 恢复直播流推送 */
func (c *LiveClient) ResumeLiveStream(request *live.ResumeLiveStreamRequest) (*live.ResumeLiveStreamResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.ResumeLiveStreamResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加域名级别转码配置
- 添加域名级别的转码模板配置
 */
func (c *LiveClient) AddLiveStreamDomainTranscode(request *live.AddLiveStreamDomainTranscodeRequest) (*live.AddLiveStreamDomainTranscodeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.AddLiveStreamDomainTranscodeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除应用级别转码模板配置
- 删除应用级别的转码模板配置,重新推流后生效
 */
func (c *LiveClient) DeleteLiveStreamAppTranscode(request *live.DeleteLiveStreamAppTranscodeRequest) (*live.DeleteLiveStreamAppTranscodeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.DeleteLiveStreamAppTranscodeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 开启时移
直播支持最大4小时的HLS时移，使用方式为在播放域名后增加时移参数来实现，参数类型支持指定开始时间和时间偏移量2种方式进行时移。 开启直播时移后，重新推流生效，使用播放域名带相应参数访问即可播放
- 域名格式：
1、http://{playDomain}/{appName}/{streamName}/index.m3u8?timeshift=400（秒，指从当前时间往前时移的偏移量）
2、http://{playDomain}/{appName}/{streamName}/index.m3u8?starttime=1529223702 (unix时间戳)
 */
func (c *LiveClient) OpenLiveTimeshift(request *live.OpenLiveTimeshiftRequest) (*live.OpenLiveTimeshiftResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &live.OpenLiveTimeshiftResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

