// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    shenhaiplatform "github.com/jdcloud-api/jdcloud-sdk-go/services/shenhaiplatform/models"
)

type UranusResourceCreateRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 应用名称  */
    AppName string `json:"appName"`

    /* 资源名称（支持中文、字母、数字、下划线，不超过50个字符） (Optional) */
    ResourceName *string `json:"resourceName"`

    /* 原始资源名称（上传的原始文件在本地客户端的文件名称） (Optional) */
    OriginalName *string `json:"originalName"`

    /* 父资源code（目录的根目录的父资源code为ROOT） (Optional) */
    ParentCode *string `json:"parentCode"`

    /* 资源类型（DIRECTORY：目录；JAR：java的jar文件；FILE：其他普通文件；ARCHIVE：其他压缩文件/归档文件） (Optional) */
    ResourceType *string `json:"resourceType"`

    /* 关联引擎（默认为JCW） (Optional) */
    RelativeEngine *string `json:"relativeEngine"`

    /* 文件上传方式（默认为本地上传） (Optional) */
    UploadMode *string `json:"uploadMode"`

    /* 环境信息（prod：生产环境；dev：开发环境），简单模式默认为prod (Optional) */
    Env *string `json:"env"`

    /* 负责人 (Optional) */
    Managers []string `json:"managers"`
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUranusResourceCreateRequest(
    regionId string,
    appName string,
) *UranusResourceCreateRequest {

	return &UranusResourceCreateRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/apps/{appName}/uranusResourceCreate",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        RegionId: regionId,
        AppName: appName,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 * param resourceName: 资源名称（支持中文、字母、数字、下划线，不超过50个字符） (Optional)
 * param originalName: 原始资源名称（上传的原始文件在本地客户端的文件名称） (Optional)
 * param parentCode: 父资源code（目录的根目录的父资源code为ROOT） (Optional)
 * param resourceType: 资源类型（DIRECTORY：目录；JAR：java的jar文件；FILE：其他普通文件；ARCHIVE：其他压缩文件/归档文件） (Optional)
 * param relativeEngine: 关联引擎（默认为JCW） (Optional)
 * param uploadMode: 文件上传方式（默认为本地上传） (Optional)
 * param env: 环境信息（prod：生产环境；dev：开发环境），简单模式默认为prod (Optional)
 * param managers: 负责人 (Optional)
 */
func NewUranusResourceCreateRequestWithAllParams(
    regionId string,
    appName string,
    resourceName *string,
    originalName *string,
    parentCode *string,
    resourceType *string,
    relativeEngine *string,
    uploadMode *string,
    env *string,
    managers []string,
) *UranusResourceCreateRequest {

    return &UranusResourceCreateRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusResourceCreate",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        RegionId: regionId,
        AppName: appName,
        ResourceName: resourceName,
        OriginalName: originalName,
        ParentCode: parentCode,
        ResourceType: resourceType,
        RelativeEngine: relativeEngine,
        UploadMode: uploadMode,
        Env: env,
        Managers: managers,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUranusResourceCreateRequestWithoutParam() *UranusResourceCreateRequest {

    return &UranusResourceCreateRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusResourceCreate",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *UranusResourceCreateRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param appName: 应用名称(Required) */
func (r *UranusResourceCreateRequest) SetAppName(appName string) {
    r.AppName = appName
}
/* param resourceName: 资源名称（支持中文、字母、数字、下划线，不超过50个字符）(Optional) */
func (r *UranusResourceCreateRequest) SetResourceName(resourceName string) {
    r.ResourceName = &resourceName
}
/* param originalName: 原始资源名称（上传的原始文件在本地客户端的文件名称）(Optional) */
func (r *UranusResourceCreateRequest) SetOriginalName(originalName string) {
    r.OriginalName = &originalName
}
/* param parentCode: 父资源code（目录的根目录的父资源code为ROOT）(Optional) */
func (r *UranusResourceCreateRequest) SetParentCode(parentCode string) {
    r.ParentCode = &parentCode
}
/* param resourceType: 资源类型（DIRECTORY：目录；JAR：java的jar文件；FILE：其他普通文件；ARCHIVE：其他压缩文件/归档文件）(Optional) */
func (r *UranusResourceCreateRequest) SetResourceType(resourceType string) {
    r.ResourceType = &resourceType
}
/* param relativeEngine: 关联引擎（默认为JCW）(Optional) */
func (r *UranusResourceCreateRequest) SetRelativeEngine(relativeEngine string) {
    r.RelativeEngine = &relativeEngine
}
/* param uploadMode: 文件上传方式（默认为本地上传）(Optional) */
func (r *UranusResourceCreateRequest) SetUploadMode(uploadMode string) {
    r.UploadMode = &uploadMode
}
/* param env: 环境信息（prod：生产环境；dev：开发环境），简单模式默认为prod(Optional) */
func (r *UranusResourceCreateRequest) SetEnv(env string) {
    r.Env = &env
}
/* param managers: 负责人(Optional) */
func (r *UranusResourceCreateRequest) SetManagers(managers []string) {
    r.Managers = managers
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UranusResourceCreateRequest) GetRegionId() string {
    return r.RegionId
}

type UranusResourceCreateResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UranusResourceCreateResult `json:"result"`
}

type UranusResourceCreateResult struct {
    Code string `json:"code"`
    ErrorTitle string `json:"errorTitle"`
    ErrorMsg string `json:"errorMsg"`
    Result shenhaiplatform.UranusResourceVo `json:"result"`
    SubCode string `json:"subCode"`
    Successed bool `json:"successed"`
}