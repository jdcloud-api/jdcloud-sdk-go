// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    shenhaiplatform "github.com/jdcloud-api/jdcloud-sdk-go/services/shenhaiplatform/models"
)

type UranusTableDataLoadRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 应用名称  */
    AppName string `json:"appName"`

    /* 文件路径（key）  */
    FileKey string `json:"fileKey"`

    /* 文件类型：csv、text、xls、xlsx  */
    FileType string `json:"fileType"`

    /* 分隔符: en-comma 英文逗号，en-semicolon 英文分号，space 空格，pipe 竖线，hash 井号，and 与号，line-feed-lf 换行符（UNIX），line-feed-crlf 换行符（Windows） (Optional) */
    Delimiter *string `json:"delimiter"`

    /* 字符集: GBK、UTF-8、ISO-8859-1 (Optional) */
    CharacterSet *string `json:"characterSet"`

    /* 导入起始行 (Optional) */
    StartRow *int `json:"startRow"`

    /* 项目环境: prod 生产环境、dev开发环境  */
    ProjectEnv string `json:"projectEnv"`

    /* 项目编码  */
    ProjectCode string `json:"projectCode"`

    /* 目标表名  */
    TableName string `json:"tableName"`

    /* 导入分区，如果是分区表则必传 (Optional) */
    PartitionInfos []shenhaiplatform.PartitionInfo `json:"partitionInfos"`

    /* 导入策略：append 追加、overwrite 覆盖  */
    ImportStrategy string `json:"importStrategy"`

    /* 资源组编码  */
    ResourceCode string `json:"resourceCode"`
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 * param fileKey: 文件路径（key） (Required)
 * param fileType: 文件类型：csv、text、xls、xlsx (Required)
 * param projectEnv: 项目环境: prod 生产环境、dev开发环境 (Required)
 * param projectCode: 项目编码 (Required)
 * param tableName: 目标表名 (Required)
 * param importStrategy: 导入策略：append 追加、overwrite 覆盖 (Required)
 * param resourceCode: 资源组编码 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUranusTableDataLoadRequest(
    regionId string,
    appName string,
    fileKey string,
    fileType string,
    projectEnv string,
    projectCode string,
    tableName string,
    importStrategy string,
    resourceCode string,
) *UranusTableDataLoadRequest {

	return &UranusTableDataLoadRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/apps/{appName}/uranusTableDataLoad",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        RegionId: regionId,
        AppName: appName,
        FileKey: fileKey,
        FileType: fileType,
        ProjectEnv: projectEnv,
        ProjectCode: projectCode,
        TableName: tableName,
        ImportStrategy: importStrategy,
        ResourceCode: resourceCode,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 * param fileKey: 文件路径（key） (Required)
 * param fileType: 文件类型：csv、text、xls、xlsx (Required)
 * param delimiter: 分隔符: en-comma 英文逗号，en-semicolon 英文分号，space 空格，pipe 竖线，hash 井号，and 与号，line-feed-lf 换行符（UNIX），line-feed-crlf 换行符（Windows） (Optional)
 * param characterSet: 字符集: GBK、UTF-8、ISO-8859-1 (Optional)
 * param startRow: 导入起始行 (Optional)
 * param projectEnv: 项目环境: prod 生产环境、dev开发环境 (Required)
 * param projectCode: 项目编码 (Required)
 * param tableName: 目标表名 (Required)
 * param partitionInfos: 导入分区，如果是分区表则必传 (Optional)
 * param importStrategy: 导入策略：append 追加、overwrite 覆盖 (Required)
 * param resourceCode: 资源组编码 (Required)
 */
func NewUranusTableDataLoadRequestWithAllParams(
    regionId string,
    appName string,
    fileKey string,
    fileType string,
    delimiter *string,
    characterSet *string,
    startRow *int,
    projectEnv string,
    projectCode string,
    tableName string,
    partitionInfos []shenhaiplatform.PartitionInfo,
    importStrategy string,
    resourceCode string,
) *UranusTableDataLoadRequest {

    return &UranusTableDataLoadRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusTableDataLoad",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        RegionId: regionId,
        AppName: appName,
        FileKey: fileKey,
        FileType: fileType,
        Delimiter: delimiter,
        CharacterSet: characterSet,
        StartRow: startRow,
        ProjectEnv: projectEnv,
        ProjectCode: projectCode,
        TableName: tableName,
        PartitionInfos: partitionInfos,
        ImportStrategy: importStrategy,
        ResourceCode: resourceCode,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUranusTableDataLoadRequestWithoutParam() *UranusTableDataLoadRequest {

    return &UranusTableDataLoadRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusTableDataLoad",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *UranusTableDataLoadRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param appName: 应用名称(Required) */
func (r *UranusTableDataLoadRequest) SetAppName(appName string) {
    r.AppName = appName
}
/* param fileKey: 文件路径（key）(Required) */
func (r *UranusTableDataLoadRequest) SetFileKey(fileKey string) {
    r.FileKey = fileKey
}
/* param fileType: 文件类型：csv、text、xls、xlsx(Required) */
func (r *UranusTableDataLoadRequest) SetFileType(fileType string) {
    r.FileType = fileType
}
/* param delimiter: 分隔符: en-comma 英文逗号，en-semicolon 英文分号，space 空格，pipe 竖线，hash 井号，and 与号，line-feed-lf 换行符（UNIX），line-feed-crlf 换行符（Windows）(Optional) */
func (r *UranusTableDataLoadRequest) SetDelimiter(delimiter string) {
    r.Delimiter = &delimiter
}
/* param characterSet: 字符集: GBK、UTF-8、ISO-8859-1(Optional) */
func (r *UranusTableDataLoadRequest) SetCharacterSet(characterSet string) {
    r.CharacterSet = &characterSet
}
/* param startRow: 导入起始行(Optional) */
func (r *UranusTableDataLoadRequest) SetStartRow(startRow int) {
    r.StartRow = &startRow
}
/* param projectEnv: 项目环境: prod 生产环境、dev开发环境(Required) */
func (r *UranusTableDataLoadRequest) SetProjectEnv(projectEnv string) {
    r.ProjectEnv = projectEnv
}
/* param projectCode: 项目编码(Required) */
func (r *UranusTableDataLoadRequest) SetProjectCode(projectCode string) {
    r.ProjectCode = projectCode
}
/* param tableName: 目标表名(Required) */
func (r *UranusTableDataLoadRequest) SetTableName(tableName string) {
    r.TableName = tableName
}
/* param partitionInfos: 导入分区，如果是分区表则必传(Optional) */
func (r *UranusTableDataLoadRequest) SetPartitionInfos(partitionInfos []shenhaiplatform.PartitionInfo) {
    r.PartitionInfos = partitionInfos
}
/* param importStrategy: 导入策略：append 追加、overwrite 覆盖(Required) */
func (r *UranusTableDataLoadRequest) SetImportStrategy(importStrategy string) {
    r.ImportStrategy = importStrategy
}
/* param resourceCode: 资源组编码(Required) */
func (r *UranusTableDataLoadRequest) SetResourceCode(resourceCode string) {
    r.ResourceCode = resourceCode
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UranusTableDataLoadRequest) GetRegionId() string {
    return r.RegionId
}

type UranusTableDataLoadResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UranusTableDataLoadResult `json:"result"`
}

type UranusTableDataLoadResult struct {
    Code string `json:"code"`
    Message string `json:"message"`
    Result string `json:"result"`
}