// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    shenhaiplatform "github.com/jdcloud-api/jdcloud-sdk-go/services/shenhaiplatform/models"
)

type UranusScriptStartersRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 应用名称  */
    AppName string `json:"appName"`

    /* 流程code  */
    FlowCode string `json:"flowCode"`

    /* 数据源code  */
    DataSourceCode string `json:"dataSourceCode"`

    /* 文件code  */
    FileCode string `json:"fileCode"`

    /* 文件名称  */
    FileName string `json:"fileName"`

    /* 文件类型 SQL,SHELL,PYTHON,PERL,R,SparkJar,StarRocks,MySQL  */
    FileType string `json:"fileType"`

    /* 脚本内容  */
    Content string `json:"content"`

    /* sql执行引擎 apReduce,Spark,Tez,presto,Python2,Python3,auto,StarRocks,MySQL  */
    ExecEngine string `json:"execEngine"`

    /* 脚本参数配置 (Optional) */
    Args []shenhaiplatform.UranusTaskParamReq `json:"args"`

    /* sql脚本是否全部执行 是false,否true  */
    Segment bool `json:"segment"`

    /* 队列名称 (Optional) */
    ResourceName *string `json:"resourceName"`

    /* 队列code (Optional) */
    ResourceCode *string `json:"resourceCode"`

    /* 循环节点信息 (Optional) */
    LoopInfo []shenhaiplatform.TaskInfoLoopReq `json:"loopInfo"`
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 * param flowCode: 流程code (Required)
 * param dataSourceCode: 数据源code (Required)
 * param fileCode: 文件code (Required)
 * param fileName: 文件名称 (Required)
 * param fileType: 文件类型 SQL,SHELL,PYTHON,PERL,R,SparkJar,StarRocks,MySQL (Required)
 * param content: 脚本内容 (Required)
 * param execEngine: sql执行引擎 apReduce,Spark,Tez,presto,Python2,Python3,auto,StarRocks,MySQL (Required)
 * param segment: sql脚本是否全部执行 是false,否true (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUranusScriptStartersRequest(
    regionId string,
    appName string,
    flowCode string,
    dataSourceCode string,
    fileCode string,
    fileName string,
    fileType string,
    content string,
    execEngine string,
    segment bool,
) *UranusScriptStartersRequest {

	return &UranusScriptStartersRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/apps/{appName}/uranusScriptStarters",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        RegionId: regionId,
        AppName: appName,
        FlowCode: flowCode,
        DataSourceCode: dataSourceCode,
        FileCode: fileCode,
        FileName: fileName,
        FileType: fileType,
        Content: content,
        ExecEngine: execEngine,
        Segment: segment,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 * param flowCode: 流程code (Required)
 * param dataSourceCode: 数据源code (Required)
 * param fileCode: 文件code (Required)
 * param fileName: 文件名称 (Required)
 * param fileType: 文件类型 SQL,SHELL,PYTHON,PERL,R,SparkJar,StarRocks,MySQL (Required)
 * param content: 脚本内容 (Required)
 * param execEngine: sql执行引擎 apReduce,Spark,Tez,presto,Python2,Python3,auto,StarRocks,MySQL (Required)
 * param args: 脚本参数配置 (Optional)
 * param segment: sql脚本是否全部执行 是false,否true (Required)
 * param resourceName: 队列名称 (Optional)
 * param resourceCode: 队列code (Optional)
 * param loopInfo: 循环节点信息 (Optional)
 */
func NewUranusScriptStartersRequestWithAllParams(
    regionId string,
    appName string,
    flowCode string,
    dataSourceCode string,
    fileCode string,
    fileName string,
    fileType string,
    content string,
    execEngine string,
    args []shenhaiplatform.UranusTaskParamReq,
    segment bool,
    resourceName *string,
    resourceCode *string,
    loopInfo []shenhaiplatform.TaskInfoLoopReq,
) *UranusScriptStartersRequest {

    return &UranusScriptStartersRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusScriptStarters",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        RegionId: regionId,
        AppName: appName,
        FlowCode: flowCode,
        DataSourceCode: dataSourceCode,
        FileCode: fileCode,
        FileName: fileName,
        FileType: fileType,
        Content: content,
        ExecEngine: execEngine,
        Args: args,
        Segment: segment,
        ResourceName: resourceName,
        ResourceCode: resourceCode,
        LoopInfo: loopInfo,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUranusScriptStartersRequestWithoutParam() *UranusScriptStartersRequest {

    return &UranusScriptStartersRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusScriptStarters",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *UranusScriptStartersRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param appName: 应用名称(Required) */
func (r *UranusScriptStartersRequest) SetAppName(appName string) {
    r.AppName = appName
}
/* param flowCode: 流程code(Required) */
func (r *UranusScriptStartersRequest) SetFlowCode(flowCode string) {
    r.FlowCode = flowCode
}
/* param dataSourceCode: 数据源code(Required) */
func (r *UranusScriptStartersRequest) SetDataSourceCode(dataSourceCode string) {
    r.DataSourceCode = dataSourceCode
}
/* param fileCode: 文件code(Required) */
func (r *UranusScriptStartersRequest) SetFileCode(fileCode string) {
    r.FileCode = fileCode
}
/* param fileName: 文件名称(Required) */
func (r *UranusScriptStartersRequest) SetFileName(fileName string) {
    r.FileName = fileName
}
/* param fileType: 文件类型 SQL,SHELL,PYTHON,PERL,R,SparkJar,StarRocks,MySQL(Required) */
func (r *UranusScriptStartersRequest) SetFileType(fileType string) {
    r.FileType = fileType
}
/* param content: 脚本内容(Required) */
func (r *UranusScriptStartersRequest) SetContent(content string) {
    r.Content = content
}
/* param execEngine: sql执行引擎 apReduce,Spark,Tez,presto,Python2,Python3,auto,StarRocks,MySQL(Required) */
func (r *UranusScriptStartersRequest) SetExecEngine(execEngine string) {
    r.ExecEngine = execEngine
}
/* param args: 脚本参数配置(Optional) */
func (r *UranusScriptStartersRequest) SetArgs(args []shenhaiplatform.UranusTaskParamReq) {
    r.Args = args
}
/* param segment: sql脚本是否全部执行 是false,否true(Required) */
func (r *UranusScriptStartersRequest) SetSegment(segment bool) {
    r.Segment = segment
}
/* param resourceName: 队列名称(Optional) */
func (r *UranusScriptStartersRequest) SetResourceName(resourceName string) {
    r.ResourceName = &resourceName
}
/* param resourceCode: 队列code(Optional) */
func (r *UranusScriptStartersRequest) SetResourceCode(resourceCode string) {
    r.ResourceCode = &resourceCode
}
/* param loopInfo: 循环节点信息(Optional) */
func (r *UranusScriptStartersRequest) SetLoopInfo(loopInfo []shenhaiplatform.TaskInfoLoopReq) {
    r.LoopInfo = loopInfo
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UranusScriptStartersRequest) GetRegionId() string {
    return r.RegionId
}

type UranusScriptStartersResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UranusScriptStartersResult `json:"result"`
}

type UranusScriptStartersResult struct {
    Code string `json:"code"`
    ErrorTitle string `json:"errorTitle"`
    ErrorMsg string `json:"errorMsg"`
    Result string `json:"result"`
    SubCode string `json:"subCode"`
    Successed bool `json:"successed"`
}