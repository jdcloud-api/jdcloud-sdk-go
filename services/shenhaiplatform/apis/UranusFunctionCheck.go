// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type UranusFunctionCheckRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 应用名称  */
    AppName string `json:"appName"`

    /* 检查的类型（CATALOG：函数分类目录、FUNCTION：函数） (Optional) */
    CheckType *string `json:"checkType"`

    /* 检查的名称 (Optional) */
    CheckName *string `json:"checkName"`

    /* 分类目录的父code（函数名称是命名空间里唯一的；函数分类目录在不同目录下可以相同） (Optional) */
    ParentCatalogId *int `json:"parentCatalogId"`
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUranusFunctionCheckRequest(
    regionId string,
    appName string,
) *UranusFunctionCheckRequest {

	return &UranusFunctionCheckRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/apps/{appName}/uranusFunctionCheck",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        RegionId: regionId,
        AppName: appName,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 * param checkType: 检查的类型（CATALOG：函数分类目录、FUNCTION：函数） (Optional)
 * param checkName: 检查的名称 (Optional)
 * param parentCatalogId: 分类目录的父code（函数名称是命名空间里唯一的；函数分类目录在不同目录下可以相同） (Optional)
 */
func NewUranusFunctionCheckRequestWithAllParams(
    regionId string,
    appName string,
    checkType *string,
    checkName *string,
    parentCatalogId *int,
) *UranusFunctionCheckRequest {

    return &UranusFunctionCheckRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusFunctionCheck",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        RegionId: regionId,
        AppName: appName,
        CheckType: checkType,
        CheckName: checkName,
        ParentCatalogId: parentCatalogId,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUranusFunctionCheckRequestWithoutParam() *UranusFunctionCheckRequest {

    return &UranusFunctionCheckRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusFunctionCheck",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *UranusFunctionCheckRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param appName: 应用名称(Required) */
func (r *UranusFunctionCheckRequest) SetAppName(appName string) {
    r.AppName = appName
}
/* param checkType: 检查的类型（CATALOG：函数分类目录、FUNCTION：函数）(Optional) */
func (r *UranusFunctionCheckRequest) SetCheckType(checkType string) {
    r.CheckType = &checkType
}
/* param checkName: 检查的名称(Optional) */
func (r *UranusFunctionCheckRequest) SetCheckName(checkName string) {
    r.CheckName = &checkName
}
/* param parentCatalogId: 分类目录的父code（函数名称是命名空间里唯一的；函数分类目录在不同目录下可以相同）(Optional) */
func (r *UranusFunctionCheckRequest) SetParentCatalogId(parentCatalogId int) {
    r.ParentCatalogId = &parentCatalogId
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UranusFunctionCheckRequest) GetRegionId() string {
    return r.RegionId
}

type UranusFunctionCheckResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UranusFunctionCheckResult `json:"result"`
}

type UranusFunctionCheckResult struct {
    Code string `json:"code"`
    ErrorTitle string `json:"errorTitle"`
    ErrorMsg string `json:"errorMsg"`
    Result bool `json:"result"`
    SubCode string `json:"subCode"`
    Successed bool `json:"successed"`
}