// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    shenhaiplatform "github.com/jdcloud-api/jdcloud-sdk-go/services/shenhaiplatform/models"
)

type UranusQueryFileTreeRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 应用名称  */
    AppName string `json:"appName"`

    /* 工作流code  */
    FlowCode string `json:"flowCode"`

    /* 是否是目录 0 返回全部 1 只返回目录  */
    IsDir int `json:"isDir"`
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 * param flowCode: 工作流code (Required)
 * param isDir: 是否是目录 0 返回全部 1 只返回目录 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUranusQueryFileTreeRequest(
    regionId string,
    appName string,
    flowCode string,
    isDir int,
) *UranusQueryFileTreeRequest {

	return &UranusQueryFileTreeRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/apps/{appName}/uranusQueryFileTree",
			Method:  "GET",
			Header:  nil,
			Version: "v2",
		},
        RegionId: regionId,
        AppName: appName,
        FlowCode: flowCode,
        IsDir: isDir,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 * param flowCode: 工作流code (Required)
 * param isDir: 是否是目录 0 返回全部 1 只返回目录 (Required)
 */
func NewUranusQueryFileTreeRequestWithAllParams(
    regionId string,
    appName string,
    flowCode string,
    isDir int,
) *UranusQueryFileTreeRequest {

    return &UranusQueryFileTreeRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusQueryFileTree",
            Method:  "GET",
            Header:  nil,
            Version: "v2",
        },
        RegionId: regionId,
        AppName: appName,
        FlowCode: flowCode,
        IsDir: isDir,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUranusQueryFileTreeRequestWithoutParam() *UranusQueryFileTreeRequest {

    return &UranusQueryFileTreeRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusQueryFileTree",
            Method:  "GET",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *UranusQueryFileTreeRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param appName: 应用名称(Required) */
func (r *UranusQueryFileTreeRequest) SetAppName(appName string) {
    r.AppName = appName
}
/* param flowCode: 工作流code(Required) */
func (r *UranusQueryFileTreeRequest) SetFlowCode(flowCode string) {
    r.FlowCode = flowCode
}
/* param isDir: 是否是目录 0 返回全部 1 只返回目录(Required) */
func (r *UranusQueryFileTreeRequest) SetIsDir(isDir int) {
    r.IsDir = isDir
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UranusQueryFileTreeRequest) GetRegionId() string {
    return r.RegionId
}

type UranusQueryFileTreeResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UranusQueryFileTreeResult `json:"result"`
}

type UranusQueryFileTreeResult struct {
    Code string `json:"code"`
    ErrorTitle string `json:"errorTitle"`
    ErrorMsg string `json:"errorMsg"`
    Result []shenhaiplatform.UranusFileManagerRes `json:"result"`
    SubCode string `json:"subCode"`
    Successed bool `json:"successed"`
}