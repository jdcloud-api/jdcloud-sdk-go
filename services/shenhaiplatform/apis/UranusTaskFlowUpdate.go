// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type UranusTaskFlowUpdateRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 应用名称  */
    AppName string `json:"appName"`

    /* 工作流名称  */
    FlowName string `json:"flowName"`

    /* 工作流描述 (Optional) */
    FlowDesc *string `json:"flowDesc"`

    /* 工作流所属目录  */
    CatalogCode string `json:"catalogCode"`

    /* 工作流协同人 (Optional) */
    Workers []string `json:"workers"`

    /* 工作流code  */
    FlowCode string `json:"flowCode"`

    /* 负责人 (Optional) */
    Manager *string `json:"manager"`
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 * param flowName: 工作流名称 (Required)
 * param catalogCode: 工作流所属目录 (Required)
 * param flowCode: 工作流code (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUranusTaskFlowUpdateRequest(
    regionId string,
    appName string,
    flowName string,
    catalogCode string,
    flowCode string,
) *UranusTaskFlowUpdateRequest {

	return &UranusTaskFlowUpdateRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/apps/{appName}/uranusTaskFlowUpdate",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        RegionId: regionId,
        AppName: appName,
        FlowName: flowName,
        CatalogCode: catalogCode,
        FlowCode: flowCode,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 * param flowName: 工作流名称 (Required)
 * param flowDesc: 工作流描述 (Optional)
 * param catalogCode: 工作流所属目录 (Required)
 * param workers: 工作流协同人 (Optional)
 * param flowCode: 工作流code (Required)
 * param manager: 负责人 (Optional)
 */
func NewUranusTaskFlowUpdateRequestWithAllParams(
    regionId string,
    appName string,
    flowName string,
    flowDesc *string,
    catalogCode string,
    workers []string,
    flowCode string,
    manager *string,
) *UranusTaskFlowUpdateRequest {

    return &UranusTaskFlowUpdateRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusTaskFlowUpdate",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        RegionId: regionId,
        AppName: appName,
        FlowName: flowName,
        FlowDesc: flowDesc,
        CatalogCode: catalogCode,
        Workers: workers,
        FlowCode: flowCode,
        Manager: manager,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUranusTaskFlowUpdateRequestWithoutParam() *UranusTaskFlowUpdateRequest {

    return &UranusTaskFlowUpdateRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusTaskFlowUpdate",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *UranusTaskFlowUpdateRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param appName: 应用名称(Required) */
func (r *UranusTaskFlowUpdateRequest) SetAppName(appName string) {
    r.AppName = appName
}
/* param flowName: 工作流名称(Required) */
func (r *UranusTaskFlowUpdateRequest) SetFlowName(flowName string) {
    r.FlowName = flowName
}
/* param flowDesc: 工作流描述(Optional) */
func (r *UranusTaskFlowUpdateRequest) SetFlowDesc(flowDesc string) {
    r.FlowDesc = &flowDesc
}
/* param catalogCode: 工作流所属目录(Required) */
func (r *UranusTaskFlowUpdateRequest) SetCatalogCode(catalogCode string) {
    r.CatalogCode = catalogCode
}
/* param workers: 工作流协同人(Optional) */
func (r *UranusTaskFlowUpdateRequest) SetWorkers(workers []string) {
    r.Workers = workers
}
/* param flowCode: 工作流code(Required) */
func (r *UranusTaskFlowUpdateRequest) SetFlowCode(flowCode string) {
    r.FlowCode = flowCode
}
/* param manager: 负责人(Optional) */
func (r *UranusTaskFlowUpdateRequest) SetManager(manager string) {
    r.Manager = &manager
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UranusTaskFlowUpdateRequest) GetRegionId() string {
    return r.RegionId
}

type UranusTaskFlowUpdateResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UranusTaskFlowUpdateResult `json:"result"`
}

type UranusTaskFlowUpdateResult struct {
    Code string `json:"code"`
    ErrorTitle string `json:"errorTitle"`
    ErrorMsg string `json:"errorMsg"`
    Result interface{} `json:"result"`
    SubCode string `json:"subCode"`
    Successed bool `json:"successed"`
}