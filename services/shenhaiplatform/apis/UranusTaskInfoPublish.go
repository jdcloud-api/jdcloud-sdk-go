// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type UranusTaskInfoPublishRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 应用名称  */
    AppName string `json:"appName"`

    /* 节点的uuid  */
    TaskCode string `json:"taskCode"`

    /* 发布原因  */
    Reason string `json:"reason"`

    /* 发布类型 (Optional) */
    PublishStatus *int `json:"publishStatus"`
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 * param taskCode: 节点的uuid (Required)
 * param reason: 发布原因 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUranusTaskInfoPublishRequest(
    regionId string,
    appName string,
    taskCode string,
    reason string,
) *UranusTaskInfoPublishRequest {

	return &UranusTaskInfoPublishRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/apps/{appName}/uranusTaskInfoPublish",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        RegionId: regionId,
        AppName: appName,
        TaskCode: taskCode,
        Reason: reason,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 * param taskCode: 节点的uuid (Required)
 * param reason: 发布原因 (Required)
 * param publishStatus: 发布类型 (Optional)
 */
func NewUranusTaskInfoPublishRequestWithAllParams(
    regionId string,
    appName string,
    taskCode string,
    reason string,
    publishStatus *int,
) *UranusTaskInfoPublishRequest {

    return &UranusTaskInfoPublishRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusTaskInfoPublish",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        RegionId: regionId,
        AppName: appName,
        TaskCode: taskCode,
        Reason: reason,
        PublishStatus: publishStatus,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUranusTaskInfoPublishRequestWithoutParam() *UranusTaskInfoPublishRequest {

    return &UranusTaskInfoPublishRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusTaskInfoPublish",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *UranusTaskInfoPublishRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param appName: 应用名称(Required) */
func (r *UranusTaskInfoPublishRequest) SetAppName(appName string) {
    r.AppName = appName
}
/* param taskCode: 节点的uuid(Required) */
func (r *UranusTaskInfoPublishRequest) SetTaskCode(taskCode string) {
    r.TaskCode = taskCode
}
/* param reason: 发布原因(Required) */
func (r *UranusTaskInfoPublishRequest) SetReason(reason string) {
    r.Reason = reason
}
/* param publishStatus: 发布类型(Optional) */
func (r *UranusTaskInfoPublishRequest) SetPublishStatus(publishStatus int) {
    r.PublishStatus = &publishStatus
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UranusTaskInfoPublishRequest) GetRegionId() string {
    return r.RegionId
}

type UranusTaskInfoPublishResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UranusTaskInfoPublishResult `json:"result"`
}

type UranusTaskInfoPublishResult struct {
    Code string `json:"code"`
    ErrorTitle string `json:"errorTitle"`
    ErrorMsg string `json:"errorMsg"`
    Result interface{} `json:"result"`
    SubCode string `json:"subCode"`
    Successed bool `json:"successed"`
}