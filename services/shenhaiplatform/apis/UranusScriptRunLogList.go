// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    shenhaiplatform "github.com/jdcloud-api/jdcloud-sdk-go/services/shenhaiplatform/models"
)

type UranusScriptRunLogListRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 应用名称  */
    AppName string `json:"appName"`

    /* 业务线Code (Optional) */
    FileCode *string `json:"fileCode"`

    /* 运行状态列表 (Optional) */
    StatusList []string `json:"statusList"`

    /* 启动时间起点 (Optional) */
    StartTimeFrom *string `json:"startTimeFrom"`

    /* 启动时间截至 (Optional) */
    StartTimeTo *string `json:"startTimeTo"`

    /* 结束时间起点 (Optional) */
    EndTimeFrom *string `json:"endTimeFrom"`

    /* 结束时间截至 (Optional) */
    EndTimeTo *string `json:"endTimeTo"`

    /* 文件路径 (Optional) */
    FilePath *string `json:"filePath"`

    /* 第几页 (Optional) */
    Page *int `json:"page"`

    /* 分页大小 (Optional) */
    PageSize *int `json:"pageSize"`
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUranusScriptRunLogListRequest(
    regionId string,
    appName string,
) *UranusScriptRunLogListRequest {

	return &UranusScriptRunLogListRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/apps/{appName}/uranusScriptRunLogList",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        RegionId: regionId,
        AppName: appName,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 * param fileCode: 业务线Code (Optional)
 * param statusList: 运行状态列表 (Optional)
 * param startTimeFrom: 启动时间起点 (Optional)
 * param startTimeTo: 启动时间截至 (Optional)
 * param endTimeFrom: 结束时间起点 (Optional)
 * param endTimeTo: 结束时间截至 (Optional)
 * param filePath: 文件路径 (Optional)
 * param page: 第几页 (Optional)
 * param pageSize: 分页大小 (Optional)
 */
func NewUranusScriptRunLogListRequestWithAllParams(
    regionId string,
    appName string,
    fileCode *string,
    statusList []string,
    startTimeFrom *string,
    startTimeTo *string,
    endTimeFrom *string,
    endTimeTo *string,
    filePath *string,
    page *int,
    pageSize *int,
) *UranusScriptRunLogListRequest {

    return &UranusScriptRunLogListRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusScriptRunLogList",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        RegionId: regionId,
        AppName: appName,
        FileCode: fileCode,
        StatusList: statusList,
        StartTimeFrom: startTimeFrom,
        StartTimeTo: startTimeTo,
        EndTimeFrom: endTimeFrom,
        EndTimeTo: endTimeTo,
        FilePath: filePath,
        Page: page,
        PageSize: pageSize,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUranusScriptRunLogListRequestWithoutParam() *UranusScriptRunLogListRequest {

    return &UranusScriptRunLogListRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusScriptRunLogList",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *UranusScriptRunLogListRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param appName: 应用名称(Required) */
func (r *UranusScriptRunLogListRequest) SetAppName(appName string) {
    r.AppName = appName
}
/* param fileCode: 业务线Code(Optional) */
func (r *UranusScriptRunLogListRequest) SetFileCode(fileCode string) {
    r.FileCode = &fileCode
}
/* param statusList: 运行状态列表(Optional) */
func (r *UranusScriptRunLogListRequest) SetStatusList(statusList []string) {
    r.StatusList = statusList
}
/* param startTimeFrom: 启动时间起点(Optional) */
func (r *UranusScriptRunLogListRequest) SetStartTimeFrom(startTimeFrom string) {
    r.StartTimeFrom = &startTimeFrom
}
/* param startTimeTo: 启动时间截至(Optional) */
func (r *UranusScriptRunLogListRequest) SetStartTimeTo(startTimeTo string) {
    r.StartTimeTo = &startTimeTo
}
/* param endTimeFrom: 结束时间起点(Optional) */
func (r *UranusScriptRunLogListRequest) SetEndTimeFrom(endTimeFrom string) {
    r.EndTimeFrom = &endTimeFrom
}
/* param endTimeTo: 结束时间截至(Optional) */
func (r *UranusScriptRunLogListRequest) SetEndTimeTo(endTimeTo string) {
    r.EndTimeTo = &endTimeTo
}
/* param filePath: 文件路径(Optional) */
func (r *UranusScriptRunLogListRequest) SetFilePath(filePath string) {
    r.FilePath = &filePath
}
/* param page: 第几页(Optional) */
func (r *UranusScriptRunLogListRequest) SetPage(page int) {
    r.Page = &page
}
/* param pageSize: 分页大小(Optional) */
func (r *UranusScriptRunLogListRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UranusScriptRunLogListRequest) GetRegionId() string {
    return r.RegionId
}

type UranusScriptRunLogListResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UranusScriptRunLogListResult `json:"result"`
}

type UranusScriptRunLogListResult struct {
    Code string `json:"code"`
    ErrorTitle string `json:"errorTitle"`
    ErrorMsg string `json:"errorMsg"`
    Result shenhaiplatform.UranusPageResultContentScriptRunLogRes `json:"result"`
    SubCode string `json:"subCode"`
    Successed bool `json:"successed"`
}