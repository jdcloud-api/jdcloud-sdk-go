// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    shenhaiplatform "github.com/jdcloud-api/jdcloud-sdk-go/services/shenhaiplatform/models"
)

type GravityParticleDubboJobManagerDeployJobRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 应用名称  */
    AppName string `json:"appName"`

    /*  (Optional) */
    ProjectId *int `json:"projectId"`

    /*  (Optional) */
    ProjectName *string `json:"projectName"`

    /*  (Optional) */
    ProjectNameMatch *bool `json:"projectNameMatch"`

    /*  (Optional) */
    NameKeyWord *string `json:"nameKeyWord"`

    /*  (Optional) */
    RelationType *string `json:"relationType"`

    /*  (Optional) */
    ModelId *int `json:"modelId"`

    /*  (Optional) */
    ModelName *string `json:"modelName"`

    /*  (Optional) */
    ModelNameMatch *bool `json:"modelNameMatch"`

    /*  (Optional) */
    GitUrl *string `json:"gitUrl"`

    /*  (Optional) */
    TableId *int `json:"tableId"`

    /*  (Optional) */
    DatabaseName *string `json:"databaseName"`

    /*  (Optional) */
    MarketId *int `json:"marketId"`

    /*  (Optional) */
    MarketCode *string `json:"marketCode"`

    /*  (Optional) */
    MarketName *string `json:"marketName"`

    /*  (Optional) */
    RedirectType *string `json:"redirectType"`

    /*  (Optional) */
    TableName *string `json:"tableName"`

    /*  (Optional) */
    TableNameMatch *bool `json:"tableNameMatch"`

    /*  (Optional) */
    JobName *string `json:"jobName"`

    /*  (Optional) */
    JobSystem *string `json:"jobSystem"`

    /*  (Optional) */
    TriggerType *string `json:"triggerType"`

    /*  (Optional) */
    TriggerConfig *shenhaiplatform.GpdjmcTriggerConfigDTO `json:"triggerConfig"`

    /*  (Optional) */
    ZipCommand *string `json:"zipCommand"`

    /*  (Optional) */
    ZipFileName *string `json:"zipFileName"`

    /*  (Optional) */
    ZipParams *string `json:"zipParams"`

    /*  (Optional) */
    Dependencies *string `json:"dependencies"`

    /*  (Optional) */
    Manager *string `json:"manager"`

    /*  (Optional) */
    Cooperator *string `json:"cooperator"`

    /* 优先级，l1 - l4 (Optional) */
    Priority *string `json:"priority"`

    /*  (Optional) */
    JobDesc *string `json:"jobDesc"`

    /*  (Optional) */
    ScriptType *string `json:"scriptType"`

    /*  (Optional) */
    RunScript *string `json:"runScript"`

    /*  (Optional) */
    ScriptContent []string `json:"scriptContent"`

    /*  (Optional) */
    Cycle *string `json:"cycle"`

    /*  (Optional) */
    Sequence *string `json:"sequence"`

    /*  (Optional) */
    LifeCycle *string `json:"lifeCycle"`

    /*  (Optional) */
    Retry *bool `json:"retry"`

    /*  (Optional) */
    RetryCount *int `json:"retryCount"`

    /*  (Optional) */
    RetryInterval *int `json:"retryInterval"`

    /*  (Optional) */
    NotifyOccasion *string `json:"notifyOccasion"`

    /*  (Optional) */
    NotifyTime *string `json:"notifyTime"`

    /*  (Optional) */
    NotifyPattern *string `json:"notifyPattern"`

    /*  (Optional) */
    Notifier *string `json:"notifier"`

    /*  (Optional) */
    StartRunTime *string `json:"startRunTime"`

    /*  (Optional) */
    EndRunTime *string `json:"endRunTime"`

    /*  (Optional) */
    RunTime *string `json:"runTime"`

    /*  (Optional) */
    RunDate *string `json:"runDate"`

    /*  (Optional) */
    FlowId *string `json:"flowId"`

    /*  (Optional) */
    TaskId *string `json:"taskId"`

    /*  (Optional) */
    UserAccount *string `json:"userAccount"`

    /*  (Optional) */
    UserPwd *string `json:"userPwd"`

    /*  (Optional) */
    MarkIds *string `json:"markIds"`

    /*  (Optional) */
    RunTimeOut *int `json:"runTimeOut"`

    /*  (Optional) */
    ScriptSourceType *string `json:"scriptSourceType"`

    /*  (Optional) */
    ScriptTemplate *string `json:"scriptTemplate"`

    /*  (Optional) */
    DmrTableIds []int `json:"dmrTableIds"`

    /*  (Optional) */
    DmrTables []shenhaiplatform.GpdjmcDmrModelDTO `json:"dmrTables"`

    /*  (Optional) */
    GitFilesList []shenhaiplatform.GpdjmcGitFileDTO `json:"gitFilesList"`

    /*  (Optional) */
    IsDeploy *bool `json:"isDeploy"`

    /*  (Optional) */
    ScriptPath *string `json:"scriptPath"`

    /*  (Optional) */
    ScriptByte []string `json:"scriptByte"`

    /*  (Optional) */
    FileId *int `json:"fileId"`

    /*  (Optional) */
    PublishDesc *string `json:"publishDesc"`

    /*  (Optional) */
    ScriptInfo *string `json:"scriptInfo"`

    /*  (Optional) */
    Version *int `json:"version"`

    /*  (Optional) */
    Channel *string `json:"channel"`

    /*  (Optional) */
    SequenceStartTime *string `json:"sequenceStartTime"`

    /*  (Optional) */
    SequenceEndTime *string `json:"sequenceEndTime"`

    /*  (Optional) */
    SequenceInterval *int `json:"sequenceInterval"`

    /*  (Optional) */
    RunParams *string `json:"runParams"`

    /*  (Optional) */
    RunQueue *string `json:"runQueue"`

    /*  (Optional) */
    SparkJarRunParams *shenhaiplatform.SparkJarRunParams `json:"sparkJarRunParams"`

    /*  (Optional) */
    SubmitConf []shenhaiplatform.GpdjmcConfPairStringString `json:"submitConf"`

    /*  (Optional) */
    JobStatus *int `json:"jobStatus"`

    /* 计算资源组code (Optional) */
    ResourceCode *string `json:"resourceCode"`

    /* 工作空间code (Optional) */
    WorkspaceCode *string `json:"workspaceCode"`

    /* 客户作业名称 (Optional) */
    CstJobName *string `json:"cstJobName"`

    /*  (Optional) */
    FromGravity *bool `json:"fromGravity"`

    /* 处理类型 (Optional) */
    ProcessType *string `json:"processType"`

    /* 租户code (Optional) */
    CompanyCode *string `json:"companyCode"`

    /* 窗口期开始时间 (Optional) */
    WindowStartTime *string `json:"windowStartTime"`

    /* 窗口期结束时间 (Optional) */
    WindowEndTime *string `json:"windowEndTime"`

    /* 脚本存储路径 (Optional) */
    ScriptUrl *string `json:"scriptUrl"`

    /* 计算资源组名称 (Optional) */
    ResourceName *string `json:"resourceName"`

    /* 数据源ID，在一些要访问外部源的任务中，需要指定该数据源ID (Optional) */
    DatasourceId *string `json:"datasourceId"`

    /* 输入参数列表 (Optional) */
    InputParams []shenhaiplatform.GpdjmcInputParam `json:"inputParams"`

    /* 输出参数列表 (Optional) */
    OutputParams []shenhaiplatform.GpdjmcOutputParam `json:"outputParams"`

    /* 循环任务参数 (Optional) */
    LoopParam *shenhaiplatform.GpdjmcLoopParam `json:"loopParam"`
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewGravityParticleDubboJobManagerDeployJobRequest(
    regionId string,
    appName string,
) *GravityParticleDubboJobManagerDeployJobRequest {

	return &GravityParticleDubboJobManagerDeployJobRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerDeployJob",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        RegionId: regionId,
        AppName: appName,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 * param projectId:  (Optional)
 * param projectName:  (Optional)
 * param projectNameMatch:  (Optional)
 * param nameKeyWord:  (Optional)
 * param relationType:  (Optional)
 * param modelId:  (Optional)
 * param modelName:  (Optional)
 * param modelNameMatch:  (Optional)
 * param gitUrl:  (Optional)
 * param tableId:  (Optional)
 * param databaseName:  (Optional)
 * param marketId:  (Optional)
 * param marketCode:  (Optional)
 * param marketName:  (Optional)
 * param redirectType:  (Optional)
 * param tableName:  (Optional)
 * param tableNameMatch:  (Optional)
 * param jobName:  (Optional)
 * param jobSystem:  (Optional)
 * param triggerType:  (Optional)
 * param triggerConfig:  (Optional)
 * param zipCommand:  (Optional)
 * param zipFileName:  (Optional)
 * param zipParams:  (Optional)
 * param dependencies:  (Optional)
 * param manager:  (Optional)
 * param cooperator:  (Optional)
 * param priority: 优先级，l1 - l4 (Optional)
 * param jobDesc:  (Optional)
 * param scriptType:  (Optional)
 * param runScript:  (Optional)
 * param scriptContent:  (Optional)
 * param cycle:  (Optional)
 * param sequence:  (Optional)
 * param lifeCycle:  (Optional)
 * param retry:  (Optional)
 * param retryCount:  (Optional)
 * param retryInterval:  (Optional)
 * param notifyOccasion:  (Optional)
 * param notifyTime:  (Optional)
 * param notifyPattern:  (Optional)
 * param notifier:  (Optional)
 * param startRunTime:  (Optional)
 * param endRunTime:  (Optional)
 * param runTime:  (Optional)
 * param runDate:  (Optional)
 * param flowId:  (Optional)
 * param taskId:  (Optional)
 * param userAccount:  (Optional)
 * param userPwd:  (Optional)
 * param markIds:  (Optional)
 * param runTimeOut:  (Optional)
 * param scriptSourceType:  (Optional)
 * param scriptTemplate:  (Optional)
 * param dmrTableIds:  (Optional)
 * param dmrTables:  (Optional)
 * param gitFilesList:  (Optional)
 * param isDeploy:  (Optional)
 * param scriptPath:  (Optional)
 * param scriptByte:  (Optional)
 * param fileId:  (Optional)
 * param publishDesc:  (Optional)
 * param scriptInfo:  (Optional)
 * param version:  (Optional)
 * param channel:  (Optional)
 * param sequenceStartTime:  (Optional)
 * param sequenceEndTime:  (Optional)
 * param sequenceInterval:  (Optional)
 * param runParams:  (Optional)
 * param runQueue:  (Optional)
 * param sparkJarRunParams:  (Optional)
 * param submitConf:  (Optional)
 * param jobStatus:  (Optional)
 * param resourceCode: 计算资源组code (Optional)
 * param workspaceCode: 工作空间code (Optional)
 * param cstJobName: 客户作业名称 (Optional)
 * param fromGravity:  (Optional)
 * param processType: 处理类型 (Optional)
 * param companyCode: 租户code (Optional)
 * param windowStartTime: 窗口期开始时间 (Optional)
 * param windowEndTime: 窗口期结束时间 (Optional)
 * param scriptUrl: 脚本存储路径 (Optional)
 * param resourceName: 计算资源组名称 (Optional)
 * param datasourceId: 数据源ID，在一些要访问外部源的任务中，需要指定该数据源ID (Optional)
 * param inputParams: 输入参数列表 (Optional)
 * param outputParams: 输出参数列表 (Optional)
 * param loopParam: 循环任务参数 (Optional)
 */
func NewGravityParticleDubboJobManagerDeployJobRequestWithAllParams(
    regionId string,
    appName string,
    projectId *int,
    projectName *string,
    projectNameMatch *bool,
    nameKeyWord *string,
    relationType *string,
    modelId *int,
    modelName *string,
    modelNameMatch *bool,
    gitUrl *string,
    tableId *int,
    databaseName *string,
    marketId *int,
    marketCode *string,
    marketName *string,
    redirectType *string,
    tableName *string,
    tableNameMatch *bool,
    jobName *string,
    jobSystem *string,
    triggerType *string,
    triggerConfig *shenhaiplatform.GpdjmcTriggerConfigDTO,
    zipCommand *string,
    zipFileName *string,
    zipParams *string,
    dependencies *string,
    manager *string,
    cooperator *string,
    priority *string,
    jobDesc *string,
    scriptType *string,
    runScript *string,
    scriptContent []string,
    cycle *string,
    sequence *string,
    lifeCycle *string,
    retry *bool,
    retryCount *int,
    retryInterval *int,
    notifyOccasion *string,
    notifyTime *string,
    notifyPattern *string,
    notifier *string,
    startRunTime *string,
    endRunTime *string,
    runTime *string,
    runDate *string,
    flowId *string,
    taskId *string,
    userAccount *string,
    userPwd *string,
    markIds *string,
    runTimeOut *int,
    scriptSourceType *string,
    scriptTemplate *string,
    dmrTableIds []int,
    dmrTables []shenhaiplatform.GpdjmcDmrModelDTO,
    gitFilesList []shenhaiplatform.GpdjmcGitFileDTO,
    isDeploy *bool,
    scriptPath *string,
    scriptByte []string,
    fileId *int,
    publishDesc *string,
    scriptInfo *string,
    version *int,
    channel *string,
    sequenceStartTime *string,
    sequenceEndTime *string,
    sequenceInterval *int,
    runParams *string,
    runQueue *string,
    sparkJarRunParams *shenhaiplatform.SparkJarRunParams,
    submitConf []shenhaiplatform.GpdjmcConfPairStringString,
    jobStatus *int,
    resourceCode *string,
    workspaceCode *string,
    cstJobName *string,
    fromGravity *bool,
    processType *string,
    companyCode *string,
    windowStartTime *string,
    windowEndTime *string,
    scriptUrl *string,
    resourceName *string,
    datasourceId *string,
    inputParams []shenhaiplatform.GpdjmcInputParam,
    outputParams []shenhaiplatform.GpdjmcOutputParam,
    loopParam *shenhaiplatform.GpdjmcLoopParam,
) *GravityParticleDubboJobManagerDeployJobRequest {

    return &GravityParticleDubboJobManagerDeployJobRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerDeployJob",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        RegionId: regionId,
        AppName: appName,
        ProjectId: projectId,
        ProjectName: projectName,
        ProjectNameMatch: projectNameMatch,
        NameKeyWord: nameKeyWord,
        RelationType: relationType,
        ModelId: modelId,
        ModelName: modelName,
        ModelNameMatch: modelNameMatch,
        GitUrl: gitUrl,
        TableId: tableId,
        DatabaseName: databaseName,
        MarketId: marketId,
        MarketCode: marketCode,
        MarketName: marketName,
        RedirectType: redirectType,
        TableName: tableName,
        TableNameMatch: tableNameMatch,
        JobName: jobName,
        JobSystem: jobSystem,
        TriggerType: triggerType,
        TriggerConfig: triggerConfig,
        ZipCommand: zipCommand,
        ZipFileName: zipFileName,
        ZipParams: zipParams,
        Dependencies: dependencies,
        Manager: manager,
        Cooperator: cooperator,
        Priority: priority,
        JobDesc: jobDesc,
        ScriptType: scriptType,
        RunScript: runScript,
        ScriptContent: scriptContent,
        Cycle: cycle,
        Sequence: sequence,
        LifeCycle: lifeCycle,
        Retry: retry,
        RetryCount: retryCount,
        RetryInterval: retryInterval,
        NotifyOccasion: notifyOccasion,
        NotifyTime: notifyTime,
        NotifyPattern: notifyPattern,
        Notifier: notifier,
        StartRunTime: startRunTime,
        EndRunTime: endRunTime,
        RunTime: runTime,
        RunDate: runDate,
        FlowId: flowId,
        TaskId: taskId,
        UserAccount: userAccount,
        UserPwd: userPwd,
        MarkIds: markIds,
        RunTimeOut: runTimeOut,
        ScriptSourceType: scriptSourceType,
        ScriptTemplate: scriptTemplate,
        DmrTableIds: dmrTableIds,
        DmrTables: dmrTables,
        GitFilesList: gitFilesList,
        IsDeploy: isDeploy,
        ScriptPath: scriptPath,
        ScriptByte: scriptByte,
        FileId: fileId,
        PublishDesc: publishDesc,
        ScriptInfo: scriptInfo,
        Version: version,
        Channel: channel,
        SequenceStartTime: sequenceStartTime,
        SequenceEndTime: sequenceEndTime,
        SequenceInterval: sequenceInterval,
        RunParams: runParams,
        RunQueue: runQueue,
        SparkJarRunParams: sparkJarRunParams,
        SubmitConf: submitConf,
        JobStatus: jobStatus,
        ResourceCode: resourceCode,
        WorkspaceCode: workspaceCode,
        CstJobName: cstJobName,
        FromGravity: fromGravity,
        ProcessType: processType,
        CompanyCode: companyCode,
        WindowStartTime: windowStartTime,
        WindowEndTime: windowEndTime,
        ScriptUrl: scriptUrl,
        ResourceName: resourceName,
        DatasourceId: datasourceId,
        InputParams: inputParams,
        OutputParams: outputParams,
        LoopParam: loopParam,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewGravityParticleDubboJobManagerDeployJobRequestWithoutParam() *GravityParticleDubboJobManagerDeployJobRequest {

    return &GravityParticleDubboJobManagerDeployJobRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerDeployJob",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param appName: 应用名称(Required) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetAppName(appName string) {
    r.AppName = appName
}
/* param projectId: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetProjectId(projectId int) {
    r.ProjectId = &projectId
}
/* param projectName: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetProjectName(projectName string) {
    r.ProjectName = &projectName
}
/* param projectNameMatch: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetProjectNameMatch(projectNameMatch bool) {
    r.ProjectNameMatch = &projectNameMatch
}
/* param nameKeyWord: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetNameKeyWord(nameKeyWord string) {
    r.NameKeyWord = &nameKeyWord
}
/* param relationType: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetRelationType(relationType string) {
    r.RelationType = &relationType
}
/* param modelId: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetModelId(modelId int) {
    r.ModelId = &modelId
}
/* param modelName: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetModelName(modelName string) {
    r.ModelName = &modelName
}
/* param modelNameMatch: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetModelNameMatch(modelNameMatch bool) {
    r.ModelNameMatch = &modelNameMatch
}
/* param gitUrl: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetGitUrl(gitUrl string) {
    r.GitUrl = &gitUrl
}
/* param tableId: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetTableId(tableId int) {
    r.TableId = &tableId
}
/* param databaseName: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetDatabaseName(databaseName string) {
    r.DatabaseName = &databaseName
}
/* param marketId: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetMarketId(marketId int) {
    r.MarketId = &marketId
}
/* param marketCode: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetMarketCode(marketCode string) {
    r.MarketCode = &marketCode
}
/* param marketName: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetMarketName(marketName string) {
    r.MarketName = &marketName
}
/* param redirectType: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetRedirectType(redirectType string) {
    r.RedirectType = &redirectType
}
/* param tableName: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetTableName(tableName string) {
    r.TableName = &tableName
}
/* param tableNameMatch: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetTableNameMatch(tableNameMatch bool) {
    r.TableNameMatch = &tableNameMatch
}
/* param jobName: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetJobName(jobName string) {
    r.JobName = &jobName
}
/* param jobSystem: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetJobSystem(jobSystem string) {
    r.JobSystem = &jobSystem
}
/* param triggerType: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetTriggerType(triggerType string) {
    r.TriggerType = &triggerType
}
/* param triggerConfig: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetTriggerConfig(triggerConfig *shenhaiplatform.GpdjmcTriggerConfigDTO) {
    r.TriggerConfig = triggerConfig
}
/* param zipCommand: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetZipCommand(zipCommand string) {
    r.ZipCommand = &zipCommand
}
/* param zipFileName: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetZipFileName(zipFileName string) {
    r.ZipFileName = &zipFileName
}
/* param zipParams: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetZipParams(zipParams string) {
    r.ZipParams = &zipParams
}
/* param dependencies: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetDependencies(dependencies string) {
    r.Dependencies = &dependencies
}
/* param manager: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetManager(manager string) {
    r.Manager = &manager
}
/* param cooperator: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetCooperator(cooperator string) {
    r.Cooperator = &cooperator
}
/* param priority: 优先级，l1 - l4(Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetPriority(priority string) {
    r.Priority = &priority
}
/* param jobDesc: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetJobDesc(jobDesc string) {
    r.JobDesc = &jobDesc
}
/* param scriptType: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetScriptType(scriptType string) {
    r.ScriptType = &scriptType
}
/* param runScript: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetRunScript(runScript string) {
    r.RunScript = &runScript
}
/* param scriptContent: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetScriptContent(scriptContent []string) {
    r.ScriptContent = scriptContent
}
/* param cycle: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetCycle(cycle string) {
    r.Cycle = &cycle
}
/* param sequence: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetSequence(sequence string) {
    r.Sequence = &sequence
}
/* param lifeCycle: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetLifeCycle(lifeCycle string) {
    r.LifeCycle = &lifeCycle
}
/* param retry: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetRetry(retry bool) {
    r.Retry = &retry
}
/* param retryCount: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetRetryCount(retryCount int) {
    r.RetryCount = &retryCount
}
/* param retryInterval: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetRetryInterval(retryInterval int) {
    r.RetryInterval = &retryInterval
}
/* param notifyOccasion: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetNotifyOccasion(notifyOccasion string) {
    r.NotifyOccasion = &notifyOccasion
}
/* param notifyTime: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetNotifyTime(notifyTime string) {
    r.NotifyTime = &notifyTime
}
/* param notifyPattern: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetNotifyPattern(notifyPattern string) {
    r.NotifyPattern = &notifyPattern
}
/* param notifier: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetNotifier(notifier string) {
    r.Notifier = &notifier
}
/* param startRunTime: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetStartRunTime(startRunTime string) {
    r.StartRunTime = &startRunTime
}
/* param endRunTime: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetEndRunTime(endRunTime string) {
    r.EndRunTime = &endRunTime
}
/* param runTime: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetRunTime(runTime string) {
    r.RunTime = &runTime
}
/* param runDate: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetRunDate(runDate string) {
    r.RunDate = &runDate
}
/* param flowId: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetFlowId(flowId string) {
    r.FlowId = &flowId
}
/* param taskId: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetTaskId(taskId string) {
    r.TaskId = &taskId
}
/* param userAccount: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetUserAccount(userAccount string) {
    r.UserAccount = &userAccount
}
/* param userPwd: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetUserPwd(userPwd string) {
    r.UserPwd = &userPwd
}
/* param markIds: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetMarkIds(markIds string) {
    r.MarkIds = &markIds
}
/* param runTimeOut: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetRunTimeOut(runTimeOut int) {
    r.RunTimeOut = &runTimeOut
}
/* param scriptSourceType: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetScriptSourceType(scriptSourceType string) {
    r.ScriptSourceType = &scriptSourceType
}
/* param scriptTemplate: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetScriptTemplate(scriptTemplate string) {
    r.ScriptTemplate = &scriptTemplate
}
/* param dmrTableIds: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetDmrTableIds(dmrTableIds []int) {
    r.DmrTableIds = dmrTableIds
}
/* param dmrTables: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetDmrTables(dmrTables []shenhaiplatform.GpdjmcDmrModelDTO) {
    r.DmrTables = dmrTables
}
/* param gitFilesList: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetGitFilesList(gitFilesList []shenhaiplatform.GpdjmcGitFileDTO) {
    r.GitFilesList = gitFilesList
}
/* param isDeploy: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetIsDeploy(isDeploy bool) {
    r.IsDeploy = &isDeploy
}
/* param scriptPath: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetScriptPath(scriptPath string) {
    r.ScriptPath = &scriptPath
}
/* param scriptByte: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetScriptByte(scriptByte []string) {
    r.ScriptByte = scriptByte
}
/* param fileId: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetFileId(fileId int) {
    r.FileId = &fileId
}
/* param publishDesc: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetPublishDesc(publishDesc string) {
    r.PublishDesc = &publishDesc
}
/* param scriptInfo: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetScriptInfo(scriptInfo string) {
    r.ScriptInfo = &scriptInfo
}
/* param version: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetVersion(version int) {
    r.Version = &version
}
/* param channel: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetChannel(channel string) {
    r.Channel = &channel
}
/* param sequenceStartTime: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetSequenceStartTime(sequenceStartTime string) {
    r.SequenceStartTime = &sequenceStartTime
}
/* param sequenceEndTime: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetSequenceEndTime(sequenceEndTime string) {
    r.SequenceEndTime = &sequenceEndTime
}
/* param sequenceInterval: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetSequenceInterval(sequenceInterval int) {
    r.SequenceInterval = &sequenceInterval
}
/* param runParams: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetRunParams(runParams string) {
    r.RunParams = &runParams
}
/* param runQueue: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetRunQueue(runQueue string) {
    r.RunQueue = &runQueue
}
/* param sparkJarRunParams: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetSparkJarRunParams(sparkJarRunParams *shenhaiplatform.SparkJarRunParams) {
    r.SparkJarRunParams = sparkJarRunParams
}
/* param submitConf: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetSubmitConf(submitConf []shenhaiplatform.GpdjmcConfPairStringString) {
    r.SubmitConf = submitConf
}
/* param jobStatus: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetJobStatus(jobStatus int) {
    r.JobStatus = &jobStatus
}
/* param resourceCode: 计算资源组code(Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetResourceCode(resourceCode string) {
    r.ResourceCode = &resourceCode
}
/* param workspaceCode: 工作空间code(Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetWorkspaceCode(workspaceCode string) {
    r.WorkspaceCode = &workspaceCode
}
/* param cstJobName: 客户作业名称(Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetCstJobName(cstJobName string) {
    r.CstJobName = &cstJobName
}
/* param fromGravity: (Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetFromGravity(fromGravity bool) {
    r.FromGravity = &fromGravity
}
/* param processType: 处理类型(Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetProcessType(processType string) {
    r.ProcessType = &processType
}
/* param companyCode: 租户code(Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetCompanyCode(companyCode string) {
    r.CompanyCode = &companyCode
}
/* param windowStartTime: 窗口期开始时间(Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetWindowStartTime(windowStartTime string) {
    r.WindowStartTime = &windowStartTime
}
/* param windowEndTime: 窗口期结束时间(Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetWindowEndTime(windowEndTime string) {
    r.WindowEndTime = &windowEndTime
}
/* param scriptUrl: 脚本存储路径(Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetScriptUrl(scriptUrl string) {
    r.ScriptUrl = &scriptUrl
}
/* param resourceName: 计算资源组名称(Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetResourceName(resourceName string) {
    r.ResourceName = &resourceName
}
/* param datasourceId: 数据源ID，在一些要访问外部源的任务中，需要指定该数据源ID(Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetDatasourceId(datasourceId string) {
    r.DatasourceId = &datasourceId
}
/* param inputParams: 输入参数列表(Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetInputParams(inputParams []shenhaiplatform.GpdjmcInputParam) {
    r.InputParams = inputParams
}
/* param outputParams: 输出参数列表(Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetOutputParams(outputParams []shenhaiplatform.GpdjmcOutputParam) {
    r.OutputParams = outputParams
}
/* param loopParam: 循环任务参数(Optional) */
func (r *GravityParticleDubboJobManagerDeployJobRequest) SetLoopParam(loopParam *shenhaiplatform.GpdjmcLoopParam) {
    r.LoopParam = loopParam
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r GravityParticleDubboJobManagerDeployJobRequest) GetRegionId() string {
    return r.RegionId
}

type GravityParticleDubboJobManagerDeployJobResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result GravityParticleDubboJobManagerDeployJobResult `json:"result"`
}

type GravityParticleDubboJobManagerDeployJobResult struct {
    Success int `json:"success"`
    Code string `json:"code"`
    Msg string `json:"msg"`
    Result bool `json:"result"`
}