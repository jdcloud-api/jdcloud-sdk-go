// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type UranusWorkFlowDirFileDeleteRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 应用名称  */
    AppName string `json:"appName"`

    /* 文件类型 (Optional) */
    FileType *int `json:"fileType"`

    /* 是否spark-jar的管理模块,spark-jar操作hdfs通过字段区分 (Optional) */
    IsJarManagement *bool `json:"isJarManagement"`

    /* 文件Code (Optional) */
    FileCode *string `json:"fileCode"`

    /* 父节点 Code (Optional) */
    ParentCode *string `json:"parentCode"`

    /* 文件名称 (Optional) */
    FileName *string `json:"fileName"`

    /* 任务流Code  */
    FlowCode string `json:"flowCode"`

    /* 文件夹上传的时候文件的相对路径属性 (Optional) */
    RelativePath *string `json:"relativePath"`

    /* 是否上传完成 0 上传取消 1 上传完成 (Optional) */
    IsUpload *int `json:"isUpload"`
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 * param flowCode: 任务流Code (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUranusWorkFlowDirFileDeleteRequest(
    regionId string,
    appName string,
    flowCode string,
) *UranusWorkFlowDirFileDeleteRequest {

	return &UranusWorkFlowDirFileDeleteRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/apps/{appName}/uranusWorkFlowDirFileDelete",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        RegionId: regionId,
        AppName: appName,
        FlowCode: flowCode,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param appName: 应用名称 (Required)
 * param fileType: 文件类型 (Optional)
 * param isJarManagement: 是否spark-jar的管理模块,spark-jar操作hdfs通过字段区分 (Optional)
 * param fileCode: 文件Code (Optional)
 * param parentCode: 父节点 Code (Optional)
 * param fileName: 文件名称 (Optional)
 * param flowCode: 任务流Code (Required)
 * param relativePath: 文件夹上传的时候文件的相对路径属性 (Optional)
 * param isUpload: 是否上传完成 0 上传取消 1 上传完成 (Optional)
 */
func NewUranusWorkFlowDirFileDeleteRequestWithAllParams(
    regionId string,
    appName string,
    fileType *int,
    isJarManagement *bool,
    fileCode *string,
    parentCode *string,
    fileName *string,
    flowCode string,
    relativePath *string,
    isUpload *int,
) *UranusWorkFlowDirFileDeleteRequest {

    return &UranusWorkFlowDirFileDeleteRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusWorkFlowDirFileDelete",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        RegionId: regionId,
        AppName: appName,
        FileType: fileType,
        IsJarManagement: isJarManagement,
        FileCode: fileCode,
        ParentCode: parentCode,
        FileName: fileName,
        FlowCode: flowCode,
        RelativePath: relativePath,
        IsUpload: isUpload,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUranusWorkFlowDirFileDeleteRequestWithoutParam() *UranusWorkFlowDirFileDeleteRequest {

    return &UranusWorkFlowDirFileDeleteRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/apps/{appName}/uranusWorkFlowDirFileDelete",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *UranusWorkFlowDirFileDeleteRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param appName: 应用名称(Required) */
func (r *UranusWorkFlowDirFileDeleteRequest) SetAppName(appName string) {
    r.AppName = appName
}
/* param fileType: 文件类型(Optional) */
func (r *UranusWorkFlowDirFileDeleteRequest) SetFileType(fileType int) {
    r.FileType = &fileType
}
/* param isJarManagement: 是否spark-jar的管理模块,spark-jar操作hdfs通过字段区分(Optional) */
func (r *UranusWorkFlowDirFileDeleteRequest) SetIsJarManagement(isJarManagement bool) {
    r.IsJarManagement = &isJarManagement
}
/* param fileCode: 文件Code(Optional) */
func (r *UranusWorkFlowDirFileDeleteRequest) SetFileCode(fileCode string) {
    r.FileCode = &fileCode
}
/* param parentCode: 父节点 Code(Optional) */
func (r *UranusWorkFlowDirFileDeleteRequest) SetParentCode(parentCode string) {
    r.ParentCode = &parentCode
}
/* param fileName: 文件名称(Optional) */
func (r *UranusWorkFlowDirFileDeleteRequest) SetFileName(fileName string) {
    r.FileName = &fileName
}
/* param flowCode: 任务流Code(Required) */
func (r *UranusWorkFlowDirFileDeleteRequest) SetFlowCode(flowCode string) {
    r.FlowCode = flowCode
}
/* param relativePath: 文件夹上传的时候文件的相对路径属性(Optional) */
func (r *UranusWorkFlowDirFileDeleteRequest) SetRelativePath(relativePath string) {
    r.RelativePath = &relativePath
}
/* param isUpload: 是否上传完成 0 上传取消 1 上传完成(Optional) */
func (r *UranusWorkFlowDirFileDeleteRequest) SetIsUpload(isUpload int) {
    r.IsUpload = &isUpload
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UranusWorkFlowDirFileDeleteRequest) GetRegionId() string {
    return r.RegionId
}

type UranusWorkFlowDirFileDeleteResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UranusWorkFlowDirFileDeleteResult `json:"result"`
}

type UranusWorkFlowDirFileDeleteResult struct {
    Code string `json:"code"`
    ErrorTitle string `json:"errorTitle"`
    ErrorMsg string `json:"errorMsg"`
    Result interface{} `json:"result"`
    SubCode string `json:"subCode"`
    Successed bool `json:"successed"`
}