// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    shenhaiplatform "github.com/jdcloud-api/jdcloud-sdk-go/services/shenhaiplatform/apis"
    "encoding/json"
    "errors"
)

type ShenhaiplatformClient struct {
    core.JDCloudClient
}

func NewShenhaiplatformClient(credential *core.Credential) *ShenhaiplatformClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("shenhaiplatform.jdcloud-api.com")

    return &ShenhaiplatformClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "shenhaiplatform",
            Revision:    "1.0.0",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *ShenhaiplatformClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *ShenhaiplatformClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *ShenhaiplatformClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 将发布物打包 */
func (c *ShenhaiplatformClient) PackagePublishObj(request *shenhaiplatform.PackagePublishObjRequest) (*shenhaiplatform.PackagePublishObjResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.PackagePublishObjResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 停止查询 */
func (c *ShenhaiplatformClient) UranusExtraRunnerStop(request *shenhaiplatform.UranusExtraRunnerStopRequest) (*shenhaiplatform.UranusExtraRunnerStopResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusExtraRunnerStopResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务单节点-新建 */
func (c *ShenhaiplatformClient) UranusTaskNodeSave(request *shenhaiplatform.UranusTaskNodeSaveRequest) (*shenhaiplatform.UranusTaskNodeSaveResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskNodeSaveResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据租户/项目空间/数据库名称模糊查询表列表，最多返回1000条 */
func (c *ShenhaiplatformClient) JtlasWarehouseQueryTablesByDatabaseName(request *shenhaiplatform.JtlasWarehouseQueryTablesByDatabaseNameRequest) (*shenhaiplatform.JtlasWarehouseQueryTablesByDatabaseNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasWarehouseQueryTablesByDatabaseNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 重跑作业 */
func (c *ShenhaiplatformClient) ManageHubGravityRerun(request *shenhaiplatform.ManageHubGravityRerunRequest) (*shenhaiplatform.ManageHubGravityRerunResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubGravityRerunResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 分页查询发布包列表 */
func (c *ShenhaiplatformClient) DescribePublishPkgs(request *shenhaiplatform.DescribePublishPkgsRequest) (*shenhaiplatform.DescribePublishPkgsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.DescribePublishPkgsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 一键重跑任务详情 */
func (c *ShenhaiplatformClient) ManageHubGravityOneClickRerunTasks(request *shenhaiplatform.ManageHubGravityOneClickRerunTasksRequest) (*shenhaiplatform.ManageHubGravityOneClickRerunTasksResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubGravityOneClickRerunTasksResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据用户名称模糊查询当前工作空间下的用户 */
func (c *ShenhaiplatformClient) WorkspacegetUcUserByUserName(request *shenhaiplatform.WorkspacegetUcUserByUserNameRequest) (*shenhaiplatform.WorkspacegetUcUserByUserNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspacegetUcUserByUserNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 分页查询子任务列表 */
func (c *ShenhaiplatformClient) ManageHubGravityJobChild(request *shenhaiplatform.ManageHubGravityJobChildRequest) (*shenhaiplatform.ManageHubGravityJobChildResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubGravityJobChildResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 列出所有根目录(只包含根目录) */
func (c *ShenhaiplatformClient) UranusResourceListRoot(request *shenhaiplatform.UranusResourceListRootRequest) (*shenhaiplatform.UranusResourceListRootResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusResourceListRootResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取一个新的对话id */
func (c *ShenhaiplatformClient) CopilotChatNew(request *shenhaiplatform.CopilotChatNewRequest) (*shenhaiplatform.CopilotChatNewResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.CopilotChatNewResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除函数分类目录 */
func (c *ShenhaiplatformClient) UranusFunctionDeleteCatalog(request *shenhaiplatform.UranusFunctionDeleteCatalogRequest) (*shenhaiplatform.UranusFunctionDeleteCatalogResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusFunctionDeleteCatalogResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 脚本内容更新 */
func (c *ShenhaiplatformClient) UranusScriptSaveContent(request *shenhaiplatform.UranusScriptSaveContentRequest) (*shenhaiplatform.UranusScriptSaveContentResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusScriptSaveContentResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 校验作业规则 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerValidateJobRules(request *shenhaiplatform.GravityParticleDubboJobManagerValidateJobRulesRequest) (*shenhaiplatform.GravityParticleDubboJobManagerValidateJobRulesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerValidateJobRulesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取作业脚本扩展名信息 */
func (c *ShenhaiplatformClient) GravityParticleJobGetScriptExtensions(request *shenhaiplatform.GravityParticleJobGetScriptExtensionsRequest) (*shenhaiplatform.GravityParticleJobGetScriptExtensionsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobGetScriptExtensionsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取资源简要信息（根据资源codes） */
func (c *ShenhaiplatformClient) UranusResourceGetBriefByCodes(request *shenhaiplatform.UranusResourceGetBriefByCodesRequest) (*shenhaiplatform.UranusResourceGetBriefByCodesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusResourceGetBriefByCodesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 强制运行作业实例 */
func (c *ShenhaiplatformClient) GravityParticleJobscheForceRunJobInst(request *shenhaiplatform.GravityParticleJobscheForceRunJobInstRequest) (*shenhaiplatform.GravityParticleJobscheForceRunJobInstResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobscheForceRunJobInstResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 执行脚本 */
func (c *ShenhaiplatformClient) UranusScriptStarters(request *shenhaiplatform.UranusScriptStartersRequest) (*shenhaiplatform.UranusScriptStartersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusScriptStartersResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 首页调用-获取所有作业信息 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobListJob(request *shenhaiplatform.GravityParticleParticleJobListJobRequest) (*shenhaiplatform.GravityParticleParticleJobListJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobListJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 统计作业耗时排名 */
func (c *ShenhaiplatformClient) GravityParticleJobMonitorJobSpendTimeRanking(request *shenhaiplatform.GravityParticleJobMonitorJobSpendTimeRankingRequest) (*shenhaiplatform.GravityParticleJobMonitorJobSpendTimeRankingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobMonitorJobSpendTimeRankingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据用户名查询用户权限表列表，最多返回1000条 */
func (c *ShenhaiplatformClient) JtlasWarehouseQueryTablesUnderSpecifiedUserWithPrivileges(request *shenhaiplatform.JtlasWarehouseQueryTablesUnderSpecifiedUserWithPrivilegesRequest) (*shenhaiplatform.JtlasWarehouseQueryTablesUnderSpecifiedUserWithPrivilegesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasWarehouseQueryTablesUnderSpecifiedUserWithPrivilegesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获得脚本运行记录详情 */
func (c *ShenhaiplatformClient) UranusScriptRunLogDetail(request *shenhaiplatform.UranusScriptRunLogDetailRequest) (*shenhaiplatform.UranusScriptRunLogDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusScriptRunLogDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取查询结果文件列表 */
func (c *ShenhaiplatformClient) UranusExtraRunnerResultList(request *shenhaiplatform.UranusExtraRunnerResultListRequest) (*shenhaiplatform.UranusExtraRunnerResultListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusExtraRunnerResultListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除资源 */
func (c *ShenhaiplatformClient) UranusResourceDelete(request *shenhaiplatform.UranusResourceDeleteRequest) (*shenhaiplatform.UranusResourceDeleteResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusResourceDeleteResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询作业类型清单 */
func (c *ShenhaiplatformClient) GravityParticleJobMonitorJobTypeList(request *shenhaiplatform.GravityParticleJobMonitorJobTypeListRequest) (*shenhaiplatform.GravityParticleJobMonitorJobTypeListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobMonitorJobTypeListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 列出分区存储详情 */
func (c *ShenhaiplatformClient) ManageHubStoragePartitionList(request *shenhaiplatform.ManageHubStoragePartitionListRequest) (*shenhaiplatform.ManageHubStoragePartitionListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubStoragePartitionListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据对话中的一条发言，推荐可能的prompt */
func (c *ShenhaiplatformClient) CopilotUtteranceRecommend(request *shenhaiplatform.CopilotUtteranceRecommendRequest) (*shenhaiplatform.CopilotUtteranceRecommendResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.CopilotUtteranceRecommendResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 判断当前租户的产品是否已过期 */
func (c *ShenhaiplatformClient) WorkspaceExpiredInfo(request *shenhaiplatform.WorkspaceExpiredInfoRequest) (*shenhaiplatform.WorkspaceExpiredInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceExpiredInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 订阅/收藏表 */
func (c *ShenhaiplatformClient) JtlasSubscribeTable(request *shenhaiplatform.JtlasSubscribeTableRequest) (*shenhaiplatform.JtlasSubscribeTableResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasSubscribeTableResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 验证当前用户是否有权限访问 */
func (c *ShenhaiplatformClient) CopilotVerify(request *shenhaiplatform.CopilotVerifyRequest) (*shenhaiplatform.CopilotVerifyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.CopilotVerifyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 分页查询父任务列表 */
func (c *ShenhaiplatformClient) ManageHubGravityJobParent(request *shenhaiplatform.ManageHubGravityJobParentRequest) (*shenhaiplatform.ManageHubGravityJobParentResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubGravityJobParentResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 分页查询任务操作历史 */
func (c *ShenhaiplatformClient) ManageHubGravityJobOperateHistory(request *shenhaiplatform.ManageHubGravityJobOperateHistoryRequest) (*shenhaiplatform.ManageHubGravityJobOperateHistoryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubGravityJobOperateHistoryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建新的目录 */
func (c *ShenhaiplatformClient) UranusCatalogSave(request *shenhaiplatform.UranusCatalogSaveRequest) (*shenhaiplatform.UranusCatalogSaveResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusCatalogSaveResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询表血缘 */
func (c *ShenhaiplatformClient) JtlasSearchTableLineage(request *shenhaiplatform.JtlasSearchTableLineageRequest) (*shenhaiplatform.JtlasSearchTableLineageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasSearchTableLineageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 发布发布包 */
func (c *ShenhaiplatformClient) PublishPkg(request *shenhaiplatform.PublishPkgRequest) (*shenhaiplatform.PublishPkgResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.PublishPkgResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 统计失败作业状态数量 */
func (c *ShenhaiplatformClient) GravityParticleJobMonitorJobFailCount(request *shenhaiplatform.GravityParticleJobMonitorJobFailCountRequest) (*shenhaiplatform.GravityParticleJobMonitorJobFailCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobMonitorJobFailCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务预发布 */
func (c *ShenhaiplatformClient) UranusTaskInfoPrePublish(request *shenhaiplatform.UranusTaskInfoPrePublishRequest) (*shenhaiplatform.UranusTaskInfoPrePublishResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskInfoPrePublishResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 解析作业完成信息进行作业实例运行状态更新 */
func (c *ShenhaiplatformClient) GravityParticleJobscheProcessJobExeRst(request *shenhaiplatform.GravityParticleJobscheProcessJobExeRstRequest) (*shenhaiplatform.GravityParticleJobscheProcessJobExeRstResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobscheProcessJobExeRstResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据脚本类型获取模板引擎下载地址 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerGetEngineTemplate(request *shenhaiplatform.GravityParticleDubboJobManagerGetEngineTemplateRequest) (*shenhaiplatform.GravityParticleDubboJobManagerGetEngineTemplateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerGetEngineTemplateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 发布资源 */
func (c *ShenhaiplatformClient) UranusResourcePublish(request *shenhaiplatform.UranusResourcePublishRequest) (*shenhaiplatform.UranusResourcePublishResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusResourcePublishResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 统计作业状态数量 */
func (c *ShenhaiplatformClient) GravityParticleJobMonitorJobStatusCount(request *shenhaiplatform.GravityParticleJobMonitorJobStatusCountRequest) (*shenhaiplatform.GravityParticleJobMonitorJobStatusCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobMonitorJobStatusCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取当前登录用户的所有角色 */
func (c *ShenhaiplatformClient) WorkspaceGetUserRoles(request *shenhaiplatform.WorkspaceGetUserRolesRequest) (*shenhaiplatform.WorkspaceGetUserRolesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceGetUserRolesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 表授权接口 */
func (c *ShenhaiplatformClient) JtlasDestroy(request *shenhaiplatform.JtlasDestroyRequest) (*shenhaiplatform.JtlasDestroyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasDestroyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 列出根目录下所有资源 */
func (c *ShenhaiplatformClient) UranusResourceListRootResources(request *shenhaiplatform.UranusResourceListRootResourcesRequest) (*shenhaiplatform.UranusResourceListRootResourcesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusResourceListRootResourcesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 发布，保存发布，更新发布等等 */
func (c *ShenhaiplatformClient) UranusTableAlterSqlView(request *shenhaiplatform.UranusTableAlterSqlViewRequest) (*shenhaiplatform.UranusTableAlterSqlViewResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTableAlterSqlViewResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 校验当前用户是否是该工作空间的管理员 */
func (c *ShenhaiplatformClient) WorkspaceVerifyUserIsManager(request *shenhaiplatform.WorkspaceVerifyUserIsManagerRequest) (*shenhaiplatform.WorkspaceVerifyUserIsManagerResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceVerifyUserIsManagerResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 统计作业数量 */
func (c *ShenhaiplatformClient) GravityParticleJobMonitorJobCountInfo(request *shenhaiplatform.GravityParticleJobMonitorJobCountInfoRequest) (*shenhaiplatform.GravityParticleJobMonitorJobCountInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobMonitorJobCountInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 数据上传 */
func (c *ShenhaiplatformClient) UranusTableDataLoad(request *shenhaiplatform.UranusTableDataLoadRequest) (*shenhaiplatform.UranusTableDataLoadResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTableDataLoadResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 终止数据上传任务 */
func (c *ShenhaiplatformClient) UranusDataLoadKill(request *shenhaiplatform.UranusDataLoadKillRequest) (*shenhaiplatform.UranusDataLoadKillResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusDataLoadKillResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 节点发布状态public_status 节点发布变更类型 public_chage_type */
func (c *ShenhaiplatformClient) QueryList(request *shenhaiplatform.QueryListRequest) (*shenhaiplatform.QueryListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.QueryListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务关系页面，作业详情 */
func (c *ShenhaiplatformClient) GravityParticleJobDepDetail(request *shenhaiplatform.GravityParticleJobDepDetailRequest) (*shenhaiplatform.GravityParticleJobDepDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobDepDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 统计不成功作业的数量 */
func (c *ShenhaiplatformClient) GravityParticleJobMonitorJobUnsuccessRanking(request *shenhaiplatform.GravityParticleJobMonitorJobUnsuccessRankingRequest) (*shenhaiplatform.GravityParticleJobMonitorJobUnsuccessRankingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobMonitorJobUnsuccessRankingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询授权表 */
func (c *ShenhaiplatformClient) UranusTableLike(request *shenhaiplatform.UranusTableLikeRequest) (*shenhaiplatform.UranusTableLikeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTableLikeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 停止发言，用于终止模型回复生成 */
func (c *ShenhaiplatformClient) CopilotUtteranceStop(request *shenhaiplatform.CopilotUtteranceStopRequest) (*shenhaiplatform.CopilotUtteranceStopResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.CopilotUtteranceStopResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* DDL语句解析 */
func (c *ShenhaiplatformClient) UranusTableDdlAnalyze(request *shenhaiplatform.UranusTableDdlAnalyzeRequest) (*shenhaiplatform.UranusTableDdlAnalyzeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTableDdlAnalyzeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除函数 */
func (c *ShenhaiplatformClient) UranusFunctionDelete(request *shenhaiplatform.UranusFunctionDeleteRequest) (*shenhaiplatform.UranusFunctionDeleteResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusFunctionDeleteResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 一键重跑 */
func (c *ShenhaiplatformClient) ManageHubGravityOneClickRerun(request *shenhaiplatform.ManageHubGravityOneClickRerunRequest) (*shenhaiplatform.ManageHubGravityOneClickRerunResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubGravityOneClickRerunResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询补数跟踪记录 */
func (c *ShenhaiplatformClient) GravityParticleJobHisRunListTaskLog(request *shenhaiplatform.GravityParticleJobHisRunListTaskLogRequest) (*shenhaiplatform.GravityParticleJobHisRunListTaskLogResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobHisRunListTaskLogResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 发布作业 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerDeployJob(request *shenhaiplatform.GravityParticleDubboJobManagerDeployJobRequest) (*shenhaiplatform.GravityParticleDubboJobManagerDeployJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerDeployJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务单节点-上下线更新/撤销删除 */
func (c *ShenhaiplatformClient) UranusTaskUpdateStatus(request *shenhaiplatform.UranusTaskUpdateStatusRequest) (*shenhaiplatform.UranusTaskUpdateStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskUpdateStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 模糊查询作业信息 */
func (c *ShenhaiplatformClient) UranusTaskInfoFuzzyListJobName(request *shenhaiplatform.UranusTaskInfoFuzzyListJobNameRequest) (*shenhaiplatform.UranusTaskInfoFuzzyListJobNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskInfoFuzzyListJobNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据脚本内容解析父任务依赖 */
func (c *ShenhaiplatformClient) UranusTaskInfoAnalysisDependJob(request *shenhaiplatform.UranusTaskInfoAnalysisDependJobRequest) (*shenhaiplatform.UranusTaskInfoAnalysisDependJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskInfoAnalysisDependJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务单节点-更新作业名称 */
func (c *ShenhaiplatformClient) UranusTaskNodeUpdateJobName(request *shenhaiplatform.UranusTaskNodeUpdateJobNameRequest) (*shenhaiplatform.UranusTaskNodeUpdateJobNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskNodeUpdateJobNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 目录下工作流列表 */
func (c *ShenhaiplatformClient) UranusTaskFlowQueryList(request *shenhaiplatform.UranusTaskFlowQueryListRequest) (*shenhaiplatform.UranusTaskFlowQueryListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskFlowQueryListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务单节点-更新节点位置信息 */
func (c *ShenhaiplatformClient) UranusTaskNodeUpdateNodeData(request *shenhaiplatform.UranusTaskNodeUpdateNodeDataRequest) (*shenhaiplatform.UranusTaskNodeUpdateNodeDataResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskNodeUpdateNodeDataResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 每日存储增量 */
func (c *ShenhaiplatformClient) ManageHubStorageIncrement(request *shenhaiplatform.ManageHubStorageIncrementRequest) (*shenhaiplatform.ManageHubStorageIncrementResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubStorageIncrementResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 编辑作业信息 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerDeployJobEdit(request *shenhaiplatform.GravityParticleDubboJobManagerDeployJobEditRequest) (*shenhaiplatform.GravityParticleDubboJobManagerDeployJobEditResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerDeployJobEditResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取工作空间基本信息 */
func (c *ShenhaiplatformClient) WorkspaceGetInfo(request *shenhaiplatform.WorkspaceGetInfoRequest) (*shenhaiplatform.WorkspaceGetInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceGetInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取资源状态 */
func (c *ShenhaiplatformClient) UranusResourceStatus(request *shenhaiplatform.UranusResourceStatusRequest) (*shenhaiplatform.UranusResourceStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusResourceStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 校验文件是否存在 */
func (c *ShenhaiplatformClient) UranusWorkFlowDirFileExists(request *shenhaiplatform.UranusWorkFlowDirFileExistsRequest) (*shenhaiplatform.UranusWorkFlowDirFileExistsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusWorkFlowDirFileExistsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 脚本参数保存/更新 */
func (c *ShenhaiplatformClient) UranusScriptParams(request *shenhaiplatform.UranusScriptParamsRequest) (*shenhaiplatform.UranusScriptParamsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusScriptParamsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 执行查询 */
func (c *ShenhaiplatformClient) UranusExtraRunnerStart(request *shenhaiplatform.UranusExtraRunnerStartRequest) (*shenhaiplatform.UranusExtraRunnerStartResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusExtraRunnerStartResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 保存作业脚本信息 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerSaveJobScript(request *shenhaiplatform.GravityParticleDubboJobManagerSaveJobScriptRequest) (*shenhaiplatform.GravityParticleDubboJobManagerSaveJobScriptResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerSaveJobScriptResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新资源 */
func (c *ShenhaiplatformClient) UranusResourceUpdate(request *shenhaiplatform.UranusResourceUpdateRequest) (*shenhaiplatform.UranusResourceUpdateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusResourceUpdateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取工作空间列表 */
func (c *ShenhaiplatformClient) WorkspaceGetList(request *shenhaiplatform.WorkspaceGetListRequest) (*shenhaiplatform.WorkspaceGetListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceGetListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 校验作业名称是否存在，true表示不存在，可以新建，false表示已经存在 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerGetMgrJobByJobName(request *shenhaiplatform.GravityParticleDubboJobManagerGetMgrJobByJobNameRequest) (*shenhaiplatform.GravityParticleDubboJobManagerGetMgrJobByJobNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerGetMgrJobByJobNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 分页查询发布对象列表 */
func (c *ShenhaiplatformClient) DescribePublishObjs(request *shenhaiplatform.DescribePublishObjsRequest) (*shenhaiplatform.DescribePublishObjsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.DescribePublishObjsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务详情 */
func (c *ShenhaiplatformClient) UranusTaskInfoDetail(request *shenhaiplatform.UranusTaskInfoDetailRequest) (*shenhaiplatform.UranusTaskInfoDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskInfoDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取工作空间的成员列表 */
func (c *ShenhaiplatformClient) WorkspaceGetMembers(request *shenhaiplatform.WorkspaceGetMembersRequest) (*shenhaiplatform.WorkspaceGetMembersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceGetMembersResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询字段血缘 */
func (c *ShenhaiplatformClient) JtlasSearchColumnLineage(request *shenhaiplatform.JtlasSearchColumnLineageRequest) (*shenhaiplatform.JtlasSearchColumnLineageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasSearchColumnLineageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务节点保存-多节点关系 */
func (c *ShenhaiplatformClient) UranusTaskAddRelation(request *shenhaiplatform.UranusTaskAddRelationRequest) (*shenhaiplatform.UranusTaskAddRelationResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskAddRelationResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询函数接口 */
func (c *ShenhaiplatformClient) UranusUdfListFunction(request *shenhaiplatform.UranusUdfListFunctionRequest) (*shenhaiplatform.UranusUdfListFunctionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusUdfListFunctionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 重置作业实例的状态为制定状态 */
func (c *ShenhaiplatformClient) GravityParticleJobscheResetJobInstStatus(request *shenhaiplatform.GravityParticleJobscheResetJobInstStatusRequest) (*shenhaiplatform.GravityParticleJobscheResetJobInstStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobscheResetJobInstStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量强制作业运行 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobSchedForceJobBatch(request *shenhaiplatform.GravityParticleParticleJobSchedForceJobBatchRequest) (*shenhaiplatform.GravityParticleParticleJobSchedForceJobBatchResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobSchedForceJobBatchResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 脚本运行列表 */
func (c *ShenhaiplatformClient) UranusScriptRunLogList(request *shenhaiplatform.UranusScriptRunLogListRequest) (*shenhaiplatform.UranusScriptRunLogListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusScriptRunLogListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量接口上线 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobSchedReuseJob(request *shenhaiplatform.GravityParticleParticleJobSchedReuseJobRequest) (*shenhaiplatform.GravityParticleParticleJobSchedReuseJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobSchedReuseJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 分页查询作业列表 */
func (c *ShenhaiplatformClient) ManageHubGravityListJob(request *shenhaiplatform.ManageHubGravityListJobRequest) (*shenhaiplatform.ManageHubGravityListJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubGravityListJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 计算作业详情 */
func (c *ShenhaiplatformClient) GravityParticleParticleModelCalcCalcJobDetail(request *shenhaiplatform.GravityParticleParticleModelCalcCalcJobDetailRequest) (*shenhaiplatform.GravityParticleParticleModelCalcCalcJobDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleModelCalcCalcJobDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 发布对象信息细节查看 */
func (c *ShenhaiplatformClient) DescribePublishObj(request *shenhaiplatform.DescribePublishObjRequest) (*shenhaiplatform.DescribePublishObjResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.DescribePublishObjResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 统计不同类型作业的数量 */
func (c *ShenhaiplatformClient) GravityParticleJobMonitorJobTypeCount(request *shenhaiplatform.GravityParticleJobMonitorJobTypeCountRequest) (*shenhaiplatform.GravityParticleJobMonitorJobTypeCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobMonitorJobTypeCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据作业类型，校验脚本文件扩展名是否合法 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerVerifyScriptFileList(request *shenhaiplatform.GravityParticleDubboJobManagerVerifyScriptFileListRequest) (*shenhaiplatform.GravityParticleDubboJobManagerVerifyScriptFileListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerVerifyScriptFileListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取作业触发条件信息信息 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobGetConditionInfo(request *shenhaiplatform.GravityParticleParticleJobGetConditionInfoRequest) (*shenhaiplatform.GravityParticleParticleJobGetConditionInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobGetConditionInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改目录属性 */
func (c *ShenhaiplatformClient) UranusCatalogUpdate(request *shenhaiplatform.UranusCatalogUpdateRequest) (*shenhaiplatform.UranusCatalogUpdateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusCatalogUpdateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 重新上线接口 根据文件id和版本号 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerGetMgrJobByJobe(request *shenhaiplatform.GravityParticleDubboJobManagerGetMgrJobByJobeRequest) (*shenhaiplatform.GravityParticleDubboJobManagerGetMgrJobByJobeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerGetMgrJobByJobeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询作业类型信息 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobGetJobTypeInfo(request *shenhaiplatform.GravityParticleParticleJobGetJobTypeInfoRequest) (*shenhaiplatform.GravityParticleParticleJobGetJobTypeInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobGetJobTypeInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询作业详细信息 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobGetBasicInfo(request *shenhaiplatform.GravityParticleParticleJobGetBasicInfoRequest) (*shenhaiplatform.GravityParticleParticleJobGetBasicInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobGetBasicInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新作业的可用状态 */
func (c *ShenhaiplatformClient) GravityParticleJobscheSetJobEnableFlag(request *shenhaiplatform.GravityParticleJobscheSetJobEnableFlagRequest) (*shenhaiplatform.GravityParticleJobscheSetJobEnableFlagResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobscheSetJobEnableFlagResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 强制运行作业实例，允许触发作业失败，用于补数，商城触发 */
func (c *ShenhaiplatformClient) GravityParticleJobscheReRunJobInst(request *shenhaiplatform.GravityParticleJobscheReRunJobInstRequest) (*shenhaiplatform.GravityParticleJobscheReRunJobInstResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobscheReRunJobInstResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 检索表权限 */
func (c *ShenhaiplatformClient) JtlasPageSearchTablePrivileges(request *shenhaiplatform.JtlasPageSearchTablePrivilegesRequest) (*shenhaiplatform.JtlasPageSearchTablePrivilegesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasPageSearchTablePrivilegesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 编辑工作空间 */
func (c *ShenhaiplatformClient) WorkspaceSaveInfo(request *shenhaiplatform.WorkspaceSaveInfoRequest) (*shenhaiplatform.WorkspaceSaveInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceSaveInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据空间code获取jar包目录树 */
func (c *ShenhaiplatformClient) UranusQueryJarManagementTree(request *shenhaiplatform.UranusQueryJarManagementTreeRequest) (*shenhaiplatform.UranusQueryJarManagementTreeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusQueryJarManagementTreeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 工作空间开通接口 */
func (c *ShenhaiplatformClient) WorkspaceCreatProduct(request *shenhaiplatform.WorkspaceCreatProductRequest) (*shenhaiplatform.WorkspaceCreatProductResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceCreatProductResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 分隔符信息 */
func (c *ShenhaiplatformClient) UranusTaskElementDelimiters(request *shenhaiplatform.UranusTaskElementDelimitersRequest) (*shenhaiplatform.UranusTaskElementDelimitersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskElementDelimitersResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取作业分页日志 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobSchedGetRunLog(request *shenhaiplatform.GravityParticleParticleJobSchedGetRunLogRequest) (*shenhaiplatform.GravityParticleParticleJobSchedGetRunLogResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobSchedGetRunLogResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 使用线上配置 */
func (c *ShenhaiplatformClient) UranusTaskInfoOnLineConfig(request *shenhaiplatform.UranusTaskInfoOnLineConfigRequest) (*shenhaiplatform.UranusTaskInfoOnLineConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskInfoOnLineConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 作业信息更新 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobSchedUpdateSchedJob(request *shenhaiplatform.GravityParticleParticleJobSchedUpdateSchedJobRequest) (*shenhaiplatform.GravityParticleParticleJobSchedUpdateSchedJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobSchedUpdateSchedJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 工作流收藏和取消收藏 */
func (c *ShenhaiplatformClient) UranusTaskFlowCollection(request *shenhaiplatform.UranusTaskFlowCollectionRequest) (*shenhaiplatform.UranusTaskFlowCollectionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskFlowCollectionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 撤销发布对象 */
func (c *ShenhaiplatformClient) DeletePublishObj(request *shenhaiplatform.DeletePublishObjRequest) (*shenhaiplatform.DeletePublishObjResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.DeletePublishObjResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据作业id获取脚本信息 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerGetJobScript(request *shenhaiplatform.GravityParticleDubboJobManagerGetJobScriptRequest) (*shenhaiplatform.GravityParticleDubboJobManagerGetJobScriptResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerGetJobScriptResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据任务名字模糊查询 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerSearchByJobName(request *shenhaiplatform.GravityParticleDubboJobManagerSearchByJobNameRequest) (*shenhaiplatform.GravityParticleDubboJobManagerSearchByJobNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerSearchByJobNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 分页查询作业数据日期状态列表 */
func (c *ShenhaiplatformClient) ManageHubGravityListTxDateStatus(request *shenhaiplatform.ManageHubGravityListTxDateStatusRequest) (*shenhaiplatform.ManageHubGravityListTxDateStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubGravityListTxDateStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 将作业按趋势进行数据量的统计 */
func (c *ShenhaiplatformClient) GravityParticleJobMonitorJobDispatchTrend(request *shenhaiplatform.GravityParticleJobMonitorJobDispatchTrendRequest) (*shenhaiplatform.GravityParticleJobMonitorJobDispatchTrendResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobMonitorJobDispatchTrendResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 工作流更新 */
func (c *ShenhaiplatformClient) UranusTaskFlowUpdate(request *shenhaiplatform.UranusTaskFlowUpdateRequest) (*shenhaiplatform.UranusTaskFlowUpdateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskFlowUpdateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 工作台作业统计接口 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobMonitorJobStatusCount(request *shenhaiplatform.GravityParticleParticleJobMonitorJobStatusCountRequest) (*shenhaiplatform.GravityParticleParticleJobMonitorJobStatusCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobMonitorJobStatusCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据作业id删除作业脚本 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerDeleteJobScript(request *shenhaiplatform.GravityParticleDubboJobManagerDeleteJobScriptRequest) (*shenhaiplatform.GravityParticleDubboJobManagerDeleteJobScriptResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerDeleteJobScriptResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 工作流详情 */
func (c *ShenhaiplatformClient) UranusTaskFlowDetail(request *shenhaiplatform.UranusTaskFlowDetailRequest) (*shenhaiplatform.UranusTaskFlowDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskFlowDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 判断目录/函数是否存在 */
func (c *ShenhaiplatformClient) UranusFunctionCheck(request *shenhaiplatform.UranusFunctionCheckRequest) (*shenhaiplatform.UranusFunctionCheckResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusFunctionCheckResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 判断工作空间是否开通过工作空间产品接口 */
func (c *ShenhaiplatformClient) WorkspaceHadCreatWsProduct(request *shenhaiplatform.WorkspaceHadCreatWsProductRequest) (*shenhaiplatform.WorkspaceHadCreatWsProductResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceHadCreatWsProductResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 工作流-发布一 */
func (c *ShenhaiplatformClient) UranusTaskPublishOne(request *shenhaiplatform.UranusTaskPublishOneRequest) (*shenhaiplatform.UranusTaskPublishOneResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskPublishOneResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获得脚本详情 */
func (c *ShenhaiplatformClient) UranusScriptQueries(request *shenhaiplatform.UranusScriptQueriesRequest) (*shenhaiplatform.UranusScriptQueriesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusScriptQueriesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除文件 */
func (c *ShenhaiplatformClient) UranusWorkFlowDirFileDelete(request *shenhaiplatform.UranusWorkFlowDirFileDeleteRequest) (*shenhaiplatform.UranusWorkFlowDirFileDeleteResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusWorkFlowDirFileDeleteResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据作业名模糊查询或JobQueryDTO查询 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerSearchSchedJob(request *shenhaiplatform.GravityParticleDubboJobManagerSearchSchedJobRequest) (*shenhaiplatform.GravityParticleDubboJobManagerSearchSchedJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerSearchSchedJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据租户/项目空间/表名称查询表详情 */
func (c *ShenhaiplatformClient) JtlasWarehouseTableDetail(request *shenhaiplatform.JtlasWarehouseTableDetailRequest) (*shenhaiplatform.JtlasWarehouseTableDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasWarehouseTableDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除工作空间成员 */
func (c *ShenhaiplatformClient) WorkspaceDeleteMember(request *shenhaiplatform.WorkspaceDeleteMemberRequest) (*shenhaiplatform.WorkspaceDeleteMemberResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceDeleteMemberResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取资源下载链接 */
func (c *ShenhaiplatformClient) UranusResourceDownloadUrl(request *shenhaiplatform.UranusResourceDownloadUrlRequest) (*shenhaiplatform.UranusResourceDownloadUrlResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusResourceDownloadUrlResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取数据上传任务日志 */
func (c *ShenhaiplatformClient) UranusDataLoadLog(request *shenhaiplatform.UranusDataLoadLogRequest) (*shenhaiplatform.UranusDataLoadLogResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusDataLoadLogResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取资源简要信息(前缀匹配资源名称) */
func (c *ShenhaiplatformClient) UranusResourceGetDetailByPrefix(request *shenhaiplatform.UranusResourceGetDetailByPrefixRequest) (*shenhaiplatform.UranusResourceGetDetailByPrefixResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusResourceGetDetailByPrefixResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取具体表的建表语句 */
func (c *ShenhaiplatformClient) UranusTableDDL(request *shenhaiplatform.UranusTableDDLRequest) (*shenhaiplatform.UranusTableDDLResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTableDDLResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务节点版本查看 */
func (c *ShenhaiplatformClient) UranusTaskInfoHistoryList(request *shenhaiplatform.UranusTaskInfoHistoryListRequest) (*shenhaiplatform.UranusTaskInfoHistoryListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskInfoHistoryListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 统计成功作业状态数量 */
func (c *ShenhaiplatformClient) GravityParticleJobMonitorJobSuccessCount(request *shenhaiplatform.GravityParticleJobMonitorJobSuccessCountRequest) (*shenhaiplatform.GravityParticleJobMonitorJobSuccessCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobMonitorJobSuccessCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 清除对话上下文 */
func (c *ShenhaiplatformClient) CopilotChatClear(request *shenhaiplatform.CopilotChatClearRequest) (*shenhaiplatform.CopilotChatClearResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.CopilotChatClearResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 一键重跑批次记录 */
func (c *ShenhaiplatformClient) ManageHubGravityOneClickRerunBatches(request *shenhaiplatform.ManageHubGravityOneClickRerunBatchesRequest) (*shenhaiplatform.ManageHubGravityOneClickRerunBatchesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubGravityOneClickRerunBatchesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务发布 */
func (c *ShenhaiplatformClient) UranusTaskInfoPublish(request *shenhaiplatform.UranusTaskInfoPublishRequest) (*shenhaiplatform.UranusTaskInfoPublishResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskInfoPublishResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据租户/项目空间/表名称模糊查询表列表，最多返回1000条 */
func (c *ShenhaiplatformClient) JtlasWarehouseFuzzyQueryTablesByTableName(request *shenhaiplatform.JtlasWarehouseFuzzyQueryTablesByTableNameRequest) (*shenhaiplatform.JtlasWarehouseFuzzyQueryTablesByTableNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasWarehouseFuzzyQueryTablesByTableNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更改用户角色 */
func (c *ShenhaiplatformClient) WorkspaceUpdateUserRole(request *shenhaiplatform.WorkspaceUpdateUserRoleRequest) (*shenhaiplatform.WorkspaceUpdateUserRoleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceUpdateUserRoleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 对作业进行查杀 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobSchedKillJob(request *shenhaiplatform.GravityParticleParticleJobSchedKillJobRequest) (*shenhaiplatform.GravityParticleParticleJobSchedKillJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobSchedKillJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据当前作业和目标层级查询父作业链路层级树 */
func (c *ShenhaiplatformClient) GravityParticleJobDepGetParentChainJobs(request *shenhaiplatform.GravityParticleJobDepGetParentChainJobsRequest) (*shenhaiplatform.GravityParticleJobDepGetParentChainJobsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobDepGetParentChainJobsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除作业 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerDeleteJob(request *shenhaiplatform.GravityParticleDubboJobManagerDeleteJobRequest) (*shenhaiplatform.GravityParticleDubboJobManagerDeleteJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerDeleteJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取查询结果 */
func (c *ShenhaiplatformClient) UranusExtraRunnerResult(request *shenhaiplatform.UranusExtraRunnerResultRequest) (*shenhaiplatform.UranusExtraRunnerResultResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusExtraRunnerResultResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 新建函数 */
func (c *ShenhaiplatformClient) UranusFunctionCreate(request *shenhaiplatform.UranusFunctionCreateRequest) (*shenhaiplatform.UranusFunctionCreateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusFunctionCreateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 重置作业 */
func (c *ShenhaiplatformClient) ManageHubGravityReset(request *shenhaiplatform.ManageHubGravityResetRequest) (*shenhaiplatform.ManageHubGravityResetResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubGravityResetResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 数据预览 */
func (c *ShenhaiplatformClient) UranusDataLoadPreview(request *shenhaiplatform.UranusDataLoadPreviewRequest) (*shenhaiplatform.UranusDataLoadPreviewResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusDataLoadPreviewResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 停止脚本 */
func (c *ShenhaiplatformClient) UranusScriptStop(request *shenhaiplatform.UranusScriptStopRequest) (*shenhaiplatform.UranusScriptStopResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusScriptStopResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 发布包信息预览 */
func (c *ShenhaiplatformClient) PreviewPackage(request *shenhaiplatform.PreviewPackageRequest) (*shenhaiplatform.PreviewPackageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.PreviewPackageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量任务单节点-上下线更新 */
func (c *ShenhaiplatformClient) UranusTaskUpdateStatusList(request *shenhaiplatform.UranusTaskUpdateStatusListRequest) (*shenhaiplatform.UranusTaskUpdateStatusListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskUpdateStatusListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据用户名查询用户权限表列表，最多返回1000条 */
func (c *ShenhaiplatformClient) JtlasWarehouseQueryTablesUnderSpecifiedUser(request *shenhaiplatform.JtlasWarehouseQueryTablesUnderSpecifiedUserRequest) (*shenhaiplatform.JtlasWarehouseQueryTablesUnderSpecifiedUserResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasWarehouseQueryTablesUnderSpecifiedUserResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询作业操作记录 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobListOperationRecord(request *shenhaiplatform.GravityParticleParticleJobListOperationRecordRequest) (*shenhaiplatform.GravityParticleParticleJobListOperationRecordResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobListOperationRecordResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取作业类型关系 */
func (c *ShenhaiplatformClient) GravityParticleSchedDictGetJobTypeR(request *shenhaiplatform.GravityParticleSchedDictGetJobTypeRRequest) (*shenhaiplatform.GravityParticleSchedDictGetJobTypeRResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleSchedDictGetJobTypeRResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取运行脚本结果列表 */
func (c *ShenhaiplatformClient) UranusScriptGetScriptRunResultList(request *shenhaiplatform.UranusScriptGetScriptRunResultListRequest) (*shenhaiplatform.UranusScriptGetScriptRunResultListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusScriptGetScriptRunResultListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 工作空间到期后删除该工作空间下的所有作业和日志 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerDeleteAllByWorkspace(request *shenhaiplatform.GravityParticleDubboJobManagerDeleteAllByWorkspaceRequest) (*shenhaiplatform.GravityParticleDubboJobManagerDeleteAllByWorkspaceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerDeleteAllByWorkspaceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 发布表变更信息 */
func (c *ShenhaiplatformClient) UranusTablePublishToPublishCenter(request *shenhaiplatform.UranusTablePublishToPublishCenterRequest) (*shenhaiplatform.UranusTablePublishToPublishCenterResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTablePublishToPublishCenterResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询表DDL */
func (c *ShenhaiplatformClient) ManageHubStorageTableDDL(request *shenhaiplatform.ManageHubStorageTableDDLRequest) (*shenhaiplatform.ManageHubStorageTableDDLResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubStorageTableDDLResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取spark版本 */
func (c *ShenhaiplatformClient) UranusTaskInfoSparkVersion(request *shenhaiplatform.UranusTaskInfoSparkVersionRequest) (*shenhaiplatform.UranusTaskInfoSparkVersionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskInfoSparkVersionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务保存 */
func (c *ShenhaiplatformClient) UranusTaskInfoSave(request *shenhaiplatform.UranusTaskInfoSaveRequest) (*shenhaiplatform.UranusTaskInfoSaveResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskInfoSaveResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取资源简要信息(前缀匹配资源名称) */
func (c *ShenhaiplatformClient) UranusResourceGetBriefByPrefix(request *shenhaiplatform.UranusResourceGetBriefByPrefixRequest) (*shenhaiplatform.UranusResourceGetBriefByPrefixResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusResourceGetBriefByPrefixResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据作业名模糊查询作业 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerListJob(request *shenhaiplatform.GravityParticleDubboJobManagerListJobRequest) (*shenhaiplatform.GravityParticleDubboJobManagerListJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerListJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 终止作业 */
func (c *ShenhaiplatformClient) ManageHubGravityKill(request *shenhaiplatform.ManageHubGravityKillRequest) (*shenhaiplatform.ManageHubGravityKillResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubGravityKillResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取taskCode */
func (c *ShenhaiplatformClient) UranusTaskInfoGetTaskCode(request *shenhaiplatform.UranusTaskInfoGetTaskCodeRequest) (*shenhaiplatform.UranusTaskInfoGetTaskCodeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskInfoGetTaskCodeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 列出值班表 */
func (c *ShenhaiplatformClient) ManageHubDutyListRoster(request *shenhaiplatform.ManageHubDutyListRosterRequest) (*shenhaiplatform.ManageHubDutyListRosterResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubDutyListRosterResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询作业运行信息 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobGetRunInfos(request *shenhaiplatform.GravityParticleParticleJobGetRunInfosRequest) (*shenhaiplatform.GravityParticleParticleJobGetRunInfosResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobGetRunInfosResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据函数id查询函数 */
func (c *ShenhaiplatformClient) UranusFunctionGetById(request *shenhaiplatform.UranusFunctionGetByIdRequest) (*shenhaiplatform.UranusFunctionGetByIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusFunctionGetByIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 工作空间删除 */
func (c *ShenhaiplatformClient) UranusWorkSpaceDown(request *shenhaiplatform.UranusWorkSpaceDownRequest) (*shenhaiplatform.UranusWorkSpaceDownResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusWorkSpaceDownResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 目录根据companyCode查询目录 */
func (c *ShenhaiplatformClient) UranusCatalogQueryList(request *shenhaiplatform.UranusCatalogQueryListRequest) (*shenhaiplatform.UranusCatalogQueryListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusCatalogQueryListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 脚本检测依赖 */
func (c *ShenhaiplatformClient) UranusScriptVerifyScriptFileDepend(request *shenhaiplatform.UranusScriptVerifyScriptFileDependRequest) (*shenhaiplatform.UranusScriptVerifyScriptFileDependResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusScriptVerifyScriptFileDependResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 脚本校验 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerVerifyScriptFile(request *shenhaiplatform.GravityParticleDubboJobManagerVerifyScriptFileRequest) (*shenhaiplatform.GravityParticleDubboJobManagerVerifyScriptFileResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerVerifyScriptFileResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询表DDL脚本 */
func (c *ShenhaiplatformClient) JtlasDownloadTableColumns(request *shenhaiplatform.JtlasDownloadTableColumnsRequest) (*shenhaiplatform.JtlasDownloadTableColumnsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasDownloadTableColumnsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 重跑指定任务的指定数据日期 */
func (c *ShenhaiplatformClient) GravityParticleOpenRerun(request *shenhaiplatform.GravityParticleOpenRerunRequest) (*shenhaiplatform.GravityParticleOpenRerunResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleOpenRerunResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务节点输出参数查询 */
func (c *ShenhaiplatformClient) UranusTaskExportParamList(request *shenhaiplatform.UranusTaskExportParamListRequest) (*shenhaiplatform.UranusTaskExportParamListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskExportParamListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据父目录CODE删除目录 */
func (c *ShenhaiplatformClient) UranusCatalogDelete(request *shenhaiplatform.UranusCatalogDeleteRequest) (*shenhaiplatform.UranusCatalogDeleteResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusCatalogDeleteResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 节点分页列表 */
func (c *ShenhaiplatformClient) UranusTaskPageList(request *shenhaiplatform.UranusTaskPageListRequest) (*shenhaiplatform.UranusTaskPageListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskPageListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 同步工作空间续费消息 */
func (c *ShenhaiplatformClient) WorkspaceStopExpireOrDelete(request *shenhaiplatform.WorkspaceStopExpireOrDeleteRequest) (*shenhaiplatform.WorkspaceStopExpireOrDeleteResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceStopExpireOrDeleteResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 工作流目录树 */
func (c *ShenhaiplatformClient) UranusTaskFlowListTree(request *shenhaiplatform.UranusTaskFlowListTreeRequest) (*shenhaiplatform.UranusTaskFlowListTreeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskFlowListTreeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 分片上传初始化 */
func (c *ShenhaiplatformClient) UranusWorkFlowInitUpload(request *shenhaiplatform.UranusWorkFlowInitUploadRequest) (*shenhaiplatform.UranusWorkFlowInitUploadResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusWorkFlowInitUploadResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 流程画布-节点管理列表 */
func (c *ShenhaiplatformClient) UranusTaskNodeList(request *shenhaiplatform.UranusTaskNodeListRequest) (*shenhaiplatform.UranusTaskNodeListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskNodeListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取指定对话中的发言记录 */
func (c *ShenhaiplatformClient) CopilotUtteranceList(request *shenhaiplatform.CopilotUtteranceListRequest) (*shenhaiplatform.CopilotUtteranceListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.CopilotUtteranceListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 完成并关闭资源上传 */
func (c *ShenhaiplatformClient) UranusResourceCloseFile(request *shenhaiplatform.UranusResourceCloseFileRequest) (*shenhaiplatform.UranusResourceCloseFileResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusResourceCloseFileResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 判断是否有子目录 */
func (c *ShenhaiplatformClient) UranusWorkFlowDirIfChildrenPath(request *shenhaiplatform.UranusWorkFlowDirIfChildrenPathRequest) (*shenhaiplatform.UranusWorkFlowDirIfChildrenPathResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusWorkFlowDirIfChildrenPathResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除文件夹 */
func (c *ShenhaiplatformClient) UranusWorkFlowDirDelete(request *shenhaiplatform.UranusWorkFlowDirDeleteRequest) (*shenhaiplatform.UranusWorkFlowDirDeleteResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusWorkFlowDirDeleteResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据脚本内容解析输出表 */
func (c *ShenhaiplatformClient) UranusTaskInfoAnalysisOutputTable(request *shenhaiplatform.UranusTaskInfoAnalysisOutputTableRequest) (*shenhaiplatform.UranusTaskInfoAnalysisOutputTableResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskInfoAnalysisOutputTableResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 上传资源 */
func (c *ShenhaiplatformClient) UranusResourceAppendFile(request *shenhaiplatform.UranusResourceAppendFileRequest) (*shenhaiplatform.UranusResourceAppendFileResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusResourceAppendFileResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取工作空间列表 */
func (c *ShenhaiplatformClient) WorkspaceBundleOrUnBundleResource(request *shenhaiplatform.WorkspaceBundleOrUnBundleResourceRequest) (*shenhaiplatform.WorkspaceBundleOrUnBundleResourceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceBundleOrUnBundleResourceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取目录树 */
func (c *ShenhaiplatformClient) UranusQueryFileTree(request *shenhaiplatform.UranusQueryFileTreeRequest) (*shenhaiplatform.UranusQueryFileTreeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusQueryFileTreeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 作业发布类型 新增或更新 参数为流程画布节点主键 */
func (c *ShenhaiplatformClient) UranusTaskInfoJobPublishType(request *shenhaiplatform.UranusTaskInfoJobPublishTypeRequest) (*shenhaiplatform.UranusTaskInfoJobPublishTypeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskInfoJobPublishTypeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取历史对话列表 */
func (c *ShenhaiplatformClient) CopilotChatHistory(request *shenhaiplatform.CopilotChatHistoryRequest) (*shenhaiplatform.CopilotChatHistoryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.CopilotChatHistoryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 抢锁时获取任务信息 */
func (c *ShenhaiplatformClient) UranusTaskInfoLockDetail(request *shenhaiplatform.UranusTaskInfoLockDetailRequest) (*shenhaiplatform.UranusTaskInfoLockDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskInfoLockDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询计算任务日志 */
func (c *ShenhaiplatformClient) ManageHubGravityJobLog(request *shenhaiplatform.ManageHubGravityJobLogRequest) (*shenhaiplatform.ManageHubGravityJobLogResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubGravityJobLogResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取当前作业的父依赖 */
func (c *ShenhaiplatformClient) GravityParticleJobDepGetParentDependencies(request *shenhaiplatform.GravityParticleJobDepGetParentDependenciesRequest) (*shenhaiplatform.GravityParticleJobDepGetParentDependenciesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobDepGetParentDependenciesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询表分区 */
func (c *ShenhaiplatformClient) JtlasPageSearchTablePartitions(request *shenhaiplatform.JtlasPageSearchTablePartitionsRequest) (*shenhaiplatform.JtlasPageSearchTablePartitionsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasPageSearchTablePartitionsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务批量补数 */
func (c *ShenhaiplatformClient) GravityParticleJobHisRunAddBathTask(request *shenhaiplatform.GravityParticleJobHisRunAddBathTaskRequest) (*shenhaiplatform.GravityParticleJobHisRunAddBathTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobHisRunAddBathTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取脚本类型和模板下载地址 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerGetScriptInfoType(request *shenhaiplatform.GravityParticleDubboJobManagerGetScriptInfoTypeRequest) (*shenhaiplatform.GravityParticleDubboJobManagerGetScriptInfoTypeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerGetScriptInfoTypeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询未发布的表变更信息 */
func (c *ShenhaiplatformClient) UranusTableUnpublishedInfo(request *shenhaiplatform.UranusTableUnpublishedInfoRequest) (*shenhaiplatform.UranusTableUnpublishedInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTableUnpublishedInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询作业信息 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobSchedGetSchedJobInfo(request *shenhaiplatform.GravityParticleParticleJobSchedGetSchedJobInfoRequest) (*shenhaiplatform.GravityParticleParticleJobSchedGetSchedJobInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobSchedGetSchedJobInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 工作流-预发布 */
func (c *ShenhaiplatformClient) UranusTaskPrePublish(request *shenhaiplatform.UranusTaskPrePublishRequest) (*shenhaiplatform.UranusTaskPrePublishResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskPrePublishResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新函数 */
func (c *ShenhaiplatformClient) UranusFunctionUpdate(request *shenhaiplatform.UranusFunctionUpdateRequest) (*shenhaiplatform.UranusFunctionUpdateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusFunctionUpdateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建工作空间 */
func (c *ShenhaiplatformClient) WorkspaceCreate(request *shenhaiplatform.WorkspaceCreateRequest) (*shenhaiplatform.WorkspaceCreateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceCreateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询mgrJob信息 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobGetMgrJobInfo(request *shenhaiplatform.GravityParticleParticleJobGetMgrJobInfoRequest) (*shenhaiplatform.GravityParticleParticleJobGetMgrJobInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobGetMgrJobInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询脚本参数或任务参数 */
func (c *ShenhaiplatformClient) UranusScriptQueryParams(request *shenhaiplatform.UranusScriptQueryParamsRequest) (*shenhaiplatform.UranusScriptQueryParamsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusScriptQueryParamsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除作业以及子作业和质量作业 */
func (c *ShenhaiplatformClient) GravityParticleChannelJobInfoDeleteJob(request *shenhaiplatform.GravityParticleChannelJobInfoDeleteJobRequest) (*shenhaiplatform.GravityParticleChannelJobInfoDeleteJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleChannelJobInfoDeleteJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 判断用户pin和工作空间code校验是否有工作空间权限 */
func (c *ShenhaiplatformClient) WorkspaceVerifyAuth(request *shenhaiplatform.WorkspaceVerifyAuthRequest) (*shenhaiplatform.WorkspaceVerifyAuthResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceVerifyAuthResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除对话 */
func (c *ShenhaiplatformClient) CopilotChatDelete(request *shenhaiplatform.CopilotChatDeleteRequest) (*shenhaiplatform.CopilotChatDeleteResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.CopilotChatDeleteResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 同步工作空间开通信息接口 */
func (c *ShenhaiplatformClient) WorkspaceSyncWsProductOrder(request *shenhaiplatform.WorkspaceSyncWsProductOrderRequest) (*shenhaiplatform.WorkspaceSyncWsProductOrderResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceSyncWsProductOrderResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务属性 */
func (c *ShenhaiplatformClient) ManageHubGravityJobProperty(request *shenhaiplatform.ManageHubGravityJobPropertyRequest) (*shenhaiplatform.ManageHubGravityJobPropertyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubGravityJobPropertyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 数据下载 */
func (c *ShenhaiplatformClient) UranusTableDataDownload(request *shenhaiplatform.UranusTableDataDownloadRequest) (*shenhaiplatform.UranusTableDataDownloadResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTableDataDownloadResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 工作流新建 */
func (c *ShenhaiplatformClient) UranusTaskFlowSave(request *shenhaiplatform.UranusTaskFlowSaveRequest) (*shenhaiplatform.UranusTaskFlowSaveResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskFlowSaveResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 同步工作空间续费消息 */
func (c *ShenhaiplatformClient) WorkspaceSyncRecharge(request *shenhaiplatform.WorkspaceSyncRechargeRequest) (*shenhaiplatform.WorkspaceSyncRechargeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceSyncRechargeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 列出值班人 */
func (c *ShenhaiplatformClient) ManageHubDutyListWatchman(request *shenhaiplatform.ManageHubDutyListWatchmanRequest) (*shenhaiplatform.ManageHubDutyListWatchmanResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubDutyListWatchmanResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 检查工作流名称 */
func (c *ShenhaiplatformClient) UranusTaskFlowCheck(request *shenhaiplatform.UranusTaskFlowCheckRequest) (*shenhaiplatform.UranusTaskFlowCheckResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskFlowCheckResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务单节点-详情 */
func (c *ShenhaiplatformClient) UranusTaskDetail(request *shenhaiplatform.UranusTaskDetailRequest) (*shenhaiplatform.UranusTaskDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加工作空间成员 */
func (c *ShenhaiplatformClient) WorkspaceAddMember(request *shenhaiplatform.WorkspaceAddMemberRequest) (*shenhaiplatform.WorkspaceAddMemberResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceAddMemberResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务重新发布 */
func (c *ShenhaiplatformClient) UranusTaskInfoRePublish(request *shenhaiplatform.UranusTaskInfoRePublishRequest) (*shenhaiplatform.UranusTaskInfoRePublishResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskInfoRePublishResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 判断作业和上游是否完全同频 */
func (c *ShenhaiplatformClient) GravityParticleJobscheIsUpstreamSameFrequency(request *shenhaiplatform.GravityParticleJobscheIsUpstreamSameFrequencyRequest) (*shenhaiplatform.GravityParticleJobscheIsUpstreamSameFrequencyResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobscheIsUpstreamSameFrequencyResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询作业完成信息 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobJobCompletionInfo(request *shenhaiplatform.GravityParticleParticleJobJobCompletionInfoRequest) (*shenhaiplatform.GravityParticleParticleJobJobCompletionInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobJobCompletionInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取所有分类目录 */
func (c *ShenhaiplatformClient) UranusFunctionListCatalog(request *shenhaiplatform.UranusFunctionListCatalogRequest) (*shenhaiplatform.UranusFunctionListCatalogResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusFunctionListCatalogResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 检索表 */
func (c *ShenhaiplatformClient) JtlasPageSearchTables(request *shenhaiplatform.JtlasPageSearchTablesRequest) (*shenhaiplatform.JtlasPageSearchTablesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasPageSearchTablesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据查询条件返回作业关联的模型信息 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerSearchDmrModelJob(request *shenhaiplatform.GravityParticleDubboJobManagerSearchDmrModelJobRequest) (*shenhaiplatform.GravityParticleDubboJobManagerSearchDmrModelJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerSearchDmrModelJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 发布包详情查询 */
func (c *ShenhaiplatformClient) DescribePublishPkg(request *shenhaiplatform.DescribePublishPkgRequest) (*shenhaiplatform.DescribePublishPkgResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.DescribePublishPkgResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询授权表的列数据 */
func (c *ShenhaiplatformClient) UranusTableColumn(request *shenhaiplatform.UranusTableColumnRequest) (*shenhaiplatform.UranusTableColumnResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTableColumnResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 分页查询任务运行历史 */
func (c *ShenhaiplatformClient) ManageHubGravityJobRunHistory(request *shenhaiplatform.ManageHubGravityJobRunHistoryRequest) (*shenhaiplatform.ManageHubGravityJobRunHistoryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubGravityJobRunHistoryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取工作空间绑定的云仓项目 */
func (c *ShenhaiplatformClient) WorkspaceGetProject(request *shenhaiplatform.WorkspaceGetProjectRequest) (*shenhaiplatform.WorkspaceGetProjectResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceGetProjectResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新值班人 */
func (c *ShenhaiplatformClient) ManageHubDutyUpdateWatchman(request *shenhaiplatform.ManageHubDutyUpdateWatchmanRequest) (*shenhaiplatform.ManageHubDutyUpdateWatchmanResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubDutyUpdateWatchmanResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 发布，保存发布，更新发布等等 */
func (c *ShenhaiplatformClient) UranusTablePublish(request *shenhaiplatform.UranusTablePublishRequest) (*shenhaiplatform.UranusTablePublishResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTablePublishResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据用户pin查询uc用户信息 */
func (c *ShenhaiplatformClient) WorkspaceGetUcUserByPin(request *shenhaiplatform.WorkspaceGetUcUserByPinRequest) (*shenhaiplatform.WorkspaceGetUcUserByPinResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceGetUcUserByPinResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 作业父子类型枚举 */
func (c *ShenhaiplatformClient) ManageHubGravityJobType(request *shenhaiplatform.ManageHubGravityJobTypeRequest) (*shenhaiplatform.ManageHubGravityJobTypeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubGravityJobTypeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 工作流目录树 */
func (c *ShenhaiplatformClient) UranusQueryList(request *shenhaiplatform.UranusQueryListRequest) (*shenhaiplatform.UranusQueryListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusQueryListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询用户创建的表，支持基于表名模糊 */
func (c *ShenhaiplatformClient) JtlasWarehouseQueryTablesOwnedByUser(request *shenhaiplatform.JtlasWarehouseQueryTablesOwnedByUserRequest) (*shenhaiplatform.JtlasWarehouseQueryTablesOwnedByUserResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasWarehouseQueryTablesOwnedByUserResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询系统参数 */
func (c *ShenhaiplatformClient) UranusDictQuerySysParam(request *shenhaiplatform.UranusDictQuerySysParamRequest) (*shenhaiplatform.UranusDictQuerySysParamResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusDictQuerySysParamResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 表分隔符信息 */
func (c *ShenhaiplatformClient) UranusTableDelimiters(request *shenhaiplatform.UranusTableDelimitersRequest) (*shenhaiplatform.UranusTableDelimitersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTableDelimitersResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据类型获取数据字典 */
func (c *ShenhaiplatformClient) GravityParticleSchedDictGetByType(request *shenhaiplatform.GravityParticleSchedDictGetByTypeRequest) (*shenhaiplatform.GravityParticleSchedDictGetByTypeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleSchedDictGetByTypeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据类型获取数据字典 */
func (c *ShenhaiplatformClient) GravityParticleConfigUserMatchUser(request *shenhaiplatform.GravityParticleConfigUserMatchUserRequest) (*shenhaiplatform.GravityParticleConfigUserMatchUserResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleConfigUserMatchUserResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 存储概览 */
func (c *ShenhaiplatformClient) ManageHubStorageSummary(request *shenhaiplatform.ManageHubStorageSummaryRequest) (*shenhaiplatform.ManageHubStorageSummaryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubStorageSummaryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务单节点-删除 */
func (c *ShenhaiplatformClient) UranusTaskNodeDelete(request *shenhaiplatform.UranusTaskNodeDeleteRequest) (*shenhaiplatform.UranusTaskNodeDeleteResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskNodeDeleteResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 驳回发布包 */
func (c *ShenhaiplatformClient) DeletePublishPkg(request *shenhaiplatform.DeletePublishPkgRequest) (*shenhaiplatform.DeletePublishPkgResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.DeletePublishPkgResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取作业树 */
func (c *ShenhaiplatformClient) GravityParticleJobDepGetChildTreed(request *shenhaiplatform.GravityParticleJobDepGetChildTreedRequest) (*shenhaiplatform.GravityParticleJobDepGetChildTreedResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobDepGetChildTreedResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获得脚本运行日志 */
func (c *ShenhaiplatformClient) UranusScriptRunLogLogContent(request *shenhaiplatform.UranusScriptRunLogLogContentRequest) (*shenhaiplatform.UranusScriptRunLogLogContentResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusScriptRunLogLogContentResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 建表的列类型查询 */
func (c *ShenhaiplatformClient) UranusDictTableCode(request *shenhaiplatform.UranusDictTableCodeRequest) (*shenhaiplatform.UranusDictTableCodeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusDictTableCodeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据查询条件返回作业Id */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerSearchJobId(request *shenhaiplatform.GravityParticleDubboJobManagerSearchJobIdRequest) (*shenhaiplatform.GravityParticleDubboJobManagerSearchJobIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerSearchJobIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除值班人 */
func (c *ShenhaiplatformClient) ManageHubDutyDeleteWatchman(request *shenhaiplatform.ManageHubDutyDeleteWatchmanRequest) (*shenhaiplatform.ManageHubDutyDeleteWatchmanResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubDutyDeleteWatchmanResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建函数分类目录 */
func (c *ShenhaiplatformClient) UranusFunctionCreateCatalog(request *shenhaiplatform.UranusFunctionCreateCatalogRequest) (*shenhaiplatform.UranusFunctionCreateCatalogResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusFunctionCreateCatalogResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取父作业 */
func (c *ShenhaiplatformClient) GravityParticleJobDepParentJobs(request *shenhaiplatform.GravityParticleJobDepParentJobsRequest) (*shenhaiplatform.GravityParticleJobDepParentJobsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobDepParentJobsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 一键重跑预览 */
func (c *ShenhaiplatformClient) ManageHubGravityOneClickRerunPreview(request *shenhaiplatform.ManageHubGravityOneClickRerunPreviewRequest) (*shenhaiplatform.ManageHubGravityOneClickRerunPreviewResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubGravityOneClickRerunPreviewResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 解析脚本中参数 */
func (c *ShenhaiplatformClient) UranusExtraRunnerParamParse(request *shenhaiplatform.UranusExtraRunnerParamParseRequest) (*shenhaiplatform.UranusExtraRunnerParamParseResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusExtraRunnerParamParseResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务补数 */
func (c *ShenhaiplatformClient) GravityParticleJobHisRunAddTask(request *shenhaiplatform.GravityParticleJobHisRunAddTaskRequest) (*shenhaiplatform.GravityParticleJobHisRunAddTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobHisRunAddTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取子作业 */
func (c *ShenhaiplatformClient) GravityParticleJobDepChildJobs(request *shenhaiplatform.GravityParticleJobDepChildJobsRequest) (*shenhaiplatform.GravityParticleJobDepChildJobsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobDepChildJobsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询用户指定权限下的表信息,支持表名模糊 */
func (c *ShenhaiplatformClient) JtlasWarehouseFuzzyQueryTablesUnderSpecifiedUserWithPrivileges(request *shenhaiplatform.JtlasWarehouseFuzzyQueryTablesUnderSpecifiedUserWithPrivilegesRequest) (*shenhaiplatform.JtlasWarehouseFuzzyQueryTablesUnderSpecifiedUserWithPrivilegesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasWarehouseFuzzyQueryTablesUnderSpecifiedUserWithPrivilegesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 列出所有目录(只包含目录) */
func (c *ShenhaiplatformClient) UranusResourceListDirectory(request *shenhaiplatform.UranusResourceListDirectoryRequest) (*shenhaiplatform.UranusResourceListDirectoryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusResourceListDirectoryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务依赖节点的输出参数查询 */
func (c *ShenhaiplatformClient) UranusTaskDependExportParamList(request *shenhaiplatform.UranusTaskDependExportParamListRequest) (*shenhaiplatform.UranusTaskDependExportParamListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskDependExportParamListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取当前登录用户信息 */
func (c *ShenhaiplatformClient) WorkspaceGetCurrentUserInfo(request *shenhaiplatform.WorkspaceGetCurrentUserInfoRequest) (*shenhaiplatform.WorkspaceGetCurrentUserInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceGetCurrentUserInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据表信息，查询其对应写入作业信息 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerQueryJobByOutputTable(request *shenhaiplatform.GravityParticleDubboJobManagerQueryJobByOutputTableRequest) (*shenhaiplatform.GravityParticleDubboJobManagerQueryJobByOutputTableResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerQueryJobByOutputTableResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* spark参数keys */
func (c *ShenhaiplatformClient) UranusTaskSparkParamKeys(request *shenhaiplatform.UranusTaskSparkParamKeysRequest) (*shenhaiplatform.UranusTaskSparkParamKeysResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskSparkParamKeysResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建文件夹 */
func (c *ShenhaiplatformClient) UranusWorkFlowDirCreate(request *shenhaiplatform.UranusWorkFlowDirCreateRequest) (*shenhaiplatform.UranusWorkFlowDirCreateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusWorkFlowDirCreateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询表DDL脚本 */
func (c *ShenhaiplatformClient) JtlasGetTableDDLScript(request *shenhaiplatform.JtlasGetTableDDLScriptRequest) (*shenhaiplatform.JtlasGetTableDDLScriptResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasGetTableDDLScriptResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据查询条件返回作业关联的模型信息 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerJobQuery(request *shenhaiplatform.GravityParticleDubboJobManagerJobQueryRequest) (*shenhaiplatform.GravityParticleDubboJobManagerJobQueryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerJobQueryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务单节点-校验作业名称 */
func (c *ShenhaiplatformClient) UranusTaskNodeCheckJobName(request *shenhaiplatform.UranusTaskNodeCheckJobNameRequest) (*shenhaiplatform.UranusTaskNodeCheckJobNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskNodeCheckJobNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 补数跟踪列表 */
func (c *ShenhaiplatformClient) GravityParticleJobHisRunListTask(request *shenhaiplatform.GravityParticleJobHisRunListTaskRequest) (*shenhaiplatform.GravityParticleJobHisRunListTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobHisRunListTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 重置作业为done */
func (c *ShenhaiplatformClient) GravityParticleParticleJobSchedResetStsDone(request *shenhaiplatform.GravityParticleParticleJobSchedResetStsDoneRequest) (*shenhaiplatform.GravityParticleParticleJobSchedResetStsDoneResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobSchedResetStsDoneResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量接口上线 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobSchedReuseJobWithDepend(request *shenhaiplatform.GravityParticleParticleJobSchedReuseJobWithDependRequest) (*shenhaiplatform.GravityParticleParticleJobSchedReuseJobWithDependResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobSchedReuseJobWithDependResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* sql语法检测 */
func (c *ShenhaiplatformClient) UranusScriptSyntaxCheck(request *shenhaiplatform.UranusScriptSyntaxCheckRequest) (*shenhaiplatform.UranusScriptSyntaxCheckResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusScriptSyntaxCheckResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 任务节点详情-多节点关系 */
func (c *ShenhaiplatformClient) UranusTaskGetRelation(request *shenhaiplatform.UranusTaskGetRelationRequest) (*shenhaiplatform.UranusTaskGetRelationResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskGetRelationResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取可用模型列表 */
func (c *ShenhaiplatformClient) CopilotModelList(request *shenhaiplatform.CopilotModelListRequest) (*shenhaiplatform.CopilotModelListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.CopilotModelListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取运行脚本结果 */
func (c *ShenhaiplatformClient) UranusScriptGetScriptRunResult(request *shenhaiplatform.UranusScriptGetScriptRunResultRequest) (*shenhaiplatform.UranusScriptGetScriptRunResultResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusScriptGetScriptRunResultResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据当前作业和目标层级查询子作业链路层级树 */
func (c *ShenhaiplatformClient) GravityParticleJobDepGetChildChainJobs(request *shenhaiplatform.GravityParticleJobDepGetChildChainJobsRequest) (*shenhaiplatform.GravityParticleJobDepGetChildChainJobsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobDepGetChildChainJobsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 工作流画布-作业预发布 */
func (c *ShenhaiplatformClient) UranusTaskPagePublish(request *shenhaiplatform.UranusTaskPagePublishRequest) (*shenhaiplatform.UranusTaskPagePublishResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskPagePublishResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改值班表 */
func (c *ShenhaiplatformClient) ManageHubDutyUpdateRoster(request *shenhaiplatform.ManageHubDutyUpdateRosterRequest) (*shenhaiplatform.ManageHubDutyUpdateRosterResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubDutyUpdateRosterResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取子作业 */
func (c *ShenhaiplatformClient) GravityParticleJobDepGetChildDependencies(request *shenhaiplatform.GravityParticleJobDepGetChildDependenciesRequest) (*shenhaiplatform.GravityParticleJobDepGetChildDependenciesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobDepGetChildDependenciesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 表授权接口 */
func (c *ShenhaiplatformClient) JtlasGrantTablePrivileges(request *shenhaiplatform.JtlasGrantTablePrivilegesRequest) (*shenhaiplatform.JtlasGrantTablePrivilegesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasGrantTablePrivilegesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 新建资源（包含资源目录和资源文件） */
func (c *ShenhaiplatformClient) UranusResourceCreate(request *shenhaiplatform.UranusResourceCreateRequest) (*shenhaiplatform.UranusResourceCreateResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusResourceCreateResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取云仓项目被绑定的工作空间 */
func (c *ShenhaiplatformClient) WorkspaceGetProjectBundle(request *shenhaiplatform.WorkspaceGetProjectBundleRequest) (*shenhaiplatform.WorkspaceGetProjectBundleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceGetProjectBundleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据用户名查询用户权限表列表，最多返回1000条 */
func (c *ShenhaiplatformClient) JtlasWarehouseQueryTablePrivileges(request *shenhaiplatform.JtlasWarehouseQueryTablePrivilegesRequest) (*shenhaiplatform.JtlasWarehouseQueryTablePrivilegesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasWarehouseQueryTablePrivilegesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除表 */
func (c *ShenhaiplatformClient) UranusTableDelete(request *shenhaiplatform.UranusTableDeleteRequest) (*shenhaiplatform.UranusTableDeleteResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTableDeleteResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 发布函数到发布中心 */
func (c *ShenhaiplatformClient) UranusFunctionPublish(request *shenhaiplatform.UranusFunctionPublishRequest) (*shenhaiplatform.UranusFunctionPublishResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusFunctionPublishResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询授权表 */
func (c *ShenhaiplatformClient) UranusTableCheckTableName(request *shenhaiplatform.UranusTableCheckTableNameRequest) (*shenhaiplatform.UranusTableCheckTableNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTableCheckTableNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 工作空间绑定云仓项目 */
func (c *ShenhaiplatformClient) WorkspaceBundleProject(request *shenhaiplatform.WorkspaceBundleProjectRequest) (*shenhaiplatform.WorkspaceBundleProjectResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceBundleProjectResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取工作空间的资源组列表 */
func (c *ShenhaiplatformClient) WorkspaceGetResources(request *shenhaiplatform.WorkspaceGetResourcesRequest) (*shenhaiplatform.WorkspaceGetResourcesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceGetResourcesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 增加值班人 */
func (c *ShenhaiplatformClient) ManageHubDutyAddWatchman(request *shenhaiplatform.ManageHubDutyAddWatchmanRequest) (*shenhaiplatform.ManageHubDutyAddWatchmanResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubDutyAddWatchmanResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除工作空间 */
func (c *ShenhaiplatformClient) WorkspaceDelete(request *shenhaiplatform.WorkspaceDeleteRequest) (*shenhaiplatform.WorkspaceDeleteResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceDeleteResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 停止补数 */
func (c *ShenhaiplatformClient) GravityParticleJobHisRunCloseTask(request *shenhaiplatform.GravityParticleJobHisRunCloseTaskRequest) (*shenhaiplatform.GravityParticleJobHisRunCloseTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleJobHisRunCloseTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 工作流删除 */
func (c *ShenhaiplatformClient) UranusTaskFlowDelete(request *shenhaiplatform.UranusTaskFlowDeleteRequest) (*shenhaiplatform.UranusTaskFlowDeleteResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusTaskFlowDeleteResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 保存作业模型相关信息 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerSaveDmrModelJob(request *shenhaiplatform.GravityParticleDubboJobManagerSaveDmrModelJobRequest) (*shenhaiplatform.GravityParticleDubboJobManagerSaveDmrModelJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerSaveDmrModelJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取作业详细信息 */
func (c *ShenhaiplatformClient) GravityParticleDubboJobManagerCalcJobDetail(request *shenhaiplatform.GravityParticleDubboJobManagerCalcJobDetailRequest) (*shenhaiplatform.GravityParticleDubboJobManagerCalcJobDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleDubboJobManagerCalcJobDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询作业清单 */
func (c *ShenhaiplatformClient) GravityParticleParticleModelCalcListJob(request *shenhaiplatform.GravityParticleParticleModelCalcListJobRequest) (*shenhaiplatform.GravityParticleParticleModelCalcListJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleModelCalcListJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 租户/库/表存储详情 */
func (c *ShenhaiplatformClient) ManageHubStorageDetails(request *shenhaiplatform.ManageHubStorageDetailsRequest) (*shenhaiplatform.ManageHubStorageDetailsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubStorageDetailsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询表查看脚本 */
func (c *ShenhaiplatformClient) JtlasGetTableQueryScript(request *shenhaiplatform.JtlasGetTableQueryScriptRequest) (*shenhaiplatform.JtlasGetTableQueryScriptResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasGetTableQueryScriptResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 工作空间解绑云仓项目 */
func (c *ShenhaiplatformClient) WorkspaceUnbundleProject(request *shenhaiplatform.WorkspaceUnbundleProjectRequest) (*shenhaiplatform.WorkspaceUnbundleProjectResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceUnbundleProjectResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 一键重跑任务重新提交 */
func (c *ShenhaiplatformClient) ManageHubGravityOneClickRerunResubmit(request *shenhaiplatform.ManageHubGravityOneClickRerunResubmitRequest) (*shenhaiplatform.ManageHubGravityOneClickRerunResubmitResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.ManageHubGravityOneClickRerunResubmitResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询表详情 */
func (c *ShenhaiplatformClient) JtlasSearchDetail(request *shenhaiplatform.JtlasSearchDetailRequest) (*shenhaiplatform.JtlasSearchDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.JtlasSearchDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 条件查询-作业运行实例列表 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobListJobInstance(request *shenhaiplatform.GravityParticleParticleJobListJobInstanceRequest) (*shenhaiplatform.GravityParticleParticleJobListJobInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobListJobInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获得脚本运行的内容 */
func (c *ShenhaiplatformClient) UranusScriptRunLogContent(request *shenhaiplatform.UranusScriptRunLogContentRequest) (*shenhaiplatform.UranusScriptRunLogContentResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusScriptRunLogContentResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取可添加的成员列表 */
func (c *ShenhaiplatformClient) WorkspaceGetUcUsers(request *shenhaiplatform.WorkspaceGetUcUsersRequest) (*shenhaiplatform.WorkspaceGetUcUsersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.WorkspaceGetUcUsersResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 下线作业 */
func (c *ShenhaiplatformClient) GravityParticleParticleJobSchedCancelJob(request *shenhaiplatform.GravityParticleParticleJobSchedCancelJobRequest) (*shenhaiplatform.GravityParticleParticleJobSchedCancelJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.GravityParticleParticleJobSchedCancelJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 数据上传历史任务 */
func (c *ShenhaiplatformClient) UranusDataLoadHistory(request *shenhaiplatform.UranusDataLoadHistoryRequest) (*shenhaiplatform.UranusDataLoadHistoryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &shenhaiplatform.UranusDataLoadHistoryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

