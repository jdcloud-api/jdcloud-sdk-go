// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    baseanti "github.com/lshuining/jdcloud-sdk-go/services/baseanti/models"
)

type SetIpCleanThresholdRequest struct {

    core.JDCloudRequest

    /* 地域编码. 基础防护已支持华北-北京, 华东-宿迁, 华东-上海, 华南-广州  */
    RegionId string `json:"regionId"`

    /* 请求参数  */
    IpCleanThresholdSpec *baseanti.IpCleanThresholdSpec `json:"ipCleanThresholdSpec"`
}

/*
 * param regionId: 地域编码. 基础防护已支持华北-北京, 华东-宿迁, 华东-上海, 华南-广州 (Required)
 * param ipCleanThresholdSpec: 请求参数 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewSetIpCleanThresholdRequest(
    regionId string,
    ipCleanThresholdSpec *baseanti.IpCleanThresholdSpec,
) *SetIpCleanThresholdRequest {

	return &SetIpCleanThresholdRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/setIpCleanThreshold",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        IpCleanThresholdSpec: ipCleanThresholdSpec,
	}
}

/*
 * param regionId: 地域编码. 基础防护已支持华北-北京, 华东-宿迁, 华东-上海, 华南-广州 (Required)
 * param ipCleanThresholdSpec: 请求参数 (Required)
 */
func NewSetIpCleanThresholdRequestWithAllParams(
    regionId string,
    ipCleanThresholdSpec *baseanti.IpCleanThresholdSpec,
) *SetIpCleanThresholdRequest {

    return &SetIpCleanThresholdRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/setIpCleanThreshold",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        IpCleanThresholdSpec: ipCleanThresholdSpec,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewSetIpCleanThresholdRequestWithoutParam() *SetIpCleanThresholdRequest {

    return &SetIpCleanThresholdRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/setIpCleanThreshold",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域编码. 基础防护已支持华北-北京, 华东-宿迁, 华东-上海, 华南-广州(Required) */
func (r *SetIpCleanThresholdRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param ipCleanThresholdSpec: 请求参数(Required) */
func (r *SetIpCleanThresholdRequest) SetIpCleanThresholdSpec(ipCleanThresholdSpec *baseanti.IpCleanThresholdSpec) {
    r.IpCleanThresholdSpec = ipCleanThresholdSpec
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r SetIpCleanThresholdRequest) GetRegionId() string {
    return r.RegionId
}

type SetIpCleanThresholdResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result SetIpCleanThresholdResult `json:"result"`
}

type SetIpCleanThresholdResult struct {
    Code int `json:"code"`
    Message string `json:"message"`
}