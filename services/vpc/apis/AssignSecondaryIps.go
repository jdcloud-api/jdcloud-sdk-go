// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type AssignSecondaryIpsRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* networkInterface ID  */
    NetworkInterfaceId string `json:"networkInterfaceId"`

    /* secondary ip被其他接口占用时，是否抢占。false：非抢占重分配，true：抢占重分配，默认抢占重分配。默认值：true (Optional) */
    Force *bool `json:"force"`

    /* 指定分配的secondaryIp地址 (Optional) */
    SecondaryIps []string `json:"secondaryIps"`

    /* 指定自动分配的secondaryIp个数 (Optional) */
    SecondaryIpCount *int `json:"secondaryIpCount"`
}

/*
 * param regionId: Region ID 
 * param networkInterfaceId: networkInterface ID 
 * param force: secondary ip被其他接口占用时，是否抢占。false：非抢占重分配，true：抢占重分配，默认抢占重分配。默认值：true (Optional)
 * param secondaryIps: 指定分配的secondaryIp地址 (Optional)
 * param secondaryIpCount: 指定自动分配的secondaryIp个数 (Optional)
 */
func NewAssignSecondaryIpsRequest(
    regionId string,
    networkInterfaceId string,
) *AssignSecondaryIpsRequest {

	return &AssignSecondaryIpsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/networkInterfaces/{networkInterfaceId}:assignSecondaryIps",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        NetworkInterfaceId: networkInterfaceId,
	}
}

func (r *AssignSecondaryIpsRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

func (r *AssignSecondaryIpsRequest) SetNetworkInterfaceId(networkInterfaceId string) {
    r.NetworkInterfaceId = networkInterfaceId
}

func (r *AssignSecondaryIpsRequest) SetForce(force bool) {
    r.Force = &force
}

func (r *AssignSecondaryIpsRequest) SetSecondaryIps(secondaryIps []string) {
    r.SecondaryIps = secondaryIps
}

func (r *AssignSecondaryIpsRequest) SetSecondaryIpCount(secondaryIpCount int) {
    r.SecondaryIpCount = &secondaryIpCount
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r AssignSecondaryIpsRequest) GetRegionId() string {
    return r.RegionId
}

type AssignSecondaryIpsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result AssignSecondaryIpsResult `json:"result"`
}

type AssignSecondaryIpsResult struct {
}