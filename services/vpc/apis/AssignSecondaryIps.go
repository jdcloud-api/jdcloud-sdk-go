// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type AssignSecondaryIpsRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* networkInterface ID  */
    NetworkInterfaceId string `json:"networkInterfaceId"`

    /* secondary ip被其他接口占用时，是否抢占。false：非抢占重分配，true：抢占重分配；按网段分配时，默认非抢占重分配，指定IP或者个数时，默认抢占重分配。 (Optional) */
    Force *bool `json:"force"`

    /* 指定分配的secondaryIp地址 (Optional) */
    SecondaryIps []string `json:"secondaryIps"`

    /* 指定自动分配的secondaryIp个数 (Optional) */
    SecondaryIpCount *int `json:"secondaryIpCount"`

    /* 指定分配的网段掩码长度, 支持24-28位掩码长度，不能与secondaryIpCount或secondaryIps同时指定，不支持抢占重分配 (Optional) */
    SecondaryIpMaskLen *int `json:"secondaryIpMaskLen"`

    /* 指定分配的网段中第一个secondaryIp地址，不能与secondaryIpCount或secondaryIps同时指定，secondaryIpAddress与secondaryIpMaskLen需要保持一致，否则无法创建 (Optional) */
    SecondaryIpAddress *string `json:"secondaryIpAddress"`
}

/*
 * param regionId: Region ID (Required)
 * param networkInterfaceId: networkInterface ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewAssignSecondaryIpsRequest(
    regionId string,
    networkInterfaceId string,
) *AssignSecondaryIpsRequest {

	return &AssignSecondaryIpsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/networkInterfaces/{networkInterfaceId}:assignSecondaryIps",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        NetworkInterfaceId: networkInterfaceId,
	}
}

/*
 * param regionId: Region ID (Required)
 * param networkInterfaceId: networkInterface ID (Required)
 * param force: secondary ip被其他接口占用时，是否抢占。false：非抢占重分配，true：抢占重分配；按网段分配时，默认非抢占重分配，指定IP或者个数时，默认抢占重分配。 (Optional)
 * param secondaryIps: 指定分配的secondaryIp地址 (Optional)
 * param secondaryIpCount: 指定自动分配的secondaryIp个数 (Optional)
 * param secondaryIpMaskLen: 指定分配的网段掩码长度, 支持24-28位掩码长度，不能与secondaryIpCount或secondaryIps同时指定，不支持抢占重分配 (Optional)
 * param secondaryIpAddress: 指定分配的网段中第一个secondaryIp地址，不能与secondaryIpCount或secondaryIps同时指定，secondaryIpAddress与secondaryIpMaskLen需要保持一致，否则无法创建 (Optional)
 */
func NewAssignSecondaryIpsRequestWithAllParams(
    regionId string,
    networkInterfaceId string,
    force *bool,
    secondaryIps []string,
    secondaryIpCount *int,
    secondaryIpMaskLen *int,
    secondaryIpAddress *string,
) *AssignSecondaryIpsRequest {

    return &AssignSecondaryIpsRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/networkInterfaces/{networkInterfaceId}:assignSecondaryIps",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        NetworkInterfaceId: networkInterfaceId,
        Force: force,
        SecondaryIps: secondaryIps,
        SecondaryIpCount: secondaryIpCount,
        SecondaryIpMaskLen: secondaryIpMaskLen,
        SecondaryIpAddress: secondaryIpAddress,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewAssignSecondaryIpsRequestWithoutParam() *AssignSecondaryIpsRequest {

    return &AssignSecondaryIpsRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/networkInterfaces/{networkInterfaceId}:assignSecondaryIps",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *AssignSecondaryIpsRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param networkInterfaceId: networkInterface ID(Required) */
func (r *AssignSecondaryIpsRequest) SetNetworkInterfaceId(networkInterfaceId string) {
    r.NetworkInterfaceId = networkInterfaceId
}

/* param force: secondary ip被其他接口占用时，是否抢占。false：非抢占重分配，true：抢占重分配；按网段分配时，默认非抢占重分配，指定IP或者个数时，默认抢占重分配。(Optional) */
func (r *AssignSecondaryIpsRequest) SetForce(force bool) {
    r.Force = &force
}

/* param secondaryIps: 指定分配的secondaryIp地址(Optional) */
func (r *AssignSecondaryIpsRequest) SetSecondaryIps(secondaryIps []string) {
    r.SecondaryIps = secondaryIps
}

/* param secondaryIpCount: 指定自动分配的secondaryIp个数(Optional) */
func (r *AssignSecondaryIpsRequest) SetSecondaryIpCount(secondaryIpCount int) {
    r.SecondaryIpCount = &secondaryIpCount
}

/* param secondaryIpMaskLen: 指定分配的网段掩码长度, 支持24-28位掩码长度，不能与secondaryIpCount或secondaryIps同时指定，不支持抢占重分配(Optional) */
func (r *AssignSecondaryIpsRequest) SetSecondaryIpMaskLen(secondaryIpMaskLen int) {
    r.SecondaryIpMaskLen = &secondaryIpMaskLen
}

/* param secondaryIpAddress: 指定分配的网段中第一个secondaryIp地址，不能与secondaryIpCount或secondaryIps同时指定，secondaryIpAddress与secondaryIpMaskLen需要保持一致，否则无法创建(Optional) */
func (r *AssignSecondaryIpsRequest) SetSecondaryIpAddress(secondaryIpAddress string) {
    r.SecondaryIpAddress = &secondaryIpAddress
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r AssignSecondaryIpsRequest) GetRegionId() string {
    return r.RegionId
}

type AssignSecondaryIpsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result AssignSecondaryIpsResult `json:"result"`
}

type AssignSecondaryIpsResult struct {
}