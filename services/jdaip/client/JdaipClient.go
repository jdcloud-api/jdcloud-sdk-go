// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    jdaip "github.com/jdcloud-api/jdcloud-sdk-go/services/jdaip/apis"
    "encoding/json"
    "errors"
)

type JdaipClient struct {
    core.JDCloudClient
}

func NewJdaipClient(credential *core.Credential) *JdaipClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("jdaip.jdcloud-api.com")

    return &JdaipClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "jdaip",
            Revision:    "1.0.0",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *JdaipClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *JdaipClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *JdaipClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 修改notebook信息。 */
func (c *JdaipClient) UpdateNotebook(request *jdaip.UpdateNotebookRequest) (*jdaip.UpdateNotebookResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.UpdateNotebookResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询微调运行列表。
 */
func (c *JdaipClient) DescribeRuns(request *jdaip.DescribeRunsRequest) (*jdaip.DescribeRunsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeRunsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新推理服务描述 */
func (c *JdaipClient) UpdateInference(request *jdaip.UpdateInferenceRequest) (*jdaip.UpdateInferenceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.UpdateInferenceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新工作空间内成员。 */
func (c *JdaipClient) UpdateMembers(request *jdaip.UpdateMembersRequest) (*jdaip.UpdateMembersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.UpdateMembersResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 关联队列。 */
func (c *JdaipClient) AddQueues(request *jdaip.AddQueuesRequest) (*jdaip.AddQueuesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.AddQueuesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询工作空间详情 */
func (c *JdaipClient) DescribeWorkspace(request *jdaip.DescribeWorkspaceRequest) (*jdaip.DescribeWorkspaceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeWorkspaceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 停止微调运行。
 */
func (c *JdaipClient) StopRun(request *jdaip.StopRunRequest) (*jdaip.StopRunResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.StopRunResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取模型版本的详情 */
func (c *JdaipClient) DescribeModelVersion(request *jdaip.DescribeModelVersionRequest) (*jdaip.DescribeModelVersionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeModelVersionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询关联队列 */
func (c *JdaipClient) DescribeQueueIds(request *jdaip.DescribeQueueIdsRequest) (*jdaip.DescribeQueueIdsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeQueueIdsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询微调实验列表。
 */
func (c *JdaipClient) DescribeExperiments(request *jdaip.DescribeExperimentsRequest) (*jdaip.DescribeExperimentsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeExperimentsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取数据集列表 */
func (c *JdaipClient) DescribeDatasets(request *jdaip.DescribeDatasetsRequest) (*jdaip.DescribeDatasetsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeDatasetsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取数据集版本详情 */
func (c *JdaipClient) DescribeDatasetVersion(request *jdaip.DescribeDatasetVersionRequest) (*jdaip.DescribeDatasetVersionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeDatasetVersionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 在工作空间下创建一个Notebook实例。

## 接口说明
- `资源队列`: 必须选择一个队列，CPU和内存必须指定，是否使用GPU可以按需选择。
- `存储空间`: 使用用户个人存储，第一块存储默认作为工作目录，挂载到Notebook实例中`/mnt/workspace`目录下。`cfs`和`jpfs`类型存储只能选择与队列同vpc下的资源。
- `数据集`: 可选择公共数据集或个人数据集。`cfs`和`jpfs`类型的数据集只能选择与队列同vpc下的数据集。
- `模型`: 可选择公共模型或个人模型。`cfs`和`jpfs`类型的模型只能选择与队列同vpc下的模型。
- `SSH连接`: 开启后需要选择一个与队列同vpc下的负载均衡(LB)，并设置一个未占用的监听端口，实例运行后可以通过LB的公网IP和端口进行SSH访问。

## Notebook环境说明
- Notebook通过(/home/.notebook_utils/notebook_start.sh)脚本启动，启动脚本不可更改。
- 系统通过探测Notebook容器内的8888端口探活。
- 平台默认使用conda配置(/opt/conda/.condarc), conda环境目录以及conda管理的pip存储都会配置为使用用户个人存储, 以便数据不会在下次启动时丢失。
- 平台默认配置pip配置文件/conf/pip/$BASE_ENV_NAME.conf，由conda激活时接管。
- 如果用户需要自定义配置，只需要在个人存储中编写脚本(/mnt/workspace/.custom/custom_config.sh)，之后再次启动时平台将不会做任何(conda和pip)配置。
 */
func (c *JdaipClient) CreateNotebook(request *jdaip.CreateNotebookRequest) (*jdaip.CreateNotebookResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.CreateNotebookResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询指定监控维度的列表 */
func (c *JdaipClient) ListMetrics(request *jdaip.ListMetricsRequest) (*jdaip.ListMetricsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.ListMetricsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询保存镜像任务列表。 */
func (c *JdaipClient) DescribeImageTasks(request *jdaip.DescribeImageTasksRequest) (*jdaip.DescribeImageTasksResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeImageTasksResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建镜像 */
func (c *JdaipClient) CreateImage(request *jdaip.CreateImageRequest) (*jdaip.CreateImageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.CreateImageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除微调运行。
 */
func (c *JdaipClient) DeleteRun(request *jdaip.DeleteRunRequest) (*jdaip.DeleteRunResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DeleteRunResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 按notebook状态统计数量。 */
func (c *JdaipClient) DescribeNotebookCount(request *jdaip.DescribeNotebookCountRequest) (*jdaip.DescribeNotebookCountResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeNotebookCountResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 停止推理服务 */
func (c *JdaipClient) StopInference(request *jdaip.StopInferenceRequest) (*jdaip.StopInferenceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.StopInferenceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 解绑队列 */
func (c *JdaipClient) RemoveQueues(request *jdaip.RemoveQueuesRequest) (*jdaip.RemoveQueuesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.RemoveQueuesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取镜像列表 */
func (c *JdaipClient) DescribeImages(request *jdaip.DescribeImagesRequest) (*jdaip.DescribeImagesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeImagesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改数据集信息 */
func (c *JdaipClient) UpdateDataset(request *jdaip.UpdateDatasetRequest) (*jdaip.UpdateDatasetResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.UpdateDatasetResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建微调运行。
 */
func (c *JdaipClient) CreateRun(request *jdaip.CreateRunRequest) (*jdaip.CreateRunResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.CreateRunResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加工作空间内成员。 */
func (c *JdaipClient) AddMembers(request *jdaip.AddMembersRequest) (*jdaip.AddMembersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.AddMembersResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询公共模型列表 */
func (c *JdaipClient) DescribePublicModels(request *jdaip.DescribePublicModelsRequest) (*jdaip.DescribePublicModelsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribePublicModelsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取微调运行事件。
 */
func (c *JdaipClient) GetRunEvents(request *jdaip.GetRunEventsRequest) (*jdaip.GetRunEventsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.GetRunEventsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取notebook日志，采用(Server-Sent-Events)方式流式输出。 */
func (c *JdaipClient) GetNotebookLogs(request *jdaip.GetNotebookLogsRequest) (*jdaip.GetNotebookLogsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.GetNotebookLogsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询工作空间内成员 */
func (c *JdaipClient) DescribeMembers(request *jdaip.DescribeMembersRequest) (*jdaip.DescribeMembersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeMembersResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询训练任务列表。
 */
func (c *JdaipClient) DescribeJobs(request *jdaip.DescribeJobsRequest) (*jdaip.DescribeJobsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeJobsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取训练任务事件。
可以了解到训练任务的执行过程中的各种事件信息，例如开始创建等。
 */
func (c *JdaipClient) GetJobEvents(request *jdaip.GetJobEventsRequest) (*jdaip.GetJobEventsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.GetJobEventsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除训练任务。
 */
func (c *JdaipClient) DeleteJob(request *jdaip.DeleteJobRequest) (*jdaip.DeleteJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DeleteJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取数据集的版本列表 */
func (c *JdaipClient) DescribeDatasetVersions(request *jdaip.DescribeDatasetVersionsRequest) (*jdaip.DescribeDatasetVersionsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeDatasetVersionsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除数据集版本 */
func (c *JdaipClient) DeleteDatasetVersion(request *jdaip.DeleteDatasetVersionRequest) (*jdaip.DeleteDatasetVersionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DeleteDatasetVersionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询微调运行详情。
 */
func (c *JdaipClient) DescribeRun(request *jdaip.DescribeRunRequest) (*jdaip.DescribeRunResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeRunResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取镜像详情 */
func (c *JdaipClient) DescribeImage(request *jdaip.DescribeImageRequest) (*jdaip.DescribeImageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeImageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取notebook pod列表。 */
func (c *JdaipClient) GetNotebookPods(request *jdaip.GetNotebookPodsRequest) (*jdaip.GetNotebookPodsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.GetNotebookPodsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除保存镜像任务。 */
func (c *JdaipClient) DeleteImageTask(request *jdaip.DeleteImageTaskRequest) (*jdaip.DeleteImageTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DeleteImageTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 移除工作空间内成员 */
func (c *JdaipClient) RemoveMembers(request *jdaip.RemoveMembersRequest) (*jdaip.RemoveMembersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.RemoveMembersResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取构建镜像的pod日志，采用SSE流式返回。
 */
func (c *JdaipClient) GetPodLogs(request *jdaip.GetPodLogsRequest) (*jdaip.GetPodLogsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.GetPodLogsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 停止训练任务。
当执行停止操作时，训练任务会被标记为停止状态，并且不会继续执行，且会释放相关底层资源，停止后也将无法再次启动该任务。
 */
func (c *JdaipClient) StopJob(request *jdaip.StopJobRequest) (*jdaip.StopJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.StopJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除工作空间 */
func (c *JdaipClient) DeleteWorkspace(request *jdaip.DeleteWorkspaceRequest) (*jdaip.DeleteWorkspaceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DeleteWorkspaceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改数据集版本信息 */
func (c *JdaipClient) UpdateDatasetVersion(request *jdaip.UpdateDatasetVersionRequest) (*jdaip.UpdateDatasetVersionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.UpdateDatasetVersionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改模型信息 */
func (c *JdaipClient) UpdateModel(request *jdaip.UpdateModelRequest) (*jdaip.UpdateModelResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.UpdateModelResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除模型版本 */
func (c *JdaipClient) DeleteModelVersion(request *jdaip.DeleteModelVersionRequest) (*jdaip.DeleteModelVersionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DeleteModelVersionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询训练任务详情。
可以获取到训练任务的详细信息，包括状态、创建时间、更新时间等。
 */
func (c *JdaipClient) DescribeJob(request *jdaip.DescribeJobRequest) (*jdaip.DescribeJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 将运行中的Notebook保存为镜像。

## 接口说明
- 镜像以快照的方式进行保存，保存成功后自动注册到用户的镜像资产中。
- 镜像保存过程中Notebook无法停止和删除。不影响正常连接使用，不建议在保存镜像过程中在notebook里操作大量磁盘IO(比如下载大文件)类操作。
 */
func (c *JdaipClient) SaveImage(request *jdaip.SaveImageRequest) (*jdaip.SaveImageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.SaveImageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建数据集/新版本 */
func (c *JdaipClient) CreateDataset(request *jdaip.CreateDatasetRequest) (*jdaip.CreateDatasetResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.CreateDatasetResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据镜像ID删除镜像 */
func (c *JdaipClient) DeleteImage(request *jdaip.DeleteImageRequest) (*jdaip.DeleteImageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DeleteImageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除微调实验。
 */
func (c *JdaipClient) DeleteExperiment(request *jdaip.DeleteExperimentRequest) (*jdaip.DeleteExperimentResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DeleteExperimentResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新工作空间。 */
func (c *JdaipClient) UpdateWorkspace(request *jdaip.UpdateWorkspaceRequest) (*jdaip.UpdateWorkspaceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.UpdateWorkspaceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取推理服务详情 */
func (c *JdaipClient) DescribeInference(request *jdaip.DescribeInferenceRequest) (*jdaip.DescribeInferenceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeInferenceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取推理服务事件 */
func (c *JdaipClient) DescribeInferenceEvents(request *jdaip.DescribeInferenceEventsRequest) (*jdaip.DescribeInferenceEventsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeInferenceEventsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除推理服务 */
func (c *JdaipClient) DeleteService(request *jdaip.DeleteServiceRequest) (*jdaip.DeleteServiceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DeleteServiceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询notebook详情 */
func (c *JdaipClient) DescribeNotebook(request *jdaip.DescribeNotebookRequest) (*jdaip.DescribeNotebookResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeNotebookResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询训练任务类型列表。
可以查询到所有支持的训练任务类型。
 */
func (c *JdaipClient) DescribeJobTypes(request *jdaip.DescribeJobTypesRequest) (*jdaip.DescribeJobTypesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeJobTypesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据数据集ID删除数据集 */
func (c *JdaipClient) DeleteDataset(request *jdaip.DeleteDatasetRequest) (*jdaip.DeleteDatasetResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DeleteDatasetResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据模型ID删除模型 */
func (c *JdaipClient) DeleteModel(request *jdaip.DeleteModelRequest) (*jdaip.DeleteModelResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DeleteModelResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建新模型/新版本。 */
func (c *JdaipClient) CreateModel(request *jdaip.CreateModelRequest) (*jdaip.CreateModelResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.CreateModelResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新微调实验。
 */
func (c *JdaipClient) UpdateExperiment(request *jdaip.UpdateExperimentRequest) (*jdaip.UpdateExperimentResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.UpdateExperimentResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询notebook列表 */
func (c *JdaipClient) DescribeNotebooks(request *jdaip.DescribeNotebooksRequest) (*jdaip.DescribeNotebooksResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeNotebooksResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 启动notebook实例。
只允许停止或失败状态时操作。
如果notebook已经是运行状态，则不会做任何操作。
如果是其它状态，操作接口会报错。
 */
func (c *JdaipClient) StartNotebook(request *jdaip.StartNotebookRequest) (*jdaip.StartNotebookResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.StartNotebookResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建微调实验。
 */
func (c *JdaipClient) CreateExperiment(request *jdaip.CreateExperimentRequest) (*jdaip.CreateExperimentResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.CreateExperimentResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询微调运行配置参数列表。
 */
func (c *JdaipClient) DescribeRunConfigs(request *jdaip.DescribeRunConfigsRequest) (*jdaip.DescribeRunConfigsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeRunConfigsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建推理服务 */
func (c *JdaipClient) CreateInference(request *jdaip.CreateInferenceRequest) (*jdaip.CreateInferenceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.CreateInferenceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改模型版本信息 */
func (c *JdaipClient) UpdateModelVersion(request *jdaip.UpdateModelVersionRequest) (*jdaip.UpdateModelVersionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.UpdateModelVersionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取公共模型版本详情 */
func (c *JdaipClient) DescribePublicModelVersion(request *jdaip.DescribePublicModelVersionRequest) (*jdaip.DescribePublicModelVersionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribePublicModelVersionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建工作空间。 */
func (c *JdaipClient) CreateWorkspace(request *jdaip.CreateWorkspaceRequest) (*jdaip.CreateWorkspaceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.CreateWorkspaceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询工作空间列表 */
func (c *JdaipClient) DescribeWorkspaces(request *jdaip.DescribeWorkspacesRequest) (*jdaip.DescribeWorkspacesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeWorkspacesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建训练任务。
 */
func (c *JdaipClient) CreateJob(request *jdaip.CreateJobRequest) (*jdaip.CreateJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.CreateJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取推理服务列表 */
func (c *JdaipClient) DescribeInferences(request *jdaip.DescribeInferencesRequest) (*jdaip.DescribeInferencesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeInferencesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除notebook。
如果notebook已经不存在了，则不会做任何操作。
其它状态都允许操作。
 */
func (c *JdaipClient) DeleteNotebook(request *jdaip.DeleteNotebookRequest) (*jdaip.DeleteNotebookResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DeleteNotebookResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取推理服务详情 */
func (c *JdaipClient) DescribeService(request *jdaip.DescribeServiceRequest) (*jdaip.DescribeServiceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeServiceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取数据集详情 */
func (c *JdaipClient) DescribeDataset(request *jdaip.DescribeDatasetRequest) (*jdaip.DescribeDatasetResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeDatasetResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新微调运行。
 */
func (c *JdaipClient) UpdateRun(request *jdaip.UpdateRunRequest) (*jdaip.UpdateRunResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.UpdateRunResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 停止notebook实例。
如果notebook已经是停止状态，则不会做任何操作。
除了删除中状态，其它状态都允许操作。
 */
func (c *JdaipClient) StopNotebook(request *jdaip.StopNotebookRequest) (*jdaip.StopNotebookResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.StopNotebookResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取推理服务列表 */
func (c *JdaipClient) DescribeServices(request *jdaip.DescribeServicesRequest) (*jdaip.DescribeServicesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeServicesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取模型的版本列表 */
func (c *JdaipClient) DescribeModelVersions(request *jdaip.DescribeModelVersionsRequest) (*jdaip.DescribeModelVersionsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeModelVersionsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取notebook事件。 */
func (c *JdaipClient) GetNotebookEvents(request *jdaip.GetNotebookEventsRequest) (*jdaip.GetNotebookEventsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.GetNotebookEventsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询私有模型列表 */
func (c *JdaipClient) DescribePrivateModels(request *jdaip.DescribePrivateModelsRequest) (*jdaip.DescribePrivateModelsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribePrivateModelsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 启动推理服务 */
func (c *JdaipClient) StartInference(request *jdaip.StartInferenceRequest) (*jdaip.StartInferenceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.StartInferenceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除推理服务 */
func (c *JdaipClient) DeleteInference(request *jdaip.DeleteInferenceRequest) (*jdaip.DeleteInferenceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DeleteInferenceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询微调实验详情。
 */
func (c *JdaipClient) DescribeExperiment(request *jdaip.DescribeExperimentRequest) (*jdaip.DescribeExperimentResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeExperimentResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询保存镜像任务日志。 */
func (c *JdaipClient) DescribeImageTaskLog(request *jdaip.DescribeImageTaskLogRequest) (*jdaip.DescribeImageTaskLogResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &jdaip.DescribeImageTaskLogResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

