// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type GetNotebookLogsRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 工作空间ID  */
    WorkspaceId string `json:"workspaceId"`

    /* notebook ID  */
    NotebookId string `json:"notebookId"`

    /* Pod名称  */
    PodName string `json:"podName"`

    /* 从最后多少条开始。 (Optional) */
    Tail *int `json:"tail"`
}

/*
 * param regionId: 地域ID (Required)
 * param workspaceId: 工作空间ID (Required)
 * param notebookId: notebook ID (Required)
 * param podName: Pod名称 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewGetNotebookLogsRequest(
    regionId string,
    workspaceId string,
    notebookId string,
    podName string,
) *GetNotebookLogsRequest {

	return &GetNotebookLogsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/nb-regions/{regionId}/workspace/{workspaceId}/notebook/{notebookId}/pod/{podName}:logs",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        WorkspaceId: workspaceId,
        NotebookId: notebookId,
        PodName: podName,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param workspaceId: 工作空间ID (Required)
 * param notebookId: notebook ID (Required)
 * param podName: Pod名称 (Required)
 * param tail: 从最后多少条开始。 (Optional)
 */
func NewGetNotebookLogsRequestWithAllParams(
    regionId string,
    workspaceId string,
    notebookId string,
    podName string,
    tail *int,
) *GetNotebookLogsRequest {

    return &GetNotebookLogsRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/nb-regions/{regionId}/workspace/{workspaceId}/notebook/{notebookId}/pod/{podName}:logs",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        WorkspaceId: workspaceId,
        NotebookId: notebookId,
        PodName: podName,
        Tail: tail,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewGetNotebookLogsRequestWithoutParam() *GetNotebookLogsRequest {

    return &GetNotebookLogsRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/nb-regions/{regionId}/workspace/{workspaceId}/notebook/{notebookId}/pod/{podName}:logs",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *GetNotebookLogsRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param workspaceId: 工作空间ID(Required) */
func (r *GetNotebookLogsRequest) SetWorkspaceId(workspaceId string) {
    r.WorkspaceId = workspaceId
}
/* param notebookId: notebook ID(Required) */
func (r *GetNotebookLogsRequest) SetNotebookId(notebookId string) {
    r.NotebookId = notebookId
}
/* param podName: Pod名称(Required) */
func (r *GetNotebookLogsRequest) SetPodName(podName string) {
    r.PodName = podName
}
/* param tail: 从最后多少条开始。(Optional) */
func (r *GetNotebookLogsRequest) SetTail(tail int) {
    r.Tail = &tail
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r GetNotebookLogsRequest) GetRegionId() string {
    return r.RegionId
}

type GetNotebookLogsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result GetNotebookLogsResult `json:"result"`
}

type GetNotebookLogsResult struct {
}