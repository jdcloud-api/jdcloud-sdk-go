// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    jdaip "github.com/jdcloud-api/jdcloud-sdk-go/services/jdaip/models"
)

type StartNotebookRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 工作空间ID  */
    WorkspaceId string `json:"workspaceId"`

    /* notebook ID  */
    NotebookId string `json:"notebookId"`

    /* 更换资源配置。不需要更换时需要传null。 (Optional) */
    WorkloadSpec *jdaip.WorkloadSpec `json:"workloadSpec"`

    /* 更换公网访问配置。不需要更换时需要传null。 (Optional) */
    LbSpec *jdaip.LbSpec `json:"lbSpec"`

    /* 是否移除公网访问配置。 (Optional) */
    RemoveLb *bool `json:"removeLb"`
}

/*
 * param regionId: 地域ID (Required)
 * param workspaceId: 工作空间ID (Required)
 * param notebookId: notebook ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewStartNotebookRequest(
    regionId string,
    workspaceId string,
    notebookId string,
) *StartNotebookRequest {

	return &StartNotebookRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/nb-regions/{regionId}/workspace/{workspaceId}/notebook/{notebookId}:start",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        WorkspaceId: workspaceId,
        NotebookId: notebookId,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param workspaceId: 工作空间ID (Required)
 * param notebookId: notebook ID (Required)
 * param workloadSpec: 更换资源配置。不需要更换时需要传null。 (Optional)
 * param lbSpec: 更换公网访问配置。不需要更换时需要传null。 (Optional)
 * param removeLb: 是否移除公网访问配置。 (Optional)
 */
func NewStartNotebookRequestWithAllParams(
    regionId string,
    workspaceId string,
    notebookId string,
    workloadSpec *jdaip.WorkloadSpec,
    lbSpec *jdaip.LbSpec,
    removeLb *bool,
) *StartNotebookRequest {

    return &StartNotebookRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/nb-regions/{regionId}/workspace/{workspaceId}/notebook/{notebookId}:start",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        WorkspaceId: workspaceId,
        NotebookId: notebookId,
        WorkloadSpec: workloadSpec,
        LbSpec: lbSpec,
        RemoveLb: removeLb,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewStartNotebookRequestWithoutParam() *StartNotebookRequest {

    return &StartNotebookRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/nb-regions/{regionId}/workspace/{workspaceId}/notebook/{notebookId}:start",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *StartNotebookRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param workspaceId: 工作空间ID(Required) */
func (r *StartNotebookRequest) SetWorkspaceId(workspaceId string) {
    r.WorkspaceId = workspaceId
}
/* param notebookId: notebook ID(Required) */
func (r *StartNotebookRequest) SetNotebookId(notebookId string) {
    r.NotebookId = notebookId
}
/* param workloadSpec: 更换资源配置。不需要更换时需要传null。(Optional) */
func (r *StartNotebookRequest) SetWorkloadSpec(workloadSpec *jdaip.WorkloadSpec) {
    r.WorkloadSpec = workloadSpec
}
/* param lbSpec: 更换公网访问配置。不需要更换时需要传null。(Optional) */
func (r *StartNotebookRequest) SetLbSpec(lbSpec *jdaip.LbSpec) {
    r.LbSpec = lbSpec
}
/* param removeLb: 是否移除公网访问配置。(Optional) */
func (r *StartNotebookRequest) SetRemoveLb(removeLb bool) {
    r.RemoveLb = &removeLb
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r StartNotebookRequest) GetRegionId() string {
    return r.RegionId
}

type StartNotebookResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result StartNotebookResult `json:"result"`
}

type StartNotebookResult struct {
}