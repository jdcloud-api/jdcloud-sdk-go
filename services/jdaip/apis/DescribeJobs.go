// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    jdaip "github.com/jdcloud-api/jdcloud-sdk-go/services/jdaip/models"
)

type DescribeJobsRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 工作空间ID  */
    WorkspaceId string `json:"workspaceId"`

    /* 页码；默认为1。 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 分页大小；默认为20；取值范围[1, 500]。 (Optional) */
    PageSize *int `json:"pageSize"`

    /* <b>filters 中支持使用以下关键字进行过滤</b>
`jobId`: 训练任务ID，精确匹配，支持多个。
`name`: 训练任务名称，模糊匹配，支持单个。
`jobType`: 训练任务类型，精确匹配，支持多个。
`state`: 训练任务的状态，精确匹配，支持多个。
`createUser`: 创建人名称，模糊匹配，支持单个。
 (Optional) */
    Filters []jdaip.Filter `json:"filters"`
}

/*
 * param regionId: 地域ID (Required)
 * param workspaceId: 工作空间ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeJobsRequest(
    regionId string,
    workspaceId string,
) *DescribeJobsRequest {

	return &DescribeJobsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/train/{regionId}/workspaces/{workspaceId}/jobs",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        WorkspaceId: workspaceId,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param workspaceId: 工作空间ID (Required)
 * param pageNumber: 页码；默认为1。 (Optional)
 * param pageSize: 分页大小；默认为20；取值范围[1, 500]。 (Optional)
 * param filters: <b>filters 中支持使用以下关键字进行过滤</b>
`jobId`: 训练任务ID，精确匹配，支持多个。
`name`: 训练任务名称，模糊匹配，支持单个。
`jobType`: 训练任务类型，精确匹配，支持多个。
`state`: 训练任务的状态，精确匹配，支持多个。
`createUser`: 创建人名称，模糊匹配，支持单个。
 (Optional)
 */
func NewDescribeJobsRequestWithAllParams(
    regionId string,
    workspaceId string,
    pageNumber *int,
    pageSize *int,
    filters []jdaip.Filter,
) *DescribeJobsRequest {

    return &DescribeJobsRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/train/{regionId}/workspaces/{workspaceId}/jobs",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        WorkspaceId: workspaceId,
        PageNumber: pageNumber,
        PageSize: pageSize,
        Filters: filters,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeJobsRequestWithoutParam() *DescribeJobsRequest {

    return &DescribeJobsRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/train/{regionId}/workspaces/{workspaceId}/jobs",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *DescribeJobsRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param workspaceId: 工作空间ID(Required) */
func (r *DescribeJobsRequest) SetWorkspaceId(workspaceId string) {
    r.WorkspaceId = workspaceId
}
/* param pageNumber: 页码；默认为1。(Optional) */
func (r *DescribeJobsRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}
/* param pageSize: 分页大小；默认为20；取值范围[1, 500]。(Optional) */
func (r *DescribeJobsRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}
/* param filters: <b>filters 中支持使用以下关键字进行过滤</b>
`jobId`: 训练任务ID，精确匹配，支持多个。
`name`: 训练任务名称，模糊匹配，支持单个。
`jobType`: 训练任务类型，精确匹配，支持多个。
`state`: 训练任务的状态，精确匹配，支持多个。
`createUser`: 创建人名称，模糊匹配，支持单个。
(Optional) */
func (r *DescribeJobsRequest) SetFilters(filters []jdaip.Filter) {
    r.Filters = filters
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeJobsRequest) GetRegionId() string {
    return r.RegionId
}

type DescribeJobsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeJobsResult `json:"result"`
}

type DescribeJobsResult struct {
    JobListInfo []jdaip.JobListInfo `json:"jobListInfo"`
    TotalCount int `json:"totalCount"`
}