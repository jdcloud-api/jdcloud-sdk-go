// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    lb "github.com/jdcloud-api/jdcloud-sdk-go/services/lb/models"
    common "github.com/jdcloud-api/jdcloud-sdk-go/services/common/models"
)

type DescribeAgTargetsRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* Backend Id  */
    BackendId string `json:"backendId"`

    /* 页码, 默认为1, 取值范围：[1,∞), 页码超过总页数时, 显示最后一页 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 分页大小，默认为20，取值范围：[10,100] (Optional) */
    PageSize *int `json:"pageSize"`

    /* weight - 权重, 支持多个
targetIds - Target ID列表，支持多个
instanceId - Instance ID,仅支持单个
ipAddress - ip地址,仅支持单个
 (Optional) */
    Filters []common.Filter `json:"filters"`

    /* createdTime - 默认值,默认按 createdTime 倒序
weight - 权重值
 (Optional) */
    Sorts []common.Sort `json:"sorts"`
}

/*
 * param regionId: Region ID (Required)
 * param backendId: Backend Id (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeAgTargetsRequest(
    regionId string,
    backendId string,
) *DescribeAgTargetsRequest {

	return &DescribeAgTargetsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/backends/{backendId}/agTargets",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        BackendId: backendId,
	}
}

/*
 * param regionId: Region ID (Required)
 * param backendId: Backend Id (Required)
 * param pageNumber: 页码, 默认为1, 取值范围：[1,∞), 页码超过总页数时, 显示最后一页 (Optional)
 * param pageSize: 分页大小，默认为20，取值范围：[10,100] (Optional)
 * param filters: weight - 权重, 支持多个
targetIds - Target ID列表，支持多个
instanceId - Instance ID,仅支持单个
ipAddress - ip地址,仅支持单个
 (Optional)
 * param sorts: createdTime - 默认值,默认按 createdTime 倒序
weight - 权重值
 (Optional)
 */
func NewDescribeAgTargetsRequestWithAllParams(
    regionId string,
    backendId string,
    pageNumber *int,
    pageSize *int,
    filters []common.Filter,
    sorts []common.Sort,
) *DescribeAgTargetsRequest {

    return &DescribeAgTargetsRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/backends/{backendId}/agTargets",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        BackendId: backendId,
        PageNumber: pageNumber,
        PageSize: pageSize,
        Filters: filters,
        Sorts: sorts,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeAgTargetsRequestWithoutParam() *DescribeAgTargetsRequest {

    return &DescribeAgTargetsRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/backends/{backendId}/agTargets",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *DescribeAgTargetsRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param backendId: Backend Id(Required) */
func (r *DescribeAgTargetsRequest) SetBackendId(backendId string) {
    r.BackendId = backendId
}
/* param pageNumber: 页码, 默认为1, 取值范围：[1,∞), 页码超过总页数时, 显示最后一页(Optional) */
func (r *DescribeAgTargetsRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}
/* param pageSize: 分页大小，默认为20，取值范围：[10,100](Optional) */
func (r *DescribeAgTargetsRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}
/* param filters: weight - 权重, 支持多个
targetIds - Target ID列表，支持多个
instanceId - Instance ID,仅支持单个
ipAddress - ip地址,仅支持单个
(Optional) */
func (r *DescribeAgTargetsRequest) SetFilters(filters []common.Filter) {
    r.Filters = filters
}
/* param sorts: createdTime - 默认值,默认按 createdTime 倒序
weight - 权重值
(Optional) */
func (r *DescribeAgTargetsRequest) SetSorts(sorts []common.Sort) {
    r.Sorts = sorts
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeAgTargetsRequest) GetRegionId() string {
    return r.RegionId
}

type DescribeAgTargetsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeAgTargetsResult `json:"result"`
}

type DescribeAgTargetsResult struct {
    Targets []lb.AgTarget `json:"targets"`
    TotalCount int `json:"totalCount"`
}