// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    lb "github.com/jdcloud-api/jdcloud-sdk-go/services/lb/models"
    common "github.com/jdcloud-api/jdcloud-sdk-go/services/common/models"
)

type DescribeLoadBalancersRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* 页码, 默认为1, 取值范围：[1,∞), 页码超过总页数时, 显示最后一页 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 分页大小，默认为20，取值范围：[10,100] (Optional) */
    PageSize *int `json:"pageSize"`

    /* loadBalancerType - 负载均衡类型，取值为：alb、nlb、dnlb，默认alb，支持单个
loadBalancerIds - 负载均衡ID列表，支持多个
loadBalancerNames - 负载均衡名称列表，支持多个; 支持operator为like的模糊搜索，此时name只能传单个
vpcId - 负载均衡所在Vpc的Id，支持单个
azType - 负载均衡az类型，取值：all(全部类型)，standard(标准负载均衡)，edge(边缘负载均衡)，默认all，支持单个
azs - 可用区，仅支持边缘可用区，支持多个
privateIpAddresses - 负载均衡的vip地址，支持多个
ipv6Addresses - 负载均衡的ipv6地址，支持多个
serviceCodes -  产品唯一掩码，支持多个
serviceIds   - 产品唯一ID，支持多个
elasticIpAddress - 负载均衡的弹性公网ip地址，支持单个
targetPrivateIpAddress - 后端target的内网IP地址，支持单个
customizedConfigurationIds - 负载均衡绑定的个性化配置ID，支持多个
 (Optional) */
    Filters []common.Filter `json:"filters"`

    /* Tag筛选条件 (Optional) */
    Tags []lb.TagFilter `json:"tags"`
}

/*
 * param regionId: Region ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeLoadBalancersRequest(
    regionId string,
) *DescribeLoadBalancersRequest {

	return &DescribeLoadBalancersRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/loadBalancers/",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: Region ID (Required)
 * param pageNumber: 页码, 默认为1, 取值范围：[1,∞), 页码超过总页数时, 显示最后一页 (Optional)
 * param pageSize: 分页大小，默认为20，取值范围：[10,100] (Optional)
 * param filters: loadBalancerType - 负载均衡类型，取值为：alb、nlb、dnlb，默认alb，支持单个
loadBalancerIds - 负载均衡ID列表，支持多个
loadBalancerNames - 负载均衡名称列表，支持多个; 支持operator为like的模糊搜索，此时name只能传单个
vpcId - 负载均衡所在Vpc的Id，支持单个
azType - 负载均衡az类型，取值：all(全部类型)，standard(标准负载均衡)，edge(边缘负载均衡)，默认all，支持单个
azs - 可用区，仅支持边缘可用区，支持多个
privateIpAddresses - 负载均衡的vip地址，支持多个
ipv6Addresses - 负载均衡的ipv6地址，支持多个
serviceCodes -  产品唯一掩码，支持多个
serviceIds   - 产品唯一ID，支持多个
elasticIpAddress - 负载均衡的弹性公网ip地址，支持单个
targetPrivateIpAddress - 后端target的内网IP地址，支持单个
customizedConfigurationIds - 负载均衡绑定的个性化配置ID，支持多个
 (Optional)
 * param tags: Tag筛选条件 (Optional)
 */
func NewDescribeLoadBalancersRequestWithAllParams(
    regionId string,
    pageNumber *int,
    pageSize *int,
    filters []common.Filter,
    tags []lb.TagFilter,
) *DescribeLoadBalancersRequest {

    return &DescribeLoadBalancersRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/loadBalancers/",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        PageNumber: pageNumber,
        PageSize: pageSize,
        Filters: filters,
        Tags: tags,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeLoadBalancersRequestWithoutParam() *DescribeLoadBalancersRequest {

    return &DescribeLoadBalancersRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/loadBalancers/",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *DescribeLoadBalancersRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param pageNumber: 页码, 默认为1, 取值范围：[1,∞), 页码超过总页数时, 显示最后一页(Optional) */
func (r *DescribeLoadBalancersRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}
/* param pageSize: 分页大小，默认为20，取值范围：[10,100](Optional) */
func (r *DescribeLoadBalancersRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}
/* param filters: loadBalancerType - 负载均衡类型，取值为：alb、nlb、dnlb，默认alb，支持单个
loadBalancerIds - 负载均衡ID列表，支持多个
loadBalancerNames - 负载均衡名称列表，支持多个; 支持operator为like的模糊搜索，此时name只能传单个
vpcId - 负载均衡所在Vpc的Id，支持单个
azType - 负载均衡az类型，取值：all(全部类型)，standard(标准负载均衡)，edge(边缘负载均衡)，默认all，支持单个
azs - 可用区，仅支持边缘可用区，支持多个
privateIpAddresses - 负载均衡的vip地址，支持多个
ipv6Addresses - 负载均衡的ipv6地址，支持多个
serviceCodes -  产品唯一掩码，支持多个
serviceIds   - 产品唯一ID，支持多个
elasticIpAddress - 负载均衡的弹性公网ip地址，支持单个
targetPrivateIpAddress - 后端target的内网IP地址，支持单个
customizedConfigurationIds - 负载均衡绑定的个性化配置ID，支持多个
(Optional) */
func (r *DescribeLoadBalancersRequest) SetFilters(filters []common.Filter) {
    r.Filters = filters
}
/* param tags: Tag筛选条件(Optional) */
func (r *DescribeLoadBalancersRequest) SetTags(tags []lb.TagFilter) {
    r.Tags = tags
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeLoadBalancersRequest) GetRegionId() string {
    return r.RegionId
}

type DescribeLoadBalancersResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeLoadBalancersResult `json:"result"`
}

type DescribeLoadBalancersResult struct {
    LoadBalancers []lb.LoadBalancer `json:"loadBalancers"`
    TotalCount int `json:"totalCount"`
}