// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    lb "github.com/lshuining/jdcloud-sdk-go/services/lb/models"
)

type DescribeBackendRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* Backend Id  */
    BackendId string `json:"backendId"`
}

/*
 * param regionId: Region ID (Required)
 * param backendId: Backend Id (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeBackendRequest(
    regionId string,
    backendId string,
) *DescribeBackendRequest {

	return &DescribeBackendRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/backends/{backendId}",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        BackendId: backendId,
	}
}

/*
 * param regionId: Region ID (Required)
 * param backendId: Backend Id (Required)
 */
func NewDescribeBackendRequestWithAllParams(
    regionId string,
    backendId string,
) *DescribeBackendRequest {

    return &DescribeBackendRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/backends/{backendId}",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        BackendId: backendId,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeBackendRequestWithoutParam() *DescribeBackendRequest {

    return &DescribeBackendRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/backends/{backendId}",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *DescribeBackendRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param backendId: Backend Id(Required) */
func (r *DescribeBackendRequest) SetBackendId(backendId string) {
    r.BackendId = backendId
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeBackendRequest) GetRegionId() string {
    return r.RegionId
}

type DescribeBackendResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeBackendResult `json:"result"`
}

type DescribeBackendResult struct {
    Backend lb.Backend `json:"backend"`
}