// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type DeleteSecurityGroupsRuleRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 安全组ID  */
    Id string `json:"id"`

    /* 规则类型，ingress、egress  */
    RuleType string `json:"ruleType"`

    /* 协议，tcp、udp、icmp 或者 all  */
    Protocol string `json:"protocol"`

    /* 起始端口  */
    FromPort string `json:"fromPort"`

    /* 终止端口  */
    ToPort string `json:"toPort"`

    /* 网络类型，internet、intranet (Optional) */
    NicType *string `json:"nicType"`

    /* 认证策略，accept、drop (Optional) */
    Policy *string `json:"policy"`

    /* 认证策略的权重，1-100 (Optional) */
    Priority *string `json:"priority"`

    /* 目标IP地址范围 (Optional) */
    CidrIp *string `json:"cidrIp"`
}

/*
 * param regionId: 地域ID (Required)
 * param id: 安全组ID (Required)
 * param ruleType: 规则类型，ingress、egress (Required)
 * param protocol: 协议，tcp、udp、icmp 或者 all (Required)
 * param fromPort: 起始端口 (Required)
 * param toPort: 终止端口 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDeleteSecurityGroupsRuleRequest(
    regionId string,
    id string,
    ruleType string,
    protocol string,
    fromPort string,
    toPort string,
) *DeleteSecurityGroupsRuleRequest {

	return &DeleteSecurityGroupsRuleRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/vpc_securityGroups/{id}/rule",
			Method:  "DELETE",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        Id: id,
        RuleType: ruleType,
        Protocol: protocol,
        FromPort: fromPort,
        ToPort: toPort,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param id: 安全组ID (Required)
 * param ruleType: 规则类型，ingress、egress (Required)
 * param protocol: 协议，tcp、udp、icmp 或者 all (Required)
 * param fromPort: 起始端口 (Required)
 * param toPort: 终止端口 (Required)
 * param nicType: 网络类型，internet、intranet (Optional)
 * param policy: 认证策略，accept、drop (Optional)
 * param priority: 认证策略的权重，1-100 (Optional)
 * param cidrIp: 目标IP地址范围 (Optional)
 */
func NewDeleteSecurityGroupsRuleRequestWithAllParams(
    regionId string,
    id string,
    ruleType string,
    protocol string,
    fromPort string,
    toPort string,
    nicType *string,
    policy *string,
    priority *string,
    cidrIp *string,
) *DeleteSecurityGroupsRuleRequest {

    return &DeleteSecurityGroupsRuleRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/vpc_securityGroups/{id}/rule",
            Method:  "DELETE",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Id: id,
        RuleType: ruleType,
        Protocol: protocol,
        FromPort: fromPort,
        ToPort: toPort,
        NicType: nicType,
        Policy: policy,
        Priority: priority,
        CidrIp: cidrIp,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDeleteSecurityGroupsRuleRequestWithoutParam() *DeleteSecurityGroupsRuleRequest {

    return &DeleteSecurityGroupsRuleRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/vpc_securityGroups/{id}/rule",
            Method:  "DELETE",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *DeleteSecurityGroupsRuleRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param id: 安全组ID(Required) */
func (r *DeleteSecurityGroupsRuleRequest) SetId(id string) {
    r.Id = id
}

/* param ruleType: 规则类型，ingress、egress(Required) */
func (r *DeleteSecurityGroupsRuleRequest) SetRuleType(ruleType string) {
    r.RuleType = ruleType
}

/* param protocol: 协议，tcp、udp、icmp 或者 all(Required) */
func (r *DeleteSecurityGroupsRuleRequest) SetProtocol(protocol string) {
    r.Protocol = protocol
}

/* param fromPort: 起始端口(Required) */
func (r *DeleteSecurityGroupsRuleRequest) SetFromPort(fromPort string) {
    r.FromPort = fromPort
}

/* param toPort: 终止端口(Required) */
func (r *DeleteSecurityGroupsRuleRequest) SetToPort(toPort string) {
    r.ToPort = toPort
}

/* param nicType: 网络类型，internet、intranet(Optional) */
func (r *DeleteSecurityGroupsRuleRequest) SetNicType(nicType string) {
    r.NicType = &nicType
}

/* param policy: 认证策略，accept、drop(Optional) */
func (r *DeleteSecurityGroupsRuleRequest) SetPolicy(policy string) {
    r.Policy = &policy
}

/* param priority: 认证策略的权重，1-100(Optional) */
func (r *DeleteSecurityGroupsRuleRequest) SetPriority(priority string) {
    r.Priority = &priority
}

/* param cidrIp: 目标IP地址范围(Optional) */
func (r *DeleteSecurityGroupsRuleRequest) SetCidrIp(cidrIp string) {
    r.CidrIp = &cidrIp
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DeleteSecurityGroupsRuleRequest) GetRegionId() string {
    return r.RegionId
}

type DeleteSecurityGroupsRuleResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DeleteSecurityGroupsRuleResult `json:"result"`
}

type DeleteSecurityGroupsRuleResult struct {
}