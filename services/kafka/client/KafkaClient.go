// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    kafka "github.com/lshuining/jdcloud-sdk-go/services/kafka/apis"
    "encoding/json"
    "errors"
)

type KafkaClient struct {
    core.JDCloudClient
}

func NewKafkaClient(credential *core.Credential) *KafkaClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("kafka.jdcloud-api.com")

    return &KafkaClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "kafka",
            Revision:    "1.0.0",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *KafkaClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *KafkaClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *KafkaClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 创建一个指定配置的kafka实例 */
func (c *KafkaClient) CreateInstance(request *kafka.CreateInstanceRequest) (*kafka.CreateInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kafka.CreateInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询kafka实例的详细信息 */
func (c *KafkaClient) DescribeInstance(request *kafka.DescribeInstanceRequest) (*kafka.DescribeInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kafka.DescribeInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询kafka实例列表 */
func (c *KafkaClient) DescribeInstances(request *kafka.DescribeInstancesRequest) (*kafka.DescribeInstancesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kafka.DescribeInstancesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除按配置计费或包年包月已到期的kafka实例，包年包月未到期不可删除。
状态为创建中和变配中的不可删除。
 */
func (c *KafkaClient) DeleteInstance(request *kafka.DeleteInstanceRequest) (*kafka.DeleteInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kafka.DeleteInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 变更kafka实例的配置，实例为running状态才可变更配置
 */
func (c *KafkaClient) ModifyInstanceSpec(request *kafka.ModifyInstanceSpecRequest) (*kafka.ModifyInstanceSpecResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kafka.ModifyInstanceSpecResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

