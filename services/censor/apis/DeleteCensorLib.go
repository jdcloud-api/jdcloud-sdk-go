// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type DeleteCensorLibRequest struct {

    core.JDCloudRequest

    /* 实例所属的地域ID  */
    RegionId string `json:"regionId"`

    /* 敏感库id  */
    LibId string `json:"libId"`
}

/*
 * param regionId: 实例所属的地域ID (Required)
 * param libId: 敏感库id (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDeleteCensorLibRequest(
    regionId string,
    libId string,
) *DeleteCensorLibRequest {

	return &DeleteCensorLibRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/customCensorLib:custom",
			Method:  "DELETE",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        LibId: libId,
	}
}

/*
 * param regionId: 实例所属的地域ID (Required)
 * param libId: 敏感库id (Required)
 */
func NewDeleteCensorLibRequestWithAllParams(
    regionId string,
    libId string,
) *DeleteCensorLibRequest {

    return &DeleteCensorLibRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/customCensorLib:custom",
            Method:  "DELETE",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        LibId: libId,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDeleteCensorLibRequestWithoutParam() *DeleteCensorLibRequest {

    return &DeleteCensorLibRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/customCensorLib:custom",
            Method:  "DELETE",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 实例所属的地域ID(Required) */
func (r *DeleteCensorLibRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param libId: 敏感库id(Required) */
func (r *DeleteCensorLibRequest) SetLibId(libId string) {
    r.LibId = libId
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DeleteCensorLibRequest) GetRegionId() string {
    return r.RegionId
}

type DeleteCensorLibResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DeleteCensorLibResult `json:"result"`
}

type DeleteCensorLibResult struct {
}