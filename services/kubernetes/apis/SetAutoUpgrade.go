// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    kubernetes "github.com/lshuining/jdcloud-sdk-go/services/kubernetes/models"
)

type SetAutoUpgradeRequest struct {

    core.JDCloudRequest

    /* 地域 ID  */
    RegionId string `json:"regionId"`

    /* 集群 ID  */
    ClusterId string `json:"clusterId"`

    /* 开启或者关闭集群自动升级，开启时必须指定 maintenancePolicy  */
    AutoUpgrade bool `json:"autoUpgrade"`

    /* 开启集群自动升级, 必须配置集群维护策略 (Optional) */
    MaintenanceWindow *kubernetes.MaintenanceWindowSpec `json:"maintenanceWindow"`
}

/*
 * param regionId: 地域 ID (Required)
 * param clusterId: 集群 ID (Required)
 * param autoUpgrade: 开启或者关闭集群自动升级，开启时必须指定 maintenancePolicy (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewSetAutoUpgradeRequest(
    regionId string,
    clusterId string,
    autoUpgrade bool,
) *SetAutoUpgradeRequest {

	return &SetAutoUpgradeRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/clusters/{clusterId}:setAutoUpgrade",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        ClusterId: clusterId,
        AutoUpgrade: autoUpgrade,
	}
}

/*
 * param regionId: 地域 ID (Required)
 * param clusterId: 集群 ID (Required)
 * param autoUpgrade: 开启或者关闭集群自动升级，开启时必须指定 maintenancePolicy (Required)
 * param maintenanceWindow: 开启集群自动升级, 必须配置集群维护策略 (Optional)
 */
func NewSetAutoUpgradeRequestWithAllParams(
    regionId string,
    clusterId string,
    autoUpgrade bool,
    maintenanceWindow *kubernetes.MaintenanceWindowSpec,
) *SetAutoUpgradeRequest {

    return &SetAutoUpgradeRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/clusters/{clusterId}:setAutoUpgrade",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        ClusterId: clusterId,
        AutoUpgrade: autoUpgrade,
        MaintenanceWindow: maintenanceWindow,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewSetAutoUpgradeRequestWithoutParam() *SetAutoUpgradeRequest {

    return &SetAutoUpgradeRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/clusters/{clusterId}:setAutoUpgrade",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 ID(Required) */
func (r *SetAutoUpgradeRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param clusterId: 集群 ID(Required) */
func (r *SetAutoUpgradeRequest) SetClusterId(clusterId string) {
    r.ClusterId = clusterId
}

/* param autoUpgrade: 开启或者关闭集群自动升级，开启时必须指定 maintenancePolicy(Required) */
func (r *SetAutoUpgradeRequest) SetAutoUpgrade(autoUpgrade bool) {
    r.AutoUpgrade = autoUpgrade
}

/* param maintenanceWindow: 开启集群自动升级, 必须配置集群维护策略(Optional) */
func (r *SetAutoUpgradeRequest) SetMaintenanceWindow(maintenanceWindow *kubernetes.MaintenanceWindowSpec) {
    r.MaintenanceWindow = maintenanceWindow
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r SetAutoUpgradeRequest) GetRegionId() string {
    return r.RegionId
}

type SetAutoUpgradeResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result SetAutoUpgradeResult `json:"result"`
}

type SetAutoUpgradeResult struct {
}