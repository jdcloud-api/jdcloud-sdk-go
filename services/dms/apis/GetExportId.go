// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    dms "github.com/lshuining/jdcloud-sdk-go/services/dms/models"
)

type GetExportIdRequest struct {

    core.JDCloudRequest

    /* 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md)  */
    RegionId string `json:"regionId"`

    /* 数据源id (Optional) */
    DataSourceId *int `json:"dataSourceId"`

    /* 数据库名称 (Optional) */
    DbName *string `json:"dbName"`

    /* 导出文件字符编码 (Optional) */
    Charset *string `json:"charset"`

    /* 导出方式，SYNC("SYNC", 0), ASYNC("ASYNC", 1)，当前只支持SYNC导出; (Optional) */
    ExportTypeEnum *string `json:"exportTypeEnum"`

    /* 导出文件格式，CSV("CSV", 0), SQL("SQL", 1); (Optional) */
    ExportFileTypeEnum *string `json:"exportFileTypeEnum"`

    /* 导出内容，DATA("DATA", 0), STRUCT("STRUCT", 1), STRUCT_DATA("STRUCT_DATA", 2); (Optional) */
    ExportContentTypeEnum *string `json:"exportContentTypeEnum"`

    /* 查询条件。 (Optional) */
    TableFilters []dms.TableFilter `json:"tableFilters"`
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md) (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewGetExportIdRequest(
    regionId string,
) *GetExportIdRequest {

	return &GetExportIdRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/console:getExportId",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md) (Required)
 * param dataSourceId: 数据源id (Optional)
 * param dbName: 数据库名称 (Optional)
 * param charset: 导出文件字符编码 (Optional)
 * param exportTypeEnum: 导出方式，SYNC("SYNC", 0), ASYNC("ASYNC", 1)，当前只支持SYNC导出; (Optional)
 * param exportFileTypeEnum: 导出文件格式，CSV("CSV", 0), SQL("SQL", 1); (Optional)
 * param exportContentTypeEnum: 导出内容，DATA("DATA", 0), STRUCT("STRUCT", 1), STRUCT_DATA("STRUCT_DATA", 2); (Optional)
 * param tableFilters: 查询条件。 (Optional)
 */
func NewGetExportIdRequestWithAllParams(
    regionId string,
    dataSourceId *int,
    dbName *string,
    charset *string,
    exportTypeEnum *string,
    exportFileTypeEnum *string,
    exportContentTypeEnum *string,
    tableFilters []dms.TableFilter,
) *GetExportIdRequest {

    return &GetExportIdRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/console:getExportId",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        DataSourceId: dataSourceId,
        DbName: dbName,
        Charset: charset,
        ExportTypeEnum: exportTypeEnum,
        ExportFileTypeEnum: exportFileTypeEnum,
        ExportContentTypeEnum: exportContentTypeEnum,
        TableFilters: tableFilters,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewGetExportIdRequestWithoutParam() *GetExportIdRequest {

    return &GetExportIdRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/console:getExportId",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md)(Required) */
func (r *GetExportIdRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param dataSourceId: 数据源id(Optional) */
func (r *GetExportIdRequest) SetDataSourceId(dataSourceId int) {
    r.DataSourceId = &dataSourceId
}

/* param dbName: 数据库名称(Optional) */
func (r *GetExportIdRequest) SetDbName(dbName string) {
    r.DbName = &dbName
}

/* param charset: 导出文件字符编码(Optional) */
func (r *GetExportIdRequest) SetCharset(charset string) {
    r.Charset = &charset
}

/* param exportTypeEnum: 导出方式，SYNC("SYNC", 0), ASYNC("ASYNC", 1)，当前只支持SYNC导出;(Optional) */
func (r *GetExportIdRequest) SetExportTypeEnum(exportTypeEnum string) {
    r.ExportTypeEnum = &exportTypeEnum
}

/* param exportFileTypeEnum: 导出文件格式，CSV("CSV", 0), SQL("SQL", 1);(Optional) */
func (r *GetExportIdRequest) SetExportFileTypeEnum(exportFileTypeEnum string) {
    r.ExportFileTypeEnum = &exportFileTypeEnum
}

/* param exportContentTypeEnum: 导出内容，DATA("DATA", 0), STRUCT("STRUCT", 1), STRUCT_DATA("STRUCT_DATA", 2);(Optional) */
func (r *GetExportIdRequest) SetExportContentTypeEnum(exportContentTypeEnum string) {
    r.ExportContentTypeEnum = &exportContentTypeEnum
}

/* param tableFilters: 查询条件。(Optional) */
func (r *GetExportIdRequest) SetTableFilters(tableFilters []dms.TableFilter) {
    r.TableFilters = tableFilters
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r GetExportIdRequest) GetRegionId() string {
    return r.RegionId
}

type GetExportIdResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result GetExportIdResult `json:"result"`
}

type GetExportIdResult struct {
    StrResult string `json:"strResult"`
}