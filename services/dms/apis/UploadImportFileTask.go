// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    dms "github.com/lshuining/jdcloud-sdk-go/services/dms/models"
)

type UploadImportFileTaskRequest struct {

    core.JDCloudRequest

    /* 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md)  */
    RegionId string `json:"regionId"`

    /* 上传文件任务id (Optional) */
    TaskId *string `json:"taskId"`

    /* 上传文件分片号 (Optional) */
    ChunkNumber *int `json:"chunkNumber"`

    /* 分片文件MD5 (Optional) */
    Identifier *string `json:"identifier"`

    /* 分片文件 (Optional) */
    File []int `json:"file"`
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md) (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUploadImportFileTaskRequest(
    regionId string,
) *UploadImportFileTaskRequest {

	return &UploadImportFileTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/importFileTask:upload",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md) (Required)
 * param taskId: 上传文件任务id (Optional)
 * param chunkNumber: 上传文件分片号 (Optional)
 * param identifier: 分片文件MD5 (Optional)
 * param file: 分片文件 (Optional)
 */
func NewUploadImportFileTaskRequestWithAllParams(
    regionId string,
    taskId *string,
    chunkNumber *int,
    identifier *string,
    file []int,
) *UploadImportFileTaskRequest {

    return &UploadImportFileTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/importFileTask:upload",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        TaskId: taskId,
        ChunkNumber: chunkNumber,
        Identifier: identifier,
        File: file,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUploadImportFileTaskRequestWithoutParam() *UploadImportFileTaskRequest {

    return &UploadImportFileTaskRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/importFileTask:upload",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md)(Required) */
func (r *UploadImportFileTaskRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param taskId: 上传文件任务id(Optional) */
func (r *UploadImportFileTaskRequest) SetTaskId(taskId string) {
    r.TaskId = &taskId
}

/* param chunkNumber: 上传文件分片号(Optional) */
func (r *UploadImportFileTaskRequest) SetChunkNumber(chunkNumber int) {
    r.ChunkNumber = &chunkNumber
}

/* param identifier: 分片文件MD5(Optional) */
func (r *UploadImportFileTaskRequest) SetIdentifier(identifier string) {
    r.Identifier = &identifier
}

/* param file: 分片文件(Optional) */
func (r *UploadImportFileTaskRequest) SetFile(file []int) {
    r.File = file
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UploadImportFileTaskRequest) GetRegionId() string {
    return r.RegionId
}

type UploadImportFileTaskResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UploadImportFileTaskResult `json:"result"`
}

type UploadImportFileTaskResult struct {
    UploadImportFileResult dms.UploadImportFileResult `json:"uploadImportFileResult"`
}