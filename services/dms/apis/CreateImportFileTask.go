// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type CreateImportFileTaskRequest struct {

    core.JDCloudRequest

    /* 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md)  */
    RegionId string `json:"regionId"`

    /* 文件名称 (Optional) */
    Filename *string `json:"filename"`

    /* 文件总大小 (Optional) */
    TotalSize *int `json:"totalSize"`

    /* 文件分片大小 (Optional) */
    ChunkSize *int `json:"chunkSize"`

    /* 文件分片数 (Optional) */
    TotalChunks *int `json:"totalChunks"`
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md) (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateImportFileTaskRequest(
    regionId string,
) *CreateImportFileTaskRequest {

	return &CreateImportFileTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/importFileTask:create",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md) (Required)
 * param filename: 文件名称 (Optional)
 * param totalSize: 文件总大小 (Optional)
 * param chunkSize: 文件分片大小 (Optional)
 * param totalChunks: 文件分片数 (Optional)
 */
func NewCreateImportFileTaskRequestWithAllParams(
    regionId string,
    filename *string,
    totalSize *int,
    chunkSize *int,
    totalChunks *int,
) *CreateImportFileTaskRequest {

    return &CreateImportFileTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/importFileTask:create",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Filename: filename,
        TotalSize: totalSize,
        ChunkSize: chunkSize,
        TotalChunks: totalChunks,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateImportFileTaskRequestWithoutParam() *CreateImportFileTaskRequest {

    return &CreateImportFileTaskRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/importFileTask:create",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md)(Required) */
func (r *CreateImportFileTaskRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param filename: 文件名称(Optional) */
func (r *CreateImportFileTaskRequest) SetFilename(filename string) {
    r.Filename = &filename
}

/* param totalSize: 文件总大小(Optional) */
func (r *CreateImportFileTaskRequest) SetTotalSize(totalSize int) {
    r.TotalSize = &totalSize
}

/* param chunkSize: 文件分片大小(Optional) */
func (r *CreateImportFileTaskRequest) SetChunkSize(chunkSize int) {
    r.ChunkSize = &chunkSize
}

/* param totalChunks: 文件分片数(Optional) */
func (r *CreateImportFileTaskRequest) SetTotalChunks(totalChunks int) {
    r.TotalChunks = &totalChunks
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateImportFileTaskRequest) GetRegionId() string {
    return r.RegionId
}

type CreateImportFileTaskResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateImportFileTaskResult `json:"result"`
}

type CreateImportFileTaskResult struct {
    UploadId string `json:"uploadId"`
}