// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type CreateDataFlowRequest struct {

    core.JDCloudRequest

    /* 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md)  */
    RegionId string `json:"regionId"`

    /* 数据库id (Optional) */
    DataSourceId *int `json:"dataSourceId"`

    /* 数据库名称 (Optional) */
    DbName *string `json:"dbName"`

    /* 执行方式，AUTO("AUTO", 0), BY_CREATOR("BY_CREATOR", 1) (Optional) */
    TaskPlanTypeEnum *string `json:"taskPlanTypeEnum"`

    /* DBA审批方式，AUTO("AUTO", 0), MANUAL("MANUAL", 1) (Optional) */
    DbaApproveTypeEnum *string `json:"dbaApproveTypeEnum"`

    /* 申请原因 (Optional) */
    Memo *string `json:"memo"`

    /* SQL文本，变更SQL选择文本时，必填 (Optional) */
    SqlText *string `json:"sqlText"`

    /* SQL附件导入任务Id (Optional) */
    SqlFileTaskId *string `json:"sqlFileTaskId"`

    /* 回滚SQL文本，选填 (Optional) */
    RollbackSqlText *string `json:"rollbackSqlText"`

    /* 回滚SQL附件导入任务Id (Optional) */
    RollbackFileTaskId *string `json:"rollbackFileTaskId"`
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md) (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateDataFlowRequest(
    regionId string,
) *CreateDataFlowRequest {

	return &CreateDataFlowRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/dataFlow:create",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md) (Required)
 * param dataSourceId: 数据库id (Optional)
 * param dbName: 数据库名称 (Optional)
 * param taskPlanTypeEnum: 执行方式，AUTO("AUTO", 0), BY_CREATOR("BY_CREATOR", 1) (Optional)
 * param dbaApproveTypeEnum: DBA审批方式，AUTO("AUTO", 0), MANUAL("MANUAL", 1) (Optional)
 * param memo: 申请原因 (Optional)
 * param sqlText: SQL文本，变更SQL选择文本时，必填 (Optional)
 * param sqlFileTaskId: SQL附件导入任务Id (Optional)
 * param rollbackSqlText: 回滚SQL文本，选填 (Optional)
 * param rollbackFileTaskId: 回滚SQL附件导入任务Id (Optional)
 */
func NewCreateDataFlowRequestWithAllParams(
    regionId string,
    dataSourceId *int,
    dbName *string,
    taskPlanTypeEnum *string,
    dbaApproveTypeEnum *string,
    memo *string,
    sqlText *string,
    sqlFileTaskId *string,
    rollbackSqlText *string,
    rollbackFileTaskId *string,
) *CreateDataFlowRequest {

    return &CreateDataFlowRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/dataFlow:create",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        DataSourceId: dataSourceId,
        DbName: dbName,
        TaskPlanTypeEnum: taskPlanTypeEnum,
        DbaApproveTypeEnum: dbaApproveTypeEnum,
        Memo: memo,
        SqlText: sqlText,
        SqlFileTaskId: sqlFileTaskId,
        RollbackSqlText: rollbackSqlText,
        RollbackFileTaskId: rollbackFileTaskId,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateDataFlowRequestWithoutParam() *CreateDataFlowRequest {

    return &CreateDataFlowRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/dataFlow:create",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md)(Required) */
func (r *CreateDataFlowRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param dataSourceId: 数据库id(Optional) */
func (r *CreateDataFlowRequest) SetDataSourceId(dataSourceId int) {
    r.DataSourceId = &dataSourceId
}

/* param dbName: 数据库名称(Optional) */
func (r *CreateDataFlowRequest) SetDbName(dbName string) {
    r.DbName = &dbName
}

/* param taskPlanTypeEnum: 执行方式，AUTO("AUTO", 0), BY_CREATOR("BY_CREATOR", 1)(Optional) */
func (r *CreateDataFlowRequest) SetTaskPlanTypeEnum(taskPlanTypeEnum string) {
    r.TaskPlanTypeEnum = &taskPlanTypeEnum
}

/* param dbaApproveTypeEnum: DBA审批方式，AUTO("AUTO", 0), MANUAL("MANUAL", 1)(Optional) */
func (r *CreateDataFlowRequest) SetDbaApproveTypeEnum(dbaApproveTypeEnum string) {
    r.DbaApproveTypeEnum = &dbaApproveTypeEnum
}

/* param memo: 申请原因(Optional) */
func (r *CreateDataFlowRequest) SetMemo(memo string) {
    r.Memo = &memo
}

/* param sqlText: SQL文本，变更SQL选择文本时，必填(Optional) */
func (r *CreateDataFlowRequest) SetSqlText(sqlText string) {
    r.SqlText = &sqlText
}

/* param sqlFileTaskId: SQL附件导入任务Id(Optional) */
func (r *CreateDataFlowRequest) SetSqlFileTaskId(sqlFileTaskId string) {
    r.SqlFileTaskId = &sqlFileTaskId
}

/* param rollbackSqlText: 回滚SQL文本，选填(Optional) */
func (r *CreateDataFlowRequest) SetRollbackSqlText(rollbackSqlText string) {
    r.RollbackSqlText = &rollbackSqlText
}

/* param rollbackFileTaskId: 回滚SQL附件导入任务Id(Optional) */
func (r *CreateDataFlowRequest) SetRollbackFileTaskId(rollbackFileTaskId string) {
    r.RollbackFileTaskId = &rollbackFileTaskId
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateDataFlowRequest) GetRegionId() string {
    return r.RegionId
}

type CreateDataFlowResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateDataFlowResult `json:"result"`
}

type CreateDataFlowResult struct {
    FlowId string `json:"flowId"`
}