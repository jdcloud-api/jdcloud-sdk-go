// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    dms "github.com/lshuining/jdcloud-sdk-go/services/dms/models"
)

type CreateExportFlowRequest struct {

    core.JDCloudRequest

    /* 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md)  */
    RegionId string `json:"regionId"`

    /* 数据库id (Optional) */
    DataSourceId *int `json:"dataSourceId"`

    /* 数据库名称 (Optional) */
    DbName *string `json:"dbName"`

    /* 执行方式，AUTO("AUTO", 0), BY_CREATOR("BY_CREATOR", 1) (Optional) */
    TaskPlanTypeEnum *string `json:"taskPlanTypeEnum"`

    /* DBA审批方式，AUTO("AUTO", 0), MANUAL("MANUAL", 1) (Optional) */
    DbaApproveTypeEnum *string `json:"dbaApproveTypeEnum"`

    /* 申请原因 (Optional) */
    Memo *string `json:"memo"`

    /* 导出类型， RESULT_SET("RESULT_SET", 0), DB("DB", 1) (Optional) */
    ExportTypeEnum *string `json:"exportTypeEnum"`

    /* 导出格式，CSV("CSV", 0), SQL("SQL", 1) (Optional) */
    ExportFileTypeEnum *string `json:"exportFileTypeEnum"`

    /* 影响行数，导出类型为结果集导出时，必填 (Optional) */
    RowsNum *int `json:"rowsNum"`

    /* 是否跳过检验，导出类型为结果集导出时，必填 (Optional) */
    IgnoreError *bool `json:"ignoreError"`

    /* 跳过检验原因，ignoreError为true时，必填 (Optional) */
    IgnoreReason *string `json:"ignoreReason"`

    /* 导出SQL文本，导出类型为结果集导出时，必填 (Optional) */
    ExportSqlText *string `json:"exportSqlText"`

    /* 导出表及过滤条件，为空时导出全部表。导出类型为数据库导出时，必填 (Optional) */
    TableFilters *dms.TableFilter `json:"tableFilters"`

    /* 导出内容，DATA("DATA", 0), STRUCT("STRUCT", 1), STRUCT_DATA("STRUCT_DATA", 2)，导出类型为数据库导出时，必填 (Optional) */
    ExportContentTypeEnum *string `json:"exportContentTypeEnum"`
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md) (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateExportFlowRequest(
    regionId string,
) *CreateExportFlowRequest {

	return &CreateExportFlowRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/exportFlow:create",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md) (Required)
 * param dataSourceId: 数据库id (Optional)
 * param dbName: 数据库名称 (Optional)
 * param taskPlanTypeEnum: 执行方式，AUTO("AUTO", 0), BY_CREATOR("BY_CREATOR", 1) (Optional)
 * param dbaApproveTypeEnum: DBA审批方式，AUTO("AUTO", 0), MANUAL("MANUAL", 1) (Optional)
 * param memo: 申请原因 (Optional)
 * param exportTypeEnum: 导出类型， RESULT_SET("RESULT_SET", 0), DB("DB", 1) (Optional)
 * param exportFileTypeEnum: 导出格式，CSV("CSV", 0), SQL("SQL", 1) (Optional)
 * param rowsNum: 影响行数，导出类型为结果集导出时，必填 (Optional)
 * param ignoreError: 是否跳过检验，导出类型为结果集导出时，必填 (Optional)
 * param ignoreReason: 跳过检验原因，ignoreError为true时，必填 (Optional)
 * param exportSqlText: 导出SQL文本，导出类型为结果集导出时，必填 (Optional)
 * param tableFilters: 导出表及过滤条件，为空时导出全部表。导出类型为数据库导出时，必填 (Optional)
 * param exportContentTypeEnum: 导出内容，DATA("DATA", 0), STRUCT("STRUCT", 1), STRUCT_DATA("STRUCT_DATA", 2)，导出类型为数据库导出时，必填 (Optional)
 */
func NewCreateExportFlowRequestWithAllParams(
    regionId string,
    dataSourceId *int,
    dbName *string,
    taskPlanTypeEnum *string,
    dbaApproveTypeEnum *string,
    memo *string,
    exportTypeEnum *string,
    exportFileTypeEnum *string,
    rowsNum *int,
    ignoreError *bool,
    ignoreReason *string,
    exportSqlText *string,
    tableFilters *dms.TableFilter,
    exportContentTypeEnum *string,
) *CreateExportFlowRequest {

    return &CreateExportFlowRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/exportFlow:create",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        DataSourceId: dataSourceId,
        DbName: dbName,
        TaskPlanTypeEnum: taskPlanTypeEnum,
        DbaApproveTypeEnum: dbaApproveTypeEnum,
        Memo: memo,
        ExportTypeEnum: exportTypeEnum,
        ExportFileTypeEnum: exportFileTypeEnum,
        RowsNum: rowsNum,
        IgnoreError: ignoreError,
        IgnoreReason: ignoreReason,
        ExportSqlText: exportSqlText,
        TableFilters: tableFilters,
        ExportContentTypeEnum: exportContentTypeEnum,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateExportFlowRequestWithoutParam() *CreateExportFlowRequest {

    return &CreateExportFlowRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/exportFlow:create",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md)(Required) */
func (r *CreateExportFlowRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param dataSourceId: 数据库id(Optional) */
func (r *CreateExportFlowRequest) SetDataSourceId(dataSourceId int) {
    r.DataSourceId = &dataSourceId
}

/* param dbName: 数据库名称(Optional) */
func (r *CreateExportFlowRequest) SetDbName(dbName string) {
    r.DbName = &dbName
}

/* param taskPlanTypeEnum: 执行方式，AUTO("AUTO", 0), BY_CREATOR("BY_CREATOR", 1)(Optional) */
func (r *CreateExportFlowRequest) SetTaskPlanTypeEnum(taskPlanTypeEnum string) {
    r.TaskPlanTypeEnum = &taskPlanTypeEnum
}

/* param dbaApproveTypeEnum: DBA审批方式，AUTO("AUTO", 0), MANUAL("MANUAL", 1)(Optional) */
func (r *CreateExportFlowRequest) SetDbaApproveTypeEnum(dbaApproveTypeEnum string) {
    r.DbaApproveTypeEnum = &dbaApproveTypeEnum
}

/* param memo: 申请原因(Optional) */
func (r *CreateExportFlowRequest) SetMemo(memo string) {
    r.Memo = &memo
}

/* param exportTypeEnum: 导出类型， RESULT_SET("RESULT_SET", 0), DB("DB", 1)(Optional) */
func (r *CreateExportFlowRequest) SetExportTypeEnum(exportTypeEnum string) {
    r.ExportTypeEnum = &exportTypeEnum
}

/* param exportFileTypeEnum: 导出格式，CSV("CSV", 0), SQL("SQL", 1)(Optional) */
func (r *CreateExportFlowRequest) SetExportFileTypeEnum(exportFileTypeEnum string) {
    r.ExportFileTypeEnum = &exportFileTypeEnum
}

/* param rowsNum: 影响行数，导出类型为结果集导出时，必填(Optional) */
func (r *CreateExportFlowRequest) SetRowsNum(rowsNum int) {
    r.RowsNum = &rowsNum
}

/* param ignoreError: 是否跳过检验，导出类型为结果集导出时，必填(Optional) */
func (r *CreateExportFlowRequest) SetIgnoreError(ignoreError bool) {
    r.IgnoreError = &ignoreError
}

/* param ignoreReason: 跳过检验原因，ignoreError为true时，必填(Optional) */
func (r *CreateExportFlowRequest) SetIgnoreReason(ignoreReason string) {
    r.IgnoreReason = &ignoreReason
}

/* param exportSqlText: 导出SQL文本，导出类型为结果集导出时，必填(Optional) */
func (r *CreateExportFlowRequest) SetExportSqlText(exportSqlText string) {
    r.ExportSqlText = &exportSqlText
}

/* param tableFilters: 导出表及过滤条件，为空时导出全部表。导出类型为数据库导出时，必填(Optional) */
func (r *CreateExportFlowRequest) SetTableFilters(tableFilters *dms.TableFilter) {
    r.TableFilters = tableFilters
}

/* param exportContentTypeEnum: 导出内容，DATA("DATA", 0), STRUCT("STRUCT", 1), STRUCT_DATA("STRUCT_DATA", 2)，导出类型为数据库导出时，必填(Optional) */
func (r *CreateExportFlowRequest) SetExportContentTypeEnum(exportContentTypeEnum string) {
    r.ExportContentTypeEnum = &exportContentTypeEnum
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateExportFlowRequest) GetRegionId() string {
    return r.RegionId
}

type CreateExportFlowResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateExportFlowResult `json:"result"`
}

type CreateExportFlowResult struct {
    FlowId string `json:"flowId"`
}