// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type CreateFileSystemRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 文件系统名称  */
    Name string `json:"name"`

    /* 文件系统描述  */
    Description string `json:"description"`

    /* 幂等性参数(只支持数字、大小写字母，且不能超过64字符)  */
    ClientToken string `json:"clientToken"`

    /* 文件系统类型(通用型:gp1,容量型:std1),默认为通用型 (Optional) */
    FileSystemType *string `json:"fileSystemType"`
}

/*
 * param regionId: 地域ID (Required)
 * param name: 文件系统名称 (Required)
 * param description: 文件系统描述 (Required)
 * param clientToken: 幂等性参数(只支持数字、大小写字母，且不能超过64字符) (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateFileSystemRequest(
    regionId string,
    name string,
    description string,
    clientToken string,
) *CreateFileSystemRequest {

	return &CreateFileSystemRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/fileSystems",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        Name: name,
        Description: description,
        ClientToken: clientToken,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param name: 文件系统名称 (Required)
 * param description: 文件系统描述 (Required)
 * param clientToken: 幂等性参数(只支持数字、大小写字母，且不能超过64字符) (Required)
 * param fileSystemType: 文件系统类型(通用型:gp1,容量型:std1),默认为通用型 (Optional)
 */
func NewCreateFileSystemRequestWithAllParams(
    regionId string,
    name string,
    description string,
    clientToken string,
    fileSystemType *string,
) *CreateFileSystemRequest {

    return &CreateFileSystemRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/fileSystems",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Name: name,
        Description: description,
        ClientToken: clientToken,
        FileSystemType: fileSystemType,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateFileSystemRequestWithoutParam() *CreateFileSystemRequest {

    return &CreateFileSystemRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/fileSystems",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *CreateFileSystemRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param name: 文件系统名称(Required) */
func (r *CreateFileSystemRequest) SetName(name string) {
    r.Name = name
}

/* param description: 文件系统描述(Required) */
func (r *CreateFileSystemRequest) SetDescription(description string) {
    r.Description = description
}

/* param clientToken: 幂等性参数(只支持数字、大小写字母，且不能超过64字符)(Required) */
func (r *CreateFileSystemRequest) SetClientToken(clientToken string) {
    r.ClientToken = clientToken
}

/* param fileSystemType: 文件系统类型(通用型:gp1,容量型:std1),默认为通用型(Optional) */
func (r *CreateFileSystemRequest) SetFileSystemType(fileSystemType string) {
    r.FileSystemType = &fileSystemType
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateFileSystemRequest) GetRegionId() string {
    return r.RegionId
}

type CreateFileSystemResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateFileSystemResult `json:"result"`
}

type CreateFileSystemResult struct {
    FileSystemId string `json:"fileSystemId"`
}