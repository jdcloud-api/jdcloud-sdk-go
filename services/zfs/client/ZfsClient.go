// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    zfs "github.com/lshuining/jdcloud-sdk-go/services/zfs/apis"
    "encoding/json"
    "errors"
)

type ZfsClient struct {
    core.JDCloudClient
}

func NewZfsClient(credential *core.Credential) *ZfsClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("zfs.jdcloud-api.com")

    return &ZfsClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "zfs",
            Revision:    "1.0.5",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *ZfsClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *ZfsClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *ZfsClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* - 为一个文件系统创建一个挂载目标。通过这个挂载目标,你可以挂载将一个文件系统挂载到主机实例上。
- 创建一个挂载目标，为这个挂载目标分配一个Id
 */
func (c *ZfsClient) CreateMountTarget(request *zfs.CreateMountTargetRequest) (*zfs.CreateMountTargetResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &zfs.CreateMountTargetResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* - 创建一个新的文件系统，为这个文件系统分配一个Id
 */
func (c *ZfsClient) CreateFileSystem(request *zfs.CreateFileSystemRequest) (*zfs.CreateFileSystemResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &zfs.CreateFileSystemResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询文件系统详情 */
func (c *ZfsClient) DescribeFileSystem(request *zfs.DescribeFileSystemRequest) (*zfs.DescribeFileSystemResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &zfs.DescribeFileSystemResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* -   删除挂载目标的同时会删除相关的网络接口。
 */
func (c *ZfsClient) DeleteMountTarget(request *zfs.DeleteMountTargetRequest) (*zfs.DeleteMountTargetResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &zfs.DeleteMountTargetResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* -   查询文件系统列表。
-   filters多个过滤条件之间是逻辑与(AND)，每个条件内部的多个取值是逻辑或(OR)
 */
func (c *ZfsClient) DescribeFileSystems(request *zfs.DescribeFileSystemsRequest) (*zfs.DescribeFileSystemsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &zfs.DescribeFileSystemsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* -   删除一个文件系统，一旦删除，该文件系统将不存在，也无法访问已删除的文件系统里的任何内容。
 [MFA enabled] */
func (c *ZfsClient) DeleteFileSystem(request *zfs.DeleteFileSystemRequest) (*zfs.DeleteFileSystemResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &zfs.DeleteFileSystemResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改文件系统属性(name 和 description 必须要指定一个) */
func (c *ZfsClient) ModifyFileSystemAttribute(request *zfs.ModifyFileSystemAttributeRequest) (*zfs.ModifyFileSystemAttributeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &zfs.ModifyFileSystemAttributeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* -   查询挂载目标列表。
 */
func (c *ZfsClient) DescribeMountTargets(request *zfs.DescribeMountTargetsRequest) (*zfs.DescribeMountTargetsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &zfs.DescribeMountTargetsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询挂载目标详情 */
func (c *ZfsClient) DescribeMountTarget(request *zfs.DescribeMountTargetRequest) (*zfs.DescribeMountTargetResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &zfs.DescribeMountTargetResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

