// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type GetAliveResultRequest struct {

    core.JDCloudRequest

    /* 检测token  */
    Token string `json:"token"`
}

/*
 * param token: 检测token (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewGetAliveResultRequest(
    token string,
) *GetAliveResultRequest {

	return &GetAliveResultRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/alive:getResult",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Token: token,
	}
}

/*
 * param token: 检测token (Required)
 */
func NewGetAliveResultRequestWithAllParams(
    token string,
) *GetAliveResultRequest {

    return &GetAliveResultRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/alive:getResult",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Token: token,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewGetAliveResultRequestWithoutParam() *GetAliveResultRequest {

    return &GetAliveResultRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/alive:getResult",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param token: 检测token(Required) */
func (r *GetAliveResultRequest) SetToken(token string) {
    r.Token = token
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r GetAliveResultRequest) GetRegionId() string {
    return ""
}

type GetAliveResultResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result GetAliveResultResult `json:"result"`
}

type GetAliveResultResult struct {
    FaceImage string `json:"faceImage"`
    SceneImage string `json:"sceneImage"`
    H5Result string `json:"h5Result"`
    SmResult string `json:"smResult"`
    RxResult string `json:"rxResult"`
    Score string `json:"score"`
    Desc string `json:"desc"`
}