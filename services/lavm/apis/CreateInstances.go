// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type CreateInstancesRequest struct {

    core.JDCloudRequest

    /* regionId
  */
    RegionId string `json:"regionId"`

    /* 镜像ID
  */
    ImageId string `json:"imageId"`

    /* 套餐ID
  */
    PlanId string `json:"planId"`

    /* 购买资源的时长单位，取值为"day"或"month"，默认按月"month"
 (Optional) */
    ChargeUnit *string `json:"chargeUnit"`

    /* 购买资源的时长, 默认按月计ChargeUnit="month"。ChargeUnit="month"时，取值1到9，12，24，36个月，即{1-9,12,24,36}；ChargeUnit="day"时，取值1到30天，即{1-30}
  */
    Period int `json:"period"`

    /* 是否开启到期自动续费
 (Optional) */
    AutoRenew *bool `json:"autoRenew"`

    /* 创建轻量应用云主机的数量
 (Optional) */
    Amount *int `json:"amount"`

    /* 实例名称。长度最长128个字符，只允许中文、数字、大小写字母、英文下划线（\_）、连字符（-）及点（.），不能以（.）作为首尾。
 (Optional) */
    Name *string `json:"name"`

    /* 计费方式。取值：prepaid_by_duration, 目前仅支持包年包月计费方式。
 (Optional) */
    ChargeType *string `json:"chargeType"`

    /* 用于保证请求的幂等性。由客户端生成，并确保不同请求中该参数唯一，长度不能超过64个字符。
 (Optional) */
    ClientToken *string `json:"clientToken"`

    /* 实例密码。可用于SSH登录和VNC登录。长度为8\~30个字符，必须同时包含大、小写英文字母、数字和特殊符号中的三类字符。特殊符号包括：\(\)\`~!@#$%^&\*\_-+=\|{}\[ ]:";'<>,.?/，
如指定密钥，则密码不会生成注入，否则即使不指定密码系统也将默认自动生成随机密码，并以短信和邮件通知。
 (Optional) */
    Password *string `json:"password"`

    /* 密钥对名称。仅Linux系统下该参数生效，当前仅支持输入单个密钥。
 (Optional) */
    KeyNames []string `json:"keyNames"`

    /* 密码授权，若存在密匙，则根据此参数决定是否使用密码，若没有密匙，此参数无效，会强制使用密码。
若不使用密码，且密匙对解绑后，用户需重置密码，方可使用密码登录。
此参数在windows系统中必须为yes。
 (Optional) */
    PasswordAuth *string `json:"passwordAuth"`

    /* 产品线统一活动凭证JSON字符串，需要BASE64编码，目前要求编码前格式为 {"activity":{"activityType":必填字段, "activityIdentifier":必填字段}} (Optional) */
    BuyScenario *string `json:"buyScenario"`
}

/*
 * param regionId: regionId
 (Required)
 * param imageId: 镜像ID
 (Required)
 * param planId: 套餐ID
 (Required)
 * param period: 购买资源的时长, 默认按月计ChargeUnit="month"。ChargeUnit="month"时，取值1到9，12，24，36个月，即{1-9,12,24,36}；ChargeUnit="day"时，取值1到30天，即{1-30}
 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateInstancesRequest(
    regionId string,
    imageId string,
    planId string,
    period int,
) *CreateInstancesRequest {

	return &CreateInstancesRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/instances",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        ImageId: imageId,
        PlanId: planId,
        Period: period,
	}
}

/*
 * param regionId: regionId
 (Required)
 * param imageId: 镜像ID
 (Required)
 * param planId: 套餐ID
 (Required)
 * param chargeUnit: 购买资源的时长单位，取值为"day"或"month"，默认按月"month"
 (Optional)
 * param period: 购买资源的时长, 默认按月计ChargeUnit="month"。ChargeUnit="month"时，取值1到9，12，24，36个月，即{1-9,12,24,36}；ChargeUnit="day"时，取值1到30天，即{1-30}
 (Required)
 * param autoRenew: 是否开启到期自动续费
 (Optional)
 * param amount: 创建轻量应用云主机的数量
 (Optional)
 * param name: 实例名称。长度最长128个字符，只允许中文、数字、大小写字母、英文下划线（\_）、连字符（-）及点（.），不能以（.）作为首尾。
 (Optional)
 * param chargeType: 计费方式。取值：prepaid_by_duration, 目前仅支持包年包月计费方式。
 (Optional)
 * param clientToken: 用于保证请求的幂等性。由客户端生成，并确保不同请求中该参数唯一，长度不能超过64个字符。
 (Optional)
 * param password: 实例密码。可用于SSH登录和VNC登录。长度为8\~30个字符，必须同时包含大、小写英文字母、数字和特殊符号中的三类字符。特殊符号包括：\(\)\`~!@#$%^&\*\_-+=\|{}\[ ]:";'<>,.?/，
如指定密钥，则密码不会生成注入，否则即使不指定密码系统也将默认自动生成随机密码，并以短信和邮件通知。
 (Optional)
 * param keyNames: 密钥对名称。仅Linux系统下该参数生效，当前仅支持输入单个密钥。
 (Optional)
 * param passwordAuth: 密码授权，若存在密匙，则根据此参数决定是否使用密码，若没有密匙，此参数无效，会强制使用密码。
若不使用密码，且密匙对解绑后，用户需重置密码，方可使用密码登录。
此参数在windows系统中必须为yes。
 (Optional)
 * param buyScenario: 产品线统一活动凭证JSON字符串，需要BASE64编码，目前要求编码前格式为 {"activity":{"activityType":必填字段, "activityIdentifier":必填字段}} (Optional)
 */
func NewCreateInstancesRequestWithAllParams(
    regionId string,
    imageId string,
    planId string,
    chargeUnit *string,
    period int,
    autoRenew *bool,
    amount *int,
    name *string,
    chargeType *string,
    clientToken *string,
    password *string,
    keyNames []string,
    passwordAuth *string,
    buyScenario *string,
) *CreateInstancesRequest {

    return &CreateInstancesRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        ImageId: imageId,
        PlanId: planId,
        ChargeUnit: chargeUnit,
        Period: period,
        AutoRenew: autoRenew,
        Amount: amount,
        Name: name,
        ChargeType: chargeType,
        ClientToken: clientToken,
        Password: password,
        KeyNames: keyNames,
        PasswordAuth: passwordAuth,
        BuyScenario: buyScenario,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateInstancesRequestWithoutParam() *CreateInstancesRequest {

    return &CreateInstancesRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: regionId
(Required) */
func (r *CreateInstancesRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param imageId: 镜像ID
(Required) */
func (r *CreateInstancesRequest) SetImageId(imageId string) {
    r.ImageId = imageId
}
/* param planId: 套餐ID
(Required) */
func (r *CreateInstancesRequest) SetPlanId(planId string) {
    r.PlanId = planId
}
/* param chargeUnit: 购买资源的时长单位，取值为"day"或"month"，默认按月"month"
(Optional) */
func (r *CreateInstancesRequest) SetChargeUnit(chargeUnit string) {
    r.ChargeUnit = &chargeUnit
}
/* param period: 购买资源的时长, 默认按月计ChargeUnit="month"。ChargeUnit="month"时，取值1到9，12，24，36个月，即{1-9,12,24,36}；ChargeUnit="day"时，取值1到30天，即{1-30}
(Required) */
func (r *CreateInstancesRequest) SetPeriod(period int) {
    r.Period = period
}
/* param autoRenew: 是否开启到期自动续费
(Optional) */
func (r *CreateInstancesRequest) SetAutoRenew(autoRenew bool) {
    r.AutoRenew = &autoRenew
}
/* param amount: 创建轻量应用云主机的数量
(Optional) */
func (r *CreateInstancesRequest) SetAmount(amount int) {
    r.Amount = &amount
}
/* param name: 实例名称。长度最长128个字符，只允许中文、数字、大小写字母、英文下划线（\_）、连字符（-）及点（.），不能以（.）作为首尾。
(Optional) */
func (r *CreateInstancesRequest) SetName(name string) {
    r.Name = &name
}
/* param chargeType: 计费方式。取值：prepaid_by_duration, 目前仅支持包年包月计费方式。
(Optional) */
func (r *CreateInstancesRequest) SetChargeType(chargeType string) {
    r.ChargeType = &chargeType
}
/* param clientToken: 用于保证请求的幂等性。由客户端生成，并确保不同请求中该参数唯一，长度不能超过64个字符。
(Optional) */
func (r *CreateInstancesRequest) SetClientToken(clientToken string) {
    r.ClientToken = &clientToken
}
/* param password: 实例密码。可用于SSH登录和VNC登录。长度为8\~30个字符，必须同时包含大、小写英文字母、数字和特殊符号中的三类字符。特殊符号包括：\(\)\`~!@#$%^&\*\_-+=\|{}\[ ]:";'<>,.?/，
如指定密钥，则密码不会生成注入，否则即使不指定密码系统也将默认自动生成随机密码，并以短信和邮件通知。
(Optional) */
func (r *CreateInstancesRequest) SetPassword(password string) {
    r.Password = &password
}
/* param keyNames: 密钥对名称。仅Linux系统下该参数生效，当前仅支持输入单个密钥。
(Optional) */
func (r *CreateInstancesRequest) SetKeyNames(keyNames []string) {
    r.KeyNames = keyNames
}
/* param passwordAuth: 密码授权，若存在密匙，则根据此参数决定是否使用密码，若没有密匙，此参数无效，会强制使用密码。
若不使用密码，且密匙对解绑后，用户需重置密码，方可使用密码登录。
此参数在windows系统中必须为yes。
(Optional) */
func (r *CreateInstancesRequest) SetPasswordAuth(passwordAuth string) {
    r.PasswordAuth = &passwordAuth
}
/* param buyScenario: 产品线统一活动凭证JSON字符串，需要BASE64编码，目前要求编码前格式为 {"activity":{"activityType":必填字段, "activityIdentifier":必填字段}}(Optional) */
func (r *CreateInstancesRequest) SetBuyScenario(buyScenario string) {
    r.BuyScenario = &buyScenario
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateInstancesRequest) GetRegionId() string {
    return r.RegionId
}

type CreateInstancesResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateInstancesResult `json:"result"`
}

type CreateInstancesResult struct {
    InstanceIds []string `json:"instanceIds"`
}