// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type CreateCustomImageRequest struct {

    core.JDCloudRequest

    /* regionId
  */
    RegionId string `json:"regionId"`

    /* 指定的轻量应用云主机的实例ID
  */
    InstanceId string `json:"instanceId"`

    /* 自定义镜像名称
  */
    ImageName string `json:"imageName"`

    /* 镜像描述信息
 (Optional) */
    Description *string `json:"description"`

    /* 用于保证请求的幂等性。由客户端生成，并确保不同请求中该参数唯一，长度不能超过64个字符。
 (Optional) */
    ClientToken *string `json:"clientToken"`
}

/*
 * param regionId: regionId
 (Required)
 * param instanceId: 指定的轻量应用云主机的实例ID
 (Required)
 * param imageName: 自定义镜像名称
 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateCustomImageRequest(
    regionId string,
    instanceId string,
    imageName string,
) *CreateCustomImageRequest {

	return &CreateCustomImageRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/images",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        InstanceId: instanceId,
        ImageName: imageName,
	}
}

/*
 * param regionId: regionId
 (Required)
 * param instanceId: 指定的轻量应用云主机的实例ID
 (Required)
 * param imageName: 自定义镜像名称
 (Required)
 * param description: 镜像描述信息
 (Optional)
 * param clientToken: 用于保证请求的幂等性。由客户端生成，并确保不同请求中该参数唯一，长度不能超过64个字符。
 (Optional)
 */
func NewCreateCustomImageRequestWithAllParams(
    regionId string,
    instanceId string,
    imageName string,
    description *string,
    clientToken *string,
) *CreateCustomImageRequest {

    return &CreateCustomImageRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/images",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        InstanceId: instanceId,
        ImageName: imageName,
        Description: description,
        ClientToken: clientToken,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateCustomImageRequestWithoutParam() *CreateCustomImageRequest {

    return &CreateCustomImageRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/images",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: regionId
(Required) */
func (r *CreateCustomImageRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param instanceId: 指定的轻量应用云主机的实例ID
(Required) */
func (r *CreateCustomImageRequest) SetInstanceId(instanceId string) {
    r.InstanceId = instanceId
}
/* param imageName: 自定义镜像名称
(Required) */
func (r *CreateCustomImageRequest) SetImageName(imageName string) {
    r.ImageName = imageName
}
/* param description: 镜像描述信息
(Optional) */
func (r *CreateCustomImageRequest) SetDescription(description string) {
    r.Description = &description
}
/* param clientToken: 用于保证请求的幂等性。由客户端生成，并确保不同请求中该参数唯一，长度不能超过64个字符。
(Optional) */
func (r *CreateCustomImageRequest) SetClientToken(clientToken string) {
    r.ClientToken = &clientToken
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateCustomImageRequest) GetRegionId() string {
    return r.RegionId
}

type CreateCustomImageResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateCustomImageResult `json:"result"`
}

type CreateCustomImageResult struct {
    ImageId string `json:"imageId"`
}