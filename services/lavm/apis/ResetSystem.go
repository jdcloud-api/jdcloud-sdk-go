// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type ResetSystemRequest struct {

    core.JDCloudRequest

    /* 轻量应用云主机的实例ID
  */
    InstanceId string `json:"instanceId"`

    /* 地域
  */
    RegionId string `json:"regionId"`

    /* 目标镜像ID
 (Optional) */
    ImageId *string `json:"imageId"`

    /* 密钥对名称。仅Linux系统下该参数生效，当前仅支持输入单个密钥。
 (Optional) */
    KeyNames []string `json:"keyNames"`

    /* 密码
 (Optional) */
    Password *string `json:"password"`

    /* 密码授权，若存在密匙，则根据此参数决定是否使用密码，若没有密匙，此参数无效，会强制使用密码。
若不使用密码，且密匙对解绑后，用户需重置密码，方可使用密码登录。
此参数在windows系统中必须为yes。
 (Optional) */
    PasswordAuth *string `json:"passwordAuth"`
}

/*
 * param instanceId: 轻量应用云主机的实例ID
 (Required)
 * param regionId: 地域
 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewResetSystemRequest(
    instanceId string,
    regionId string,
) *ResetSystemRequest {

	return &ResetSystemRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/instances/{instanceId}:resetSystem",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        InstanceId: instanceId,
        RegionId: regionId,
	}
}

/*
 * param instanceId: 轻量应用云主机的实例ID
 (Required)
 * param regionId: 地域
 (Required)
 * param imageId: 目标镜像ID
 (Optional)
 * param keyNames: 密钥对名称。仅Linux系统下该参数生效，当前仅支持输入单个密钥。
 (Optional)
 * param password: 密码
 (Optional)
 * param passwordAuth: 密码授权，若存在密匙，则根据此参数决定是否使用密码，若没有密匙，此参数无效，会强制使用密码。
若不使用密码，且密匙对解绑后，用户需重置密码，方可使用密码登录。
此参数在windows系统中必须为yes。
 (Optional)
 */
func NewResetSystemRequestWithAllParams(
    instanceId string,
    regionId string,
    imageId *string,
    keyNames []string,
    password *string,
    passwordAuth *string,
) *ResetSystemRequest {

    return &ResetSystemRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}:resetSystem",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        InstanceId: instanceId,
        RegionId: regionId,
        ImageId: imageId,
        KeyNames: keyNames,
        Password: password,
        PasswordAuth: passwordAuth,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewResetSystemRequestWithoutParam() *ResetSystemRequest {

    return &ResetSystemRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{instanceId}:resetSystem",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param instanceId: 轻量应用云主机的实例ID
(Required) */
func (r *ResetSystemRequest) SetInstanceId(instanceId string) {
    r.InstanceId = instanceId
}
/* param regionId: 地域
(Required) */
func (r *ResetSystemRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param imageId: 目标镜像ID
(Optional) */
func (r *ResetSystemRequest) SetImageId(imageId string) {
    r.ImageId = &imageId
}
/* param keyNames: 密钥对名称。仅Linux系统下该参数生效，当前仅支持输入单个密钥。
(Optional) */
func (r *ResetSystemRequest) SetKeyNames(keyNames []string) {
    r.KeyNames = keyNames
}
/* param password: 密码
(Optional) */
func (r *ResetSystemRequest) SetPassword(password string) {
    r.Password = &password
}
/* param passwordAuth: 密码授权，若存在密匙，则根据此参数决定是否使用密码，若没有密匙，此参数无效，会强制使用密码。
若不使用密码，且密匙对解绑后，用户需重置密码，方可使用密码登录。
此参数在windows系统中必须为yes。
(Optional) */
func (r *ResetSystemRequest) SetPasswordAuth(passwordAuth string) {
    r.PasswordAuth = &passwordAuth
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ResetSystemRequest) GetRegionId() string {
    return r.RegionId
}

type ResetSystemResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ResetSystemResult `json:"result"`
}

type ResetSystemResult struct {
}