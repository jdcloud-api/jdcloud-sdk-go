// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type DeployRequest struct {

    core.JDCloudRequest

    /* 应用ID，E.g.，app-123456  */
    AppId string `json:"appId"`

    /* 分组ID，E.g.，group-123456  */
    GroupId string `json:"groupId"`

    /* 最大停止服务容器, 按照设置比例停止旧版本容器，用于保证可用容器比例，比例越高升级的越快。范围：0-100，，E.g.，10 (Optional) */
    Concurrency *int `json:"concurrency"`

    /* 镜像类型，可以为空，默认为custom，可选属性为：standard、custom，E.g.，custom (Optional) */
    ImageType *string `json:"imageType"`

    /* 镜像版本信息，不能为空，镜像列表接口返回参数 imageDetail 的属性 imageTags 的值，E.g.，v1.0.0 (Optional) */
    ImageVersion *string `json:"imageVersion"`

    /* 可额外创建容器, 按照设置比例创建新版本容器用于旧版本容器，比例越高升级的越快，临时占用的集群资源越高。范围：0-100，E.g.，10 (Optional) */
    MaxSurge *int `json:"maxSurge"`

    /* 部署的容器数量，E.g.，3 (Optional) */
    PodCount *int `json:"podCount"`
}

/*
 * param appId: 应用ID，E.g.，app-123456 (Required)
 * param groupId: 分组ID，E.g.，group-123456 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDeployRequest(
    appId string,
    groupId string,
) *DeployRequest {

	return &DeployRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/app/{appId}/group/{groupId}/deploy",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        AppId: appId,
        GroupId: groupId,
	}
}

/*
 * param appId: 应用ID，E.g.，app-123456 (Required)
 * param groupId: 分组ID，E.g.，group-123456 (Required)
 * param concurrency: 最大停止服务容器, 按照设置比例停止旧版本容器，用于保证可用容器比例，比例越高升级的越快。范围：0-100，，E.g.，10 (Optional)
 * param imageType: 镜像类型，可以为空，默认为custom，可选属性为：standard、custom，E.g.，custom (Optional)
 * param imageVersion: 镜像版本信息，不能为空，镜像列表接口返回参数 imageDetail 的属性 imageTags 的值，E.g.，v1.0.0 (Optional)
 * param maxSurge: 可额外创建容器, 按照设置比例创建新版本容器用于旧版本容器，比例越高升级的越快，临时占用的集群资源越高。范围：0-100，E.g.，10 (Optional)
 * param podCount: 部署的容器数量，E.g.，3 (Optional)
 */
func NewDeployRequestWithAllParams(
    appId string,
    groupId string,
    concurrency *int,
    imageType *string,
    imageVersion *string,
    maxSurge *int,
    podCount *int,
) *DeployRequest {

    return &DeployRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/app/{appId}/group/{groupId}/deploy",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        AppId: appId,
        GroupId: groupId,
        Concurrency: concurrency,
        ImageType: imageType,
        ImageVersion: imageVersion,
        MaxSurge: maxSurge,
        PodCount: podCount,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDeployRequestWithoutParam() *DeployRequest {

    return &DeployRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/app/{appId}/group/{groupId}/deploy",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param appId: 应用ID，E.g.，app-123456(Required) */
func (r *DeployRequest) SetAppId(appId string) {
    r.AppId = appId
}
/* param groupId: 分组ID，E.g.，group-123456(Required) */
func (r *DeployRequest) SetGroupId(groupId string) {
    r.GroupId = groupId
}
/* param concurrency: 最大停止服务容器, 按照设置比例停止旧版本容器，用于保证可用容器比例，比例越高升级的越快。范围：0-100，，E.g.，10(Optional) */
func (r *DeployRequest) SetConcurrency(concurrency int) {
    r.Concurrency = &concurrency
}
/* param imageType: 镜像类型，可以为空，默认为custom，可选属性为：standard、custom，E.g.，custom(Optional) */
func (r *DeployRequest) SetImageType(imageType string) {
    r.ImageType = &imageType
}
/* param imageVersion: 镜像版本信息，不能为空，镜像列表接口返回参数 imageDetail 的属性 imageTags 的值，E.g.，v1.0.0(Optional) */
func (r *DeployRequest) SetImageVersion(imageVersion string) {
    r.ImageVersion = &imageVersion
}
/* param maxSurge: 可额外创建容器, 按照设置比例创建新版本容器用于旧版本容器，比例越高升级的越快，临时占用的集群资源越高。范围：0-100，E.g.，10(Optional) */
func (r *DeployRequest) SetMaxSurge(maxSurge int) {
    r.MaxSurge = &maxSurge
}
/* param podCount: 部署的容器数量，E.g.，3(Optional) */
func (r *DeployRequest) SetPodCount(podCount int) {
    r.PodCount = &podCount
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DeployRequest) GetRegionId() string {
    return ""
}

type DeployResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DeployResult `json:"result"`
}

type DeployResult struct {
    Id int64 `json:"id"`
    Log string `json:"log"`
    Status string `json:"status"`
    SuccessCount int `json:"successCount"`
}