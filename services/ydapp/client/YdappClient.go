// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    ydapp "github.com/jdcloud-api/jdcloud-sdk-go/services/ydapp/apis"
    "encoding/json"
    "errors"
)

type YdappClient struct {
    core.JDCloudClient
}

func NewYdappClient(credential *core.Credential) *YdappClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("ydapp.jdcloud-api.com")

    return &YdappClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "ydapp",
            Revision:    "1.0.0",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *YdappClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *YdappClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *YdappClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* <p>申请6小时有效期的令牌。 使用<code>docker</code> CLI push和pull镜像。</p>
<p><code>authorizationToken</code>为每个registry返回一个base64编码的字符串，解码后<code>docker login</code>命令
可完成指定registry的鉴权。</p>
 */
func (c *YdappClient) DescribeCustomRegistryToken(request *ydapp.DescribeCustomRegistryTokenRequest) (*ydapp.DescribeCustomRegistryTokenResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ydapp.DescribeCustomRegistryTokenResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据应用ID、分组ID和部署ID查询指定的部署任务详情 */
func (c *YdappClient) DescribeDeployTask(request *ydapp.DescribeDeployTaskRequest) (*ydapp.DescribeDeployTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ydapp.DescribeDeployTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 分页获取指定应用下的应用组列表 */
func (c *YdappClient) DescribeGroups(request *ydapp.DescribeGroupsRequest) (*ydapp.DescribeGroupsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ydapp.DescribeGroupsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 分页获取应用信息列表 */
func (c *YdappClient) DescribeApps(request *ydapp.DescribeAppsRequest) (*ydapp.DescribeAppsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ydapp.DescribeAppsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建新的部署任务，支持自定义镜像和标准镜像的部署 */
func (c *YdappClient) Deploy(request *ydapp.DeployRequest) (*ydapp.DeployResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ydapp.DeployResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据镜像摘要删除指定的镜像 */
func (c *YdappClient) DeleteCustomImage(request *ydapp.DeleteCustomImageRequest) (*ydapp.DeleteCustomImageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ydapp.DeleteCustomImageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 支持分页查询和版本过滤的镜像列表获取 */
func (c *YdappClient) DescribeCustomImages(request *ydapp.DescribeCustomImagesRequest) (*ydapp.DescribeCustomImagesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ydapp.DescribeCustomImagesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 停止指定的部署任务执行 */
func (c *YdappClient) StopDeployTask(request *ydapp.StopDeployTaskRequest) (*ydapp.StopDeployTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ydapp.StopDeployTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

