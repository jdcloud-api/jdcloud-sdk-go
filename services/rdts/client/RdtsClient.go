// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    rdts "github.com/lshuining/jdcloud-sdk-go/services/rdts/apis"
    "encoding/json"
    "errors"
)

type RdtsClient struct {
    core.JDCloudClient
}

func NewRdtsClient(credential *core.Credential) *RdtsClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("rdts.jdcloud-api.com")

    return &RdtsClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "rdts",
            Revision:    "2.5.3",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *RdtsClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *RdtsClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *RdtsClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 删除迁移任务，迁移中的任务不能删除，迁移代理有流量不能删除 */
func (c *RdtsClient) DeleteMigration(request *rdts.DeleteMigrationRequest) (*rdts.DeleteMigrationResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rdts.DeleteMigrationResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改迁移任务名 */
func (c *RdtsClient) ModifyMigrationName(request *rdts.ModifyMigrationNameRequest) (*rdts.ModifyMigrationNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rdts.ModifyMigrationNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 如果迁移超时、迁移失败，可重新迁移 */
func (c *RdtsClient) RestartMigrationJob(request *rdts.RestartMigrationJobRequest) (*rdts.RestartMigrationJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rdts.RestartMigrationJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建一个迁移任务，指定并校验迁移配置 */
func (c *RdtsClient) CreateMigration(request *rdts.CreateMigrationRequest) (*rdts.CreateMigrationResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rdts.CreateMigrationResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询迁移任务详情 */
func (c *RdtsClient) DescribeMigration(request *rdts.DescribeMigrationRequest) (*rdts.DescribeMigrationResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rdts.DescribeMigrationResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 启动迁移job，开始迁移数据 */
func (c *RdtsClient) StartMigrationJob(request *rdts.StartMigrationJobRequest) (*rdts.StartMigrationJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rdts.StartMigrationJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 迁移任务列表，可分页、可排序、可搜索、可过滤 */
func (c *RdtsClient) DescribeMigrations(request *rdts.DescribeMigrationsRequest) (*rdts.DescribeMigrationsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rdts.DescribeMigrationsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改并验证迁移配置 */
func (c *RdtsClient) ModifyMigration(request *rdts.ModifyMigrationRequest) (*rdts.ModifyMigrationResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rdts.ModifyMigrationResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询迁移进度及数据校验状态 */
func (c *RdtsClient) GetMigrationProgress(request *rdts.GetMigrationProgressRequest) (*rdts.GetMigrationProgressResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rdts.GetMigrationProgressResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建迁移job，创建job之后无法修改迁移配置 */
func (c *RdtsClient) CreateMigrationJob(request *rdts.CreateMigrationJobRequest) (*rdts.CreateMigrationJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &rdts.CreateMigrationJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

