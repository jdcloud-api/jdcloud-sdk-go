// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type ConfigBackSourceOssRequest struct {

    core.JDCloudRequest

    /* 用户域名  */
    Domain string `json:"domain"`

    /* on/off，若为on则以下必传参数不可为空[accessKey,secretKey,bucket,domain2],若为off则以下参数均不能有值[accessKey,secretKey,bucket,suffix,domain2] (Optional) */
    Status *string `json:"status"`

    /* status 为on时必填 (Optional) */
    AccessKey *string `json:"accessKey"`

    /* status 为on时必填 (Optional) */
    SecretKey *string `json:"secretKey"`

    /* oss桶名,status 为on时必填 (Optional) */
    Bucket *string `json:"bucket"`

    /* oss后缀,status 为on时选填 (Optional) */
    Suffix *string `json:"suffix"`

    /* status 为on时必填 (Optional) */
    Domain2 *string `json:"domain2"`
}

/*
 * param domain: 用户域名 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewConfigBackSourceOssRequest(
    domain string,
) *ConfigBackSourceOssRequest {

	return &ConfigBackSourceOssRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/domain/{domain}/configBackSourceOss",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Domain: domain,
	}
}

/*
 * param domain: 用户域名 (Required)
 * param status: on/off，若为on则以下必传参数不可为空[accessKey,secretKey,bucket,domain2],若为off则以下参数均不能有值[accessKey,secretKey,bucket,suffix,domain2] (Optional)
 * param accessKey: status 为on时必填 (Optional)
 * param secretKey: status 为on时必填 (Optional)
 * param bucket: oss桶名,status 为on时必填 (Optional)
 * param suffix: oss后缀,status 为on时选填 (Optional)
 * param domain2: status 为on时必填 (Optional)
 */
func NewConfigBackSourceOssRequestWithAllParams(
    domain string,
    status *string,
    accessKey *string,
    secretKey *string,
    bucket *string,
    suffix *string,
    domain2 *string,
) *ConfigBackSourceOssRequest {

    return &ConfigBackSourceOssRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/configBackSourceOss",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Domain: domain,
        Status: status,
        AccessKey: accessKey,
        SecretKey: secretKey,
        Bucket: bucket,
        Suffix: suffix,
        Domain2: domain2,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewConfigBackSourceOssRequestWithoutParam() *ConfigBackSourceOssRequest {

    return &ConfigBackSourceOssRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/configBackSourceOss",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param domain: 用户域名(Required) */
func (r *ConfigBackSourceOssRequest) SetDomain(domain string) {
    r.Domain = domain
}

/* param status: on/off，若为on则以下必传参数不可为空[accessKey,secretKey,bucket,domain2],若为off则以下参数均不能有值[accessKey,secretKey,bucket,suffix,domain2](Optional) */
func (r *ConfigBackSourceOssRequest) SetStatus(status string) {
    r.Status = &status
}

/* param accessKey: status 为on时必填(Optional) */
func (r *ConfigBackSourceOssRequest) SetAccessKey(accessKey string) {
    r.AccessKey = &accessKey
}

/* param secretKey: status 为on时必填(Optional) */
func (r *ConfigBackSourceOssRequest) SetSecretKey(secretKey string) {
    r.SecretKey = &secretKey
}

/* param bucket: oss桶名,status 为on时必填(Optional) */
func (r *ConfigBackSourceOssRequest) SetBucket(bucket string) {
    r.Bucket = &bucket
}

/* param suffix: oss后缀,status 为on时选填(Optional) */
func (r *ConfigBackSourceOssRequest) SetSuffix(suffix string) {
    r.Suffix = &suffix
}

/* param domain2: status 为on时必填(Optional) */
func (r *ConfigBackSourceOssRequest) SetDomain2(domain2 string) {
    r.Domain2 = &domain2
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ConfigBackSourceOssRequest) GetRegionId() string {
    return ""
}

type ConfigBackSourceOssResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ConfigBackSourceOssResult `json:"result"`
}

type ConfigBackSourceOssResult struct {
}