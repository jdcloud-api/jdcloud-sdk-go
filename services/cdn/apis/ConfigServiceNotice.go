// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type ConfigServiceNoticeRequest struct {

    core.JDCloudRequest

    /* id 修改操作必传 (Optional) */
    Id *int64 `json:"id"`

    /* 通知类型,取值[reportForm],reportForm:报表. (Optional) */
    NoticeType *string `json:"noticeType"`

    /* 通知方式,取值[mail],mail:邮件. (Optional) */
    NoticeWay *string `json:"noticeWay"`

    /* 通知接收人,多个用逗号隔开. (Optional) */
    NoticeTo *string `json:"noticeTo"`

    /* 通知抄送人,多个用逗号隔开. (Optional) */
    NoticeCC *string `json:"noticeCC"`

    /* 通知正文. (Optional) */
    NoticeContent *string `json:"noticeContent"`

    /* 通知周期,取值[daily,weekly,monthly]. (Optional) */
    NoticePeriod []string `json:"noticePeriod"`

    /* 通知状态，取值[init,start,stop] (Optional) */
    NoticeStatus *string `json:"noticeStatus"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewConfigServiceNoticeRequest(
) *ConfigServiceNoticeRequest {

	return &ConfigServiceNoticeRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/serviceNotice:config",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param id: id 修改操作必传 (Optional)
 * param noticeType: 通知类型,取值[reportForm],reportForm:报表. (Optional)
 * param noticeWay: 通知方式,取值[mail],mail:邮件. (Optional)
 * param noticeTo: 通知接收人,多个用逗号隔开. (Optional)
 * param noticeCC: 通知抄送人,多个用逗号隔开. (Optional)
 * param noticeContent: 通知正文. (Optional)
 * param noticePeriod: 通知周期,取值[daily,weekly,monthly]. (Optional)
 * param noticeStatus: 通知状态，取值[init,start,stop] (Optional)
 */
func NewConfigServiceNoticeRequestWithAllParams(
    id *int64,
    noticeType *string,
    noticeWay *string,
    noticeTo *string,
    noticeCC *string,
    noticeContent *string,
    noticePeriod []string,
    noticeStatus *string,
) *ConfigServiceNoticeRequest {

    return &ConfigServiceNoticeRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/serviceNotice:config",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Id: id,
        NoticeType: noticeType,
        NoticeWay: noticeWay,
        NoticeTo: noticeTo,
        NoticeCC: noticeCC,
        NoticeContent: noticeContent,
        NoticePeriod: noticePeriod,
        NoticeStatus: noticeStatus,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewConfigServiceNoticeRequestWithoutParam() *ConfigServiceNoticeRequest {

    return &ConfigServiceNoticeRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/serviceNotice:config",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param id: id 修改操作必传(Optional) */
func (r *ConfigServiceNoticeRequest) SetId(id int64) {
    r.Id = &id
}

/* param noticeType: 通知类型,取值[reportForm],reportForm:报表.(Optional) */
func (r *ConfigServiceNoticeRequest) SetNoticeType(noticeType string) {
    r.NoticeType = &noticeType
}

/* param noticeWay: 通知方式,取值[mail],mail:邮件.(Optional) */
func (r *ConfigServiceNoticeRequest) SetNoticeWay(noticeWay string) {
    r.NoticeWay = &noticeWay
}

/* param noticeTo: 通知接收人,多个用逗号隔开.(Optional) */
func (r *ConfigServiceNoticeRequest) SetNoticeTo(noticeTo string) {
    r.NoticeTo = &noticeTo
}

/* param noticeCC: 通知抄送人,多个用逗号隔开.(Optional) */
func (r *ConfigServiceNoticeRequest) SetNoticeCC(noticeCC string) {
    r.NoticeCC = &noticeCC
}

/* param noticeContent: 通知正文.(Optional) */
func (r *ConfigServiceNoticeRequest) SetNoticeContent(noticeContent string) {
    r.NoticeContent = &noticeContent
}

/* param noticePeriod: 通知周期,取值[daily,weekly,monthly].(Optional) */
func (r *ConfigServiceNoticeRequest) SetNoticePeriod(noticePeriod []string) {
    r.NoticePeriod = noticePeriod
}

/* param noticeStatus: 通知状态，取值[init,start,stop](Optional) */
func (r *ConfigServiceNoticeRequest) SetNoticeStatus(noticeStatus string) {
    r.NoticeStatus = &noticeStatus
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ConfigServiceNoticeRequest) GetRegionId() string {
    return ""
}

type ConfigServiceNoticeResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ConfigServiceNoticeResult `json:"result"`
}

type ConfigServiceNoticeResult struct {
}