// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    cdn "github.com/jdcloud-api/jdcloud-sdk-go/services/cdn/models"
)

type CreateDomainRequest struct {

    core.JDCloudRequest

    /* 用户域名  */
    Domain string `json:"domain"`

    /* 回源类型只能是[ips,domain,oss]中的一种 (Optional) */
    SourceType *string `json:"sourceType"`

    /* 点播域名的类型只能是[vod,download,web]中的一种 (Optional) */
    CdnType *string `json:"cdnType"`

    /* 回源方式,只能是[https,http]中的一种,默认http (Optional) */
    BackSourceType *string `json:"backSourceType"`

    /* 日带宽(Mbps) (Optional) */
    DailyBandWidth *int64 `json:"dailyBandWidth"`

    /* 服务质量,只能是[good,general]中的一种,默认为good (Optional) */
    Quaility *string `json:"quaility"`

    /*  (Optional) */
    MaxFileSize *int64 `json:"maxFileSize"`

    /*  (Optional) */
    MinFileSize *int64 `json:"minFileSize"`

    /*  (Optional) */
    SumFileSize *int64 `json:"sumFileSize"`

    /*  (Optional) */
    AvgFileSize *int64 `json:"avgFileSize"`

    /*  (Optional) */
    DefaultSourceHost *string `json:"defaultSourceHost"`

    /*  (Optional) */
    HttpType *string `json:"httpType"`

    /*  (Optional) */
    IpSource []cdn.IpSourceInfo `json:"ipSource"`

    /*  (Optional) */
    DomainSource []cdn.DomainSourceInfo `json:"domainSource"`

    /*  (Optional) */
    OssSource *string `json:"ossSource"`
}

/*
 * param domain: 用户域名 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateDomainRequest(
    domain string,
) *CreateDomainRequest {

	return &CreateDomainRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/domain/{domain}",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Domain: domain,
	}
}

/*
 * param domain: 用户域名 (Required)
 * param sourceType: 回源类型只能是[ips,domain,oss]中的一种 (Optional)
 * param cdnType: 点播域名的类型只能是[vod,download,web]中的一种 (Optional)
 * param backSourceType: 回源方式,只能是[https,http]中的一种,默认http (Optional)
 * param dailyBandWidth: 日带宽(Mbps) (Optional)
 * param quaility: 服务质量,只能是[good,general]中的一种,默认为good (Optional)
 * param maxFileSize:  (Optional)
 * param minFileSize:  (Optional)
 * param sumFileSize:  (Optional)
 * param avgFileSize:  (Optional)
 * param defaultSourceHost:  (Optional)
 * param httpType:  (Optional)
 * param ipSource:  (Optional)
 * param domainSource:  (Optional)
 * param ossSource:  (Optional)
 */
func NewCreateDomainRequestWithAllParams(
    domain string,
    sourceType *string,
    cdnType *string,
    backSourceType *string,
    dailyBandWidth *int64,
    quaility *string,
    maxFileSize *int64,
    minFileSize *int64,
    sumFileSize *int64,
    avgFileSize *int64,
    defaultSourceHost *string,
    httpType *string,
    ipSource []cdn.IpSourceInfo,
    domainSource []cdn.DomainSourceInfo,
    ossSource *string,
) *CreateDomainRequest {

    return &CreateDomainRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Domain: domain,
        SourceType: sourceType,
        CdnType: cdnType,
        BackSourceType: backSourceType,
        DailyBandWidth: dailyBandWidth,
        Quaility: quaility,
        MaxFileSize: maxFileSize,
        MinFileSize: minFileSize,
        SumFileSize: sumFileSize,
        AvgFileSize: avgFileSize,
        DefaultSourceHost: defaultSourceHost,
        HttpType: httpType,
        IpSource: ipSource,
        DomainSource: domainSource,
        OssSource: ossSource,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateDomainRequestWithoutParam() *CreateDomainRequest {

    return &CreateDomainRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param domain: 用户域名(Required) */
func (r *CreateDomainRequest) SetDomain(domain string) {
    r.Domain = domain
}

/* param sourceType: 回源类型只能是[ips,domain,oss]中的一种(Optional) */
func (r *CreateDomainRequest) SetSourceType(sourceType string) {
    r.SourceType = &sourceType
}

/* param cdnType: 点播域名的类型只能是[vod,download,web]中的一种(Optional) */
func (r *CreateDomainRequest) SetCdnType(cdnType string) {
    r.CdnType = &cdnType
}

/* param backSourceType: 回源方式,只能是[https,http]中的一种,默认http(Optional) */
func (r *CreateDomainRequest) SetBackSourceType(backSourceType string) {
    r.BackSourceType = &backSourceType
}

/* param dailyBandWidth: 日带宽(Mbps)(Optional) */
func (r *CreateDomainRequest) SetDailyBandWidth(dailyBandWidth int64) {
    r.DailyBandWidth = &dailyBandWidth
}

/* param quaility: 服务质量,只能是[good,general]中的一种,默认为good(Optional) */
func (r *CreateDomainRequest) SetQuaility(quaility string) {
    r.Quaility = &quaility
}

/* param maxFileSize: (Optional) */
func (r *CreateDomainRequest) SetMaxFileSize(maxFileSize int64) {
    r.MaxFileSize = &maxFileSize
}

/* param minFileSize: (Optional) */
func (r *CreateDomainRequest) SetMinFileSize(minFileSize int64) {
    r.MinFileSize = &minFileSize
}

/* param sumFileSize: (Optional) */
func (r *CreateDomainRequest) SetSumFileSize(sumFileSize int64) {
    r.SumFileSize = &sumFileSize
}

/* param avgFileSize: (Optional) */
func (r *CreateDomainRequest) SetAvgFileSize(avgFileSize int64) {
    r.AvgFileSize = &avgFileSize
}

/* param defaultSourceHost: (Optional) */
func (r *CreateDomainRequest) SetDefaultSourceHost(defaultSourceHost string) {
    r.DefaultSourceHost = &defaultSourceHost
}

/* param httpType: (Optional) */
func (r *CreateDomainRequest) SetHttpType(httpType string) {
    r.HttpType = &httpType
}

/* param ipSource: (Optional) */
func (r *CreateDomainRequest) SetIpSource(ipSource []cdn.IpSourceInfo) {
    r.IpSource = ipSource
}

/* param domainSource: (Optional) */
func (r *CreateDomainRequest) SetDomainSource(domainSource []cdn.DomainSourceInfo) {
    r.DomainSource = domainSource
}

/* param ossSource: (Optional) */
func (r *CreateDomainRequest) SetOssSource(ossSource string) {
    r.OssSource = &ossSource
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateDomainRequest) GetRegionId() string {
    return ""
}

type CreateDomainResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateDomainResult `json:"result"`
}

type CreateDomainResult struct {
}