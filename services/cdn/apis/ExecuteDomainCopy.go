// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    cdn "github.com/lshuining/jdcloud-sdk-go/services/cdn/models"
)

type ExecuteDomainCopyRequest struct {

    core.JDCloudRequest

    /* 源域名 (Optional) */
    Domain *string `json:"domain"`

    /* 待复制的域名列表,多个以","分隔,且不超过20个 (Optional) */
    CopyDomains *string `json:"copyDomains"`

    /* 待复制的配置项名字,区分大小写.配置项的含义：originConfig：回源配置信息;refererConfig：referer防盗链;urlAuthConfig：URL鉴权;userAgentConfig：UA访问控制;ipBlackListConfig：IP黑名单;cacheConfig：缓存配置;schemeFollowOriConfig：协议跟随回源;oriFollowRedirectConfig：回源跟随302;filterParamsConfig：过滤参数;rangeConfig：range回源;videoDraftConfig：视频拖拽;httpsConfig：Https配置;httpHeaderConfig：HttpHeader设置;otherConfig：其他配置 (Optional) */
    ConfigKeys *string `json:"configKeys"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewExecuteDomainCopyRequest(
) *ExecuteDomainCopyRequest {

	return &ExecuteDomainCopyRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/executeDomainCopy",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param domain: 源域名 (Optional)
 * param copyDomains: 待复制的域名列表,多个以","分隔,且不超过20个 (Optional)
 * param configKeys: 待复制的配置项名字,区分大小写.配置项的含义：originConfig：回源配置信息;refererConfig：referer防盗链;urlAuthConfig：URL鉴权;userAgentConfig：UA访问控制;ipBlackListConfig：IP黑名单;cacheConfig：缓存配置;schemeFollowOriConfig：协议跟随回源;oriFollowRedirectConfig：回源跟随302;filterParamsConfig：过滤参数;rangeConfig：range回源;videoDraftConfig：视频拖拽;httpsConfig：Https配置;httpHeaderConfig：HttpHeader设置;otherConfig：其他配置 (Optional)
 */
func NewExecuteDomainCopyRequestWithAllParams(
    domain *string,
    copyDomains *string,
    configKeys *string,
) *ExecuteDomainCopyRequest {

    return &ExecuteDomainCopyRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/executeDomainCopy",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Domain: domain,
        CopyDomains: copyDomains,
        ConfigKeys: configKeys,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewExecuteDomainCopyRequestWithoutParam() *ExecuteDomainCopyRequest {

    return &ExecuteDomainCopyRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/executeDomainCopy",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param domain: 源域名(Optional) */
func (r *ExecuteDomainCopyRequest) SetDomain(domain string) {
    r.Domain = &domain
}

/* param copyDomains: 待复制的域名列表,多个以","分隔,且不超过20个(Optional) */
func (r *ExecuteDomainCopyRequest) SetCopyDomains(copyDomains string) {
    r.CopyDomains = &copyDomains
}

/* param configKeys: 待复制的配置项名字,区分大小写.配置项的含义：originConfig：回源配置信息;refererConfig：referer防盗链;urlAuthConfig：URL鉴权;userAgentConfig：UA访问控制;ipBlackListConfig：IP黑名单;cacheConfig：缓存配置;schemeFollowOriConfig：协议跟随回源;oriFollowRedirectConfig：回源跟随302;filterParamsConfig：过滤参数;rangeConfig：range回源;videoDraftConfig：视频拖拽;httpsConfig：Https配置;httpHeaderConfig：HttpHeader设置;otherConfig：其他配置(Optional) */
func (r *ExecuteDomainCopyRequest) SetConfigKeys(configKeys string) {
    r.ConfigKeys = &configKeys
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ExecuteDomainCopyRequest) GetRegionId() string {
    return ""
}

type ExecuteDomainCopyResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ExecuteDomainCopyResult `json:"result"`
}

type ExecuteDomainCopyResult struct {
    ErrorResult []cdn.ErrorEntity `json:"errorResult"`
}