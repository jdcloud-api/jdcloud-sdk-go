// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type ConfigDynamicGzipRequest struct {

    core.JDCloudRequest

    /* 用户域名  */
    Domain string `json:"domain"`

    /* 是否开启 on：开启 off：关闭 (Optional) */
    Enable *string `json:"enable"`

    /* 压缩类型，每种类型以英文逗号分隔。默认值：text/html (Optional) */
    Types *string `json:"types"`
}

/*
 * param domain: 用户域名 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewConfigDynamicGzipRequest(
    domain string,
) *ConfigDynamicGzipRequest {

	return &ConfigDynamicGzipRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/domain/{domain}/dynamicGzip",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Domain: domain,
	}
}

/*
 * param domain: 用户域名 (Required)
 * param enable: 是否开启 on：开启 off：关闭 (Optional)
 * param types: 压缩类型，每种类型以英文逗号分隔。默认值：text/html (Optional)
 */
func NewConfigDynamicGzipRequestWithAllParams(
    domain string,
    enable *string,
    types *string,
) *ConfigDynamicGzipRequest {

    return &ConfigDynamicGzipRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/dynamicGzip",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Domain: domain,
        Enable: enable,
        Types: types,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewConfigDynamicGzipRequestWithoutParam() *ConfigDynamicGzipRequest {

    return &ConfigDynamicGzipRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/dynamicGzip",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param domain: 用户域名(Required) */
func (r *ConfigDynamicGzipRequest) SetDomain(domain string) {
    r.Domain = domain
}
/* param enable: 是否开启 on：开启 off：关闭(Optional) */
func (r *ConfigDynamicGzipRequest) SetEnable(enable string) {
    r.Enable = &enable
}
/* param types: 压缩类型，每种类型以英文逗号分隔。默认值：text/html(Optional) */
func (r *ConfigDynamicGzipRequest) SetTypes(types string) {
    r.Types = &types
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ConfigDynamicGzipRequest) GetRegionId() string {
    return ""
}

type ConfigDynamicGzipResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ConfigDynamicGzipResult `json:"result"`
}

type ConfigDynamicGzipResult struct {
}