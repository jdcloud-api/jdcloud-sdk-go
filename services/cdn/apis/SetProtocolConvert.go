// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    cdn "github.com/lshuining/jdcloud-sdk-go/services/cdn/models"
)

type SetProtocolConvertRequest struct {

    core.JDCloudRequest

    /* 用户域名  */
    Domain string `json:"domain"`

    /* https证书,转https格式时必传 (Optional) */
    Certificate *string `json:"certificate"`

    /* https私钥，转https格式时必传 (Optional) */
    RsaKey *string `json:"rsaKey"`

    /* 证书来源有两种类型：default,ssl (Optional) */
    CertFrom *string `json:"certFrom"`

    /* ssl证书id (Optional) */
    SslCertId *string `json:"sslCertId"`

    /* 是否同步到ssl,boolean值，取值true或者false (Optional) */
    SyncToSsl *bool `json:"syncToSsl"`

    /* syncToSsl是true时，certName是必填项 (Optional) */
    CertName *string `json:"certName"`

    /*  (Optional) */
    ProtocolConverts []cdn.ProtocolConvert `json:"protocolConverts"`
}

/*
 * param domain: 用户域名 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewSetProtocolConvertRequest(
    domain string,
) *SetProtocolConvertRequest {

	return &SetProtocolConvertRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/liveDomain/{domain}/protocolConvert",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Domain: domain,
	}
}

/*
 * param domain: 用户域名 (Required)
 * param certificate: https证书,转https格式时必传 (Optional)
 * param rsaKey: https私钥，转https格式时必传 (Optional)
 * param certFrom: 证书来源有两种类型：default,ssl (Optional)
 * param sslCertId: ssl证书id (Optional)
 * param syncToSsl: 是否同步到ssl,boolean值，取值true或者false (Optional)
 * param certName: syncToSsl是true时，certName是必填项 (Optional)
 * param protocolConverts:  (Optional)
 */
func NewSetProtocolConvertRequestWithAllParams(
    domain string,
    certificate *string,
    rsaKey *string,
    certFrom *string,
    sslCertId *string,
    syncToSsl *bool,
    certName *string,
    protocolConverts []cdn.ProtocolConvert,
) *SetProtocolConvertRequest {

    return &SetProtocolConvertRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/liveDomain/{domain}/protocolConvert",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Domain: domain,
        Certificate: certificate,
        RsaKey: rsaKey,
        CertFrom: certFrom,
        SslCertId: sslCertId,
        SyncToSsl: syncToSsl,
        CertName: certName,
        ProtocolConverts: protocolConverts,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewSetProtocolConvertRequestWithoutParam() *SetProtocolConvertRequest {

    return &SetProtocolConvertRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/liveDomain/{domain}/protocolConvert",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param domain: 用户域名(Required) */
func (r *SetProtocolConvertRequest) SetDomain(domain string) {
    r.Domain = domain
}

/* param certificate: https证书,转https格式时必传(Optional) */
func (r *SetProtocolConvertRequest) SetCertificate(certificate string) {
    r.Certificate = &certificate
}

/* param rsaKey: https私钥，转https格式时必传(Optional) */
func (r *SetProtocolConvertRequest) SetRsaKey(rsaKey string) {
    r.RsaKey = &rsaKey
}

/* param certFrom: 证书来源有两种类型：default,ssl(Optional) */
func (r *SetProtocolConvertRequest) SetCertFrom(certFrom string) {
    r.CertFrom = &certFrom
}

/* param sslCertId: ssl证书id(Optional) */
func (r *SetProtocolConvertRequest) SetSslCertId(sslCertId string) {
    r.SslCertId = &sslCertId
}

/* param syncToSsl: 是否同步到ssl,boolean值，取值true或者false(Optional) */
func (r *SetProtocolConvertRequest) SetSyncToSsl(syncToSsl bool) {
    r.SyncToSsl = &syncToSsl
}

/* param certName: syncToSsl是true时，certName是必填项(Optional) */
func (r *SetProtocolConvertRequest) SetCertName(certName string) {
    r.CertName = &certName
}

/* param protocolConverts: (Optional) */
func (r *SetProtocolConvertRequest) SetProtocolConverts(protocolConverts []cdn.ProtocolConvert) {
    r.ProtocolConverts = protocolConverts
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r SetProtocolConvertRequest) GetRegionId() string {
    return ""
}

type SetProtocolConvertResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result SetProtocolConvertResult `json:"result"`
}

type SetProtocolConvertResult struct {
}