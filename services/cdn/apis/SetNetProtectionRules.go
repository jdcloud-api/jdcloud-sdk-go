// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type SetNetProtectionRulesRequest struct {

    core.JDCloudRequest

    /* 源新建连接限速，取值on,off，其中on开启，off关闭 (Optional) */
    SrcNewConnLimitEnable *string `json:"srcNewConnLimitEnable"`

    /* 目的新建连接，取值on,off，其中on开启，off关闭 (Optional) */
    DstNewConnLimitEnable *string `json:"dstNewConnLimitEnable"`

    /* 报文最小长度（包最小长度）,取值：1-1500 (Optional) */
    DatagramRangeMin *int64 `json:"datagramRangeMin"`

    /* 报文最大长度（包最大长度）,取值：1-1500 (Optional) */
    DatagramRangeMax *int64 `json:"datagramRangeMax"`

    /* 目的新建连接限速值，取值：0-4294967295 (Optional) */
    DstNewConnLimitValue *int64 `json:"dstNewConnLimitValue"`

    /* 源新建连接限速值，取值：0-4294967295 (Optional) */
    SrcNewConnLimitValue *int64 `json:"srcNewConnLimitValue"`

    /* 地域黑名单（GEO IP拦截） (Optional) */
    GeoBlack []string `json:"geoBlack"`

    /* ip 黑名单 (Optional) */
    IpBlack []string `json:"ipBlack"`

    /* ip 白名单 (Optional) */
    IpWhite []string `json:"ipWhite"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewSetNetProtectionRulesRequest(
) *SetNetProtectionRulesRequest {

	return &SetNetProtectionRulesRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/netProtectionRules",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param srcNewConnLimitEnable: 源新建连接限速，取值on,off，其中on开启，off关闭 (Optional)
 * param dstNewConnLimitEnable: 目的新建连接，取值on,off，其中on开启，off关闭 (Optional)
 * param datagramRangeMin: 报文最小长度（包最小长度）,取值：1-1500 (Optional)
 * param datagramRangeMax: 报文最大长度（包最大长度）,取值：1-1500 (Optional)
 * param dstNewConnLimitValue: 目的新建连接限速值，取值：0-4294967295 (Optional)
 * param srcNewConnLimitValue: 源新建连接限速值，取值：0-4294967295 (Optional)
 * param geoBlack: 地域黑名单（GEO IP拦截） (Optional)
 * param ipBlack: ip 黑名单 (Optional)
 * param ipWhite: ip 白名单 (Optional)
 */
func NewSetNetProtectionRulesRequestWithAllParams(
    srcNewConnLimitEnable *string,
    dstNewConnLimitEnable *string,
    datagramRangeMin *int64,
    datagramRangeMax *int64,
    dstNewConnLimitValue *int64,
    srcNewConnLimitValue *int64,
    geoBlack []string,
    ipBlack []string,
    ipWhite []string,
) *SetNetProtectionRulesRequest {

    return &SetNetProtectionRulesRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/netProtectionRules",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        SrcNewConnLimitEnable: srcNewConnLimitEnable,
        DstNewConnLimitEnable: dstNewConnLimitEnable,
        DatagramRangeMin: datagramRangeMin,
        DatagramRangeMax: datagramRangeMax,
        DstNewConnLimitValue: dstNewConnLimitValue,
        SrcNewConnLimitValue: srcNewConnLimitValue,
        GeoBlack: geoBlack,
        IpBlack: ipBlack,
        IpWhite: ipWhite,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewSetNetProtectionRulesRequestWithoutParam() *SetNetProtectionRulesRequest {

    return &SetNetProtectionRulesRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/netProtectionRules",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param srcNewConnLimitEnable: 源新建连接限速，取值on,off，其中on开启，off关闭(Optional) */
func (r *SetNetProtectionRulesRequest) SetSrcNewConnLimitEnable(srcNewConnLimitEnable string) {
    r.SrcNewConnLimitEnable = &srcNewConnLimitEnable
}

/* param dstNewConnLimitEnable: 目的新建连接，取值on,off，其中on开启，off关闭(Optional) */
func (r *SetNetProtectionRulesRequest) SetDstNewConnLimitEnable(dstNewConnLimitEnable string) {
    r.DstNewConnLimitEnable = &dstNewConnLimitEnable
}

/* param datagramRangeMin: 报文最小长度（包最小长度）,取值：1-1500(Optional) */
func (r *SetNetProtectionRulesRequest) SetDatagramRangeMin(datagramRangeMin int64) {
    r.DatagramRangeMin = &datagramRangeMin
}

/* param datagramRangeMax: 报文最大长度（包最大长度）,取值：1-1500(Optional) */
func (r *SetNetProtectionRulesRequest) SetDatagramRangeMax(datagramRangeMax int64) {
    r.DatagramRangeMax = &datagramRangeMax
}

/* param dstNewConnLimitValue: 目的新建连接限速值，取值：0-4294967295(Optional) */
func (r *SetNetProtectionRulesRequest) SetDstNewConnLimitValue(dstNewConnLimitValue int64) {
    r.DstNewConnLimitValue = &dstNewConnLimitValue
}

/* param srcNewConnLimitValue: 源新建连接限速值，取值：0-4294967295(Optional) */
func (r *SetNetProtectionRulesRequest) SetSrcNewConnLimitValue(srcNewConnLimitValue int64) {
    r.SrcNewConnLimitValue = &srcNewConnLimitValue
}

/* param geoBlack: 地域黑名单（GEO IP拦截）(Optional) */
func (r *SetNetProtectionRulesRequest) SetGeoBlack(geoBlack []string) {
    r.GeoBlack = geoBlack
}

/* param ipBlack: ip 黑名单(Optional) */
func (r *SetNetProtectionRulesRequest) SetIpBlack(ipBlack []string) {
    r.IpBlack = ipBlack
}

/* param ipWhite: ip 白名单(Optional) */
func (r *SetNetProtectionRulesRequest) SetIpWhite(ipWhite []string) {
    r.IpWhite = ipWhite
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r SetNetProtectionRulesRequest) GetRegionId() string {
    return ""
}

type SetNetProtectionRulesResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result SetNetProtectionRulesResult `json:"result"`
}

type SetNetProtectionRulesResult struct {
}