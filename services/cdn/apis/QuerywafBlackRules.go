// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    cdn "github.com/lshuining/jdcloud-sdk-go/services/cdn/models"
)

type QuerywafBlackRulesRequest struct {

    core.JDCloudRequest

    /* 用户域名  */
    Domain string `json:"domain"`

    /* ruleType, valid values [ip, geo, uri]  */
    RuleType string `json:"ruleType"`

    /* ruleId, defalut empty (Optional) */
    Id *string `json:"id"`

    /* page size , default 0 to query all (Optional) */
    PageSize *int `json:"pageSize"`

    /* page index , default 0 to query all (Optional) */
    PageIndex *int `json:"pageIndex"`
}

/*
 * param domain: 用户域名 (Required)
 * param ruleType: ruleType, valid values [ip, geo, uri] (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewQuerywafBlackRulesRequest(
    domain string,
    ruleType string,
) *QuerywafBlackRulesRequest {

	return &QuerywafBlackRulesRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/domain/{domain}/wafBlackRules",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        Domain: domain,
        RuleType: ruleType,
	}
}

/*
 * param domain: 用户域名 (Required)
 * param ruleType: ruleType, valid values [ip, geo, uri] (Required)
 * param id: ruleId, defalut empty (Optional)
 * param pageSize: page size , default 0 to query all (Optional)
 * param pageIndex: page index , default 0 to query all (Optional)
 */
func NewQuerywafBlackRulesRequestWithAllParams(
    domain string,
    ruleType string,
    id *string,
    pageSize *int,
    pageIndex *int,
) *QuerywafBlackRulesRequest {

    return &QuerywafBlackRulesRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/wafBlackRules",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        Domain: domain,
        RuleType: ruleType,
        Id: id,
        PageSize: pageSize,
        PageIndex: pageIndex,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewQuerywafBlackRulesRequestWithoutParam() *QuerywafBlackRulesRequest {

    return &QuerywafBlackRulesRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/wafBlackRules",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param domain: 用户域名(Required) */
func (r *QuerywafBlackRulesRequest) SetDomain(domain string) {
    r.Domain = domain
}

/* param ruleType: ruleType, valid values [ip, geo, uri](Required) */
func (r *QuerywafBlackRulesRequest) SetRuleType(ruleType string) {
    r.RuleType = ruleType
}

/* param id: ruleId, defalut empty(Optional) */
func (r *QuerywafBlackRulesRequest) SetId(id string) {
    r.Id = &id
}

/* param pageSize: page size , default 0 to query all(Optional) */
func (r *QuerywafBlackRulesRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

/* param pageIndex: page index , default 0 to query all(Optional) */
func (r *QuerywafBlackRulesRequest) SetPageIndex(pageIndex int) {
    r.PageIndex = &pageIndex
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r QuerywafBlackRulesRequest) GetRegionId() string {
    return ""
}

type QuerywafBlackRulesResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result QuerywafBlackRulesResult `json:"result"`
}

type QuerywafBlackRulesResult struct {
    Rules []cdn.WafBlackRuleModel `json:"rules"`
}