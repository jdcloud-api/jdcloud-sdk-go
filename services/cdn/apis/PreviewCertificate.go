// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type PreviewCertificateRequest struct {

    core.JDCloudRequest

    /* 用户域名  */
    Domain string `json:"domain"`

    /*  (Optional) */
    Content *string `json:"content"`
}

/*
 * param domain: 用户域名 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewPreviewCertificateRequest(
    domain string,
) *PreviewCertificateRequest {

	return &PreviewCertificateRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/domain/{domain}/certificate",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Domain: domain,
	}
}

/*
 * param domain: 用户域名 (Required)
 * param content:  (Optional)
 */
func NewPreviewCertificateRequestWithAllParams(
    domain string,
    content *string,
) *PreviewCertificateRequest {

    return &PreviewCertificateRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/certificate",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Domain: domain,
        Content: content,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewPreviewCertificateRequestWithoutParam() *PreviewCertificateRequest {

    return &PreviewCertificateRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/certificate",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param domain: 用户域名(Required) */
func (r *PreviewCertificateRequest) SetDomain(domain string) {
    r.Domain = domain
}

/* param content: (Optional) */
func (r *PreviewCertificateRequest) SetContent(content string) {
    r.Content = &content
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r PreviewCertificateRequest) GetRegionId() string {
    return ""
}

type PreviewCertificateResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result PreviewCertificateResult `json:"result"`
}

type PreviewCertificateResult struct {
    SigAlgName string `json:"sigAlgName"`
    Issuer string `json:"issuer"`
    StartDate string `json:"startDate"`
    EndDate string `json:"endDate"`
    User string `json:"user"`
    SigHashAlgName string `json:"sigHashAlgName"`
}