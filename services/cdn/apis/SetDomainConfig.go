// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type SetDomainConfigRequest struct {

    core.JDCloudRequest

    /* 用户域名  */
    Domain string `json:"domain"`

    /* http类型,只能为http或者https (Optional) */
    HttpType *string `json:"httpType"`

    /* 回源类型 (Optional) */
    BackSourceType *string `json:"backSourceType"`

    /* 有三种类型：default、http、https (Optional) */
    JumpType *string `json:"jumpType"`

    /* dash鉴权相关配置 (Optional) */
    JcdnTimeAnti *string `json:"jcdnTimeAnti"`

    /* 回源鉴权相关配置 (Optional) */
    HdrCtrl *string `json:"hdrCtrl"`

    /* 头条header配置 (Optional) */
    ToutiaoHeader *string `json:"toutiaoHeader"`
}

/*
 * param domain: 用户域名 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewSetDomainConfigRequest(
    domain string,
) *SetDomainConfigRequest {

	return &SetDomainConfigRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/domain/{domain}/config",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Domain: domain,
	}
}

/*
 * param domain: 用户域名 (Required)
 * param httpType: http类型,只能为http或者https (Optional)
 * param backSourceType: 回源类型 (Optional)
 * param jumpType: 有三种类型：default、http、https (Optional)
 * param jcdnTimeAnti: dash鉴权相关配置 (Optional)
 * param hdrCtrl: 回源鉴权相关配置 (Optional)
 * param toutiaoHeader: 头条header配置 (Optional)
 */
func NewSetDomainConfigRequestWithAllParams(
    domain string,
    httpType *string,
    backSourceType *string,
    jumpType *string,
    jcdnTimeAnti *string,
    hdrCtrl *string,
    toutiaoHeader *string,
) *SetDomainConfigRequest {

    return &SetDomainConfigRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/config",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Domain: domain,
        HttpType: httpType,
        BackSourceType: backSourceType,
        JumpType: jumpType,
        JcdnTimeAnti: jcdnTimeAnti,
        HdrCtrl: hdrCtrl,
        ToutiaoHeader: toutiaoHeader,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewSetDomainConfigRequestWithoutParam() *SetDomainConfigRequest {

    return &SetDomainConfigRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/config",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param domain: 用户域名(Required) */
func (r *SetDomainConfigRequest) SetDomain(domain string) {
    r.Domain = domain
}

/* param httpType: http类型,只能为http或者https(Optional) */
func (r *SetDomainConfigRequest) SetHttpType(httpType string) {
    r.HttpType = &httpType
}

/* param backSourceType: 回源类型(Optional) */
func (r *SetDomainConfigRequest) SetBackSourceType(backSourceType string) {
    r.BackSourceType = &backSourceType
}

/* param jumpType: 有三种类型：default、http、https(Optional) */
func (r *SetDomainConfigRequest) SetJumpType(jumpType string) {
    r.JumpType = &jumpType
}

/* param jcdnTimeAnti: dash鉴权相关配置(Optional) */
func (r *SetDomainConfigRequest) SetJcdnTimeAnti(jcdnTimeAnti string) {
    r.JcdnTimeAnti = &jcdnTimeAnti
}

/* param hdrCtrl: 回源鉴权相关配置(Optional) */
func (r *SetDomainConfigRequest) SetHdrCtrl(hdrCtrl string) {
    r.HdrCtrl = &hdrCtrl
}

/* param toutiaoHeader: 头条header配置(Optional) */
func (r *SetDomainConfigRequest) SetToutiaoHeader(toutiaoHeader string) {
    r.ToutiaoHeader = &toutiaoHeader
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r SetDomainConfigRequest) GetRegionId() string {
    return ""
}

type SetDomainConfigResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result SetDomainConfigResult `json:"result"`
}

type SetDomainConfigResult struct {
    TaskId string `json:"taskId"`
}