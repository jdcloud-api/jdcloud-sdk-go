// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type SetRefreshLimitRequest struct {

    core.JDCloudRequest

    /* 子账号，只有传值才会设置子账号，其余不传或传空是设置主账号 (Optional) */
    SubUsers []string `json:"subUsers"`

    /* 刷新个数，如果是首次设置，不传默认是2000；已经设置，再次设置是更新，不传表示不进行更新 (Optional) */
    RefreshCount *int64 `json:"refreshCount"`

    /* 刷新个数，如果是首次设置，不传默认是2000；已经设置，再次设置是更新，不传表示不进行更新 (Optional) */
    PrefetchCount *int64 `json:"prefetchCount"`

    /* 刷新个数，如果是首次设置，不传默认是50；已经设置，再次设置是更新，不传表示不进行更新 (Optional) */
    DirCount *int64 `json:"dirCount"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewSetRefreshLimitRequest(
) *SetRefreshLimitRequest {

	return &SetRefreshLimitRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/task:configLimit",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param subUsers: 子账号，只有传值才会设置子账号，其余不传或传空是设置主账号 (Optional)
 * param refreshCount: 刷新个数，如果是首次设置，不传默认是2000；已经设置，再次设置是更新，不传表示不进行更新 (Optional)
 * param prefetchCount: 刷新个数，如果是首次设置，不传默认是2000；已经设置，再次设置是更新，不传表示不进行更新 (Optional)
 * param dirCount: 刷新个数，如果是首次设置，不传默认是50；已经设置，再次设置是更新，不传表示不进行更新 (Optional)
 */
func NewSetRefreshLimitRequestWithAllParams(
    subUsers []string,
    refreshCount *int64,
    prefetchCount *int64,
    dirCount *int64,
) *SetRefreshLimitRequest {

    return &SetRefreshLimitRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/task:configLimit",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        SubUsers: subUsers,
        RefreshCount: refreshCount,
        PrefetchCount: prefetchCount,
        DirCount: dirCount,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewSetRefreshLimitRequestWithoutParam() *SetRefreshLimitRequest {

    return &SetRefreshLimitRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/task:configLimit",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param subUsers: 子账号，只有传值才会设置子账号，其余不传或传空是设置主账号(Optional) */
func (r *SetRefreshLimitRequest) SetSubUsers(subUsers []string) {
    r.SubUsers = subUsers
}

/* param refreshCount: 刷新个数，如果是首次设置，不传默认是2000；已经设置，再次设置是更新，不传表示不进行更新(Optional) */
func (r *SetRefreshLimitRequest) SetRefreshCount(refreshCount int64) {
    r.RefreshCount = &refreshCount
}

/* param prefetchCount: 刷新个数，如果是首次设置，不传默认是2000；已经设置，再次设置是更新，不传表示不进行更新(Optional) */
func (r *SetRefreshLimitRequest) SetPrefetchCount(prefetchCount int64) {
    r.PrefetchCount = &prefetchCount
}

/* param dirCount: 刷新个数，如果是首次设置，不传默认是50；已经设置，再次设置是更新，不传表示不进行更新(Optional) */
func (r *SetRefreshLimitRequest) SetDirCount(dirCount int64) {
    r.DirCount = &dirCount
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r SetRefreshLimitRequest) GetRegionId() string {
    return ""
}

type SetRefreshLimitResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result SetRefreshLimitResult `json:"result"`
}

type SetRefreshLimitResult struct {
}