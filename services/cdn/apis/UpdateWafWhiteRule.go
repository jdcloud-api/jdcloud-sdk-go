// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type UpdateWafWhiteRuleRequest struct {

    core.JDCloudRequest

    /* 用户域名  */
    Domain string `json:"domain"`

    /* 需要修改的白名单ID  */
    Id string `json:"id"`

    /* 白名单类型， uri ip geo (Optional) */
    RuleType *string `json:"ruleType"`

    /* 匹配模式,uri类型有效，0=完全匹配  1=前缀匹配 2=包含 3=正则 4=大于 5=后缀 (Optional) */
    MatchOp *int `json:"matchOp"`

    /* 匹配值 (Optional) */
    Val *string `json:"val"`

    /* 后续处理 "waf" "cc" "deny"自由组合，空表示跳过后续所有阶段 (Optional) */
    Actions []string `json:"actions"`
}

/*
 * param domain: 用户域名 (Required)
 * param id: 需要修改的白名单ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateWafWhiteRuleRequest(
    domain string,
    id string,
) *UpdateWafWhiteRuleRequest {

	return &UpdateWafWhiteRuleRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/domain/{domain}/wafWhiteRule/{id}",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Domain: domain,
        Id: id,
	}
}

/*
 * param domain: 用户域名 (Required)
 * param id: 需要修改的白名单ID (Required)
 * param ruleType: 白名单类型， uri ip geo (Optional)
 * param matchOp: 匹配模式,uri类型有效，0=完全匹配  1=前缀匹配 2=包含 3=正则 4=大于 5=后缀 (Optional)
 * param val: 匹配值 (Optional)
 * param actions: 后续处理 "waf" "cc" "deny"自由组合，空表示跳过后续所有阶段 (Optional)
 */
func NewUpdateWafWhiteRuleRequestWithAllParams(
    domain string,
    id string,
    ruleType *string,
    matchOp *int,
    val *string,
    actions []string,
) *UpdateWafWhiteRuleRequest {

    return &UpdateWafWhiteRuleRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/wafWhiteRule/{id}",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Domain: domain,
        Id: id,
        RuleType: ruleType,
        MatchOp: matchOp,
        Val: val,
        Actions: actions,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateWafWhiteRuleRequestWithoutParam() *UpdateWafWhiteRuleRequest {

    return &UpdateWafWhiteRuleRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/wafWhiteRule/{id}",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param domain: 用户域名(Required) */
func (r *UpdateWafWhiteRuleRequest) SetDomain(domain string) {
    r.Domain = domain
}

/* param id: 需要修改的白名单ID(Required) */
func (r *UpdateWafWhiteRuleRequest) SetId(id string) {
    r.Id = id
}

/* param ruleType: 白名单类型， uri ip geo(Optional) */
func (r *UpdateWafWhiteRuleRequest) SetRuleType(ruleType string) {
    r.RuleType = &ruleType
}

/* param matchOp: 匹配模式,uri类型有效，0=完全匹配  1=前缀匹配 2=包含 3=正则 4=大于 5=后缀(Optional) */
func (r *UpdateWafWhiteRuleRequest) SetMatchOp(matchOp int) {
    r.MatchOp = &matchOp
}

/* param val: 匹配值(Optional) */
func (r *UpdateWafWhiteRuleRequest) SetVal(val string) {
    r.Val = &val
}

/* param actions: 后续处理 "waf" "cc" "deny"自由组合，空表示跳过后续所有阶段(Optional) */
func (r *UpdateWafWhiteRuleRequest) SetActions(actions []string) {
    r.Actions = actions
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateWafWhiteRuleRequest) GetRegionId() string {
    return ""
}

type UpdateWafWhiteRuleResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateWafWhiteRuleResult `json:"result"`
}

type UpdateWafWhiteRuleResult struct {
}