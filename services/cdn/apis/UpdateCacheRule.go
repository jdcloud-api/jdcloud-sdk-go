// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type UpdateCacheRuleRequest struct {

    core.JDCloudRequest

    /* 用户域名  */
    Domain string `json:"domain"`

    /* 此条配置的权重值, 取值范围为1-10,1最大 (Optional) */
    Weight *int `json:"weight"`

    /* 缓存时间,单位秒 (Optional) */
    Ttl *int64 `json:"ttl"`

    /* 规则内容。其他类型只能以/或者.开头，如/a/b或.jpg (Optional) */
    Contents *string `json:"contents"`

    /* 缓存方式：0、不缓存，1自定义 (Optional) */
    CacheType *int `json:"cacheType"`

    /* 配置id (Optional) */
    ConfigId *int64 `json:"configId"`
}

/*
 * param domain: 用户域名 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateCacheRuleRequest(
    domain string,
) *UpdateCacheRuleRequest {

	return &UpdateCacheRuleRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/domain/{domain}/cacheRule",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        Domain: domain,
	}
}

/*
 * param domain: 用户域名 (Required)
 * param weight: 此条配置的权重值, 取值范围为1-10,1最大 (Optional)
 * param ttl: 缓存时间,单位秒 (Optional)
 * param contents: 规则内容。其他类型只能以/或者.开头，如/a/b或.jpg (Optional)
 * param cacheType: 缓存方式：0、不缓存，1自定义 (Optional)
 * param configId: 配置id (Optional)
 */
func NewUpdateCacheRuleRequestWithAllParams(
    domain string,
    weight *int,
    ttl *int64,
    contents *string,
    cacheType *int,
    configId *int64,
) *UpdateCacheRuleRequest {

    return &UpdateCacheRuleRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/cacheRule",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        Domain: domain,
        Weight: weight,
        Ttl: ttl,
        Contents: contents,
        CacheType: cacheType,
        ConfigId: configId,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateCacheRuleRequestWithoutParam() *UpdateCacheRuleRequest {

    return &UpdateCacheRuleRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/cacheRule",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param domain: 用户域名(Required) */
func (r *UpdateCacheRuleRequest) SetDomain(domain string) {
    r.Domain = domain
}

/* param weight: 此条配置的权重值, 取值范围为1-10,1最大(Optional) */
func (r *UpdateCacheRuleRequest) SetWeight(weight int) {
    r.Weight = &weight
}

/* param ttl: 缓存时间,单位秒(Optional) */
func (r *UpdateCacheRuleRequest) SetTtl(ttl int64) {
    r.Ttl = &ttl
}

/* param contents: 规则内容。其他类型只能以/或者.开头，如/a/b或.jpg(Optional) */
func (r *UpdateCacheRuleRequest) SetContents(contents string) {
    r.Contents = &contents
}

/* param cacheType: 缓存方式：0、不缓存，1自定义(Optional) */
func (r *UpdateCacheRuleRequest) SetCacheType(cacheType int) {
    r.CacheType = &cacheType
}

/* param configId: 配置id(Optional) */
func (r *UpdateCacheRuleRequest) SetConfigId(configId int64) {
    r.ConfigId = &configId
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateCacheRuleRequest) GetRegionId() string {
    return ""
}

type UpdateCacheRuleResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateCacheRuleResult `json:"result"`
}

type UpdateCacheRuleResult struct {
}