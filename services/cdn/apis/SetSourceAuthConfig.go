// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    cdn "github.com/lshuining/jdcloud-sdk-go/services/cdn/models"
)

type SetSourceAuthConfigRequest struct {

    core.JDCloudRequest

    /* 用户域名  */
    Domain string `json:"domain"`

    /* 是否开启鉴权[on,off] (Optional) */
    Enable *string `json:"enable"`

    /* 回源为主/备[master,slave] (Optional) */
    OriginRole *string `json:"originRole"`

    /* 鉴权类型[oss,aws,tos],aws暂不支持 (Optional) */
    AuthType *string `json:"authType"`

    /* tos类型鉴权参数,authType为tos是不能为空 (Optional) */
    TosAuthInfo *cdn.TOSAuthInfo `json:"tosAuthInfo"`

    /* oss类型鉴权参数,authType为oss是不能为空 (Optional) */
    OssAuthInfo *cdn.OSSAuthInfo `json:"ossAuthInfo"`
}

/*
 * param domain: 用户域名 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewSetSourceAuthConfigRequest(
    domain string,
) *SetSourceAuthConfigRequest {

	return &SetSourceAuthConfigRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/domain/{domain}/setSourceAuthConfig",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Domain: domain,
	}
}

/*
 * param domain: 用户域名 (Required)
 * param enable: 是否开启鉴权[on,off] (Optional)
 * param originRole: 回源为主/备[master,slave] (Optional)
 * param authType: 鉴权类型[oss,aws,tos],aws暂不支持 (Optional)
 * param tosAuthInfo: tos类型鉴权参数,authType为tos是不能为空 (Optional)
 * param ossAuthInfo: oss类型鉴权参数,authType为oss是不能为空 (Optional)
 */
func NewSetSourceAuthConfigRequestWithAllParams(
    domain string,
    enable *string,
    originRole *string,
    authType *string,
    tosAuthInfo *cdn.TOSAuthInfo,
    ossAuthInfo *cdn.OSSAuthInfo,
) *SetSourceAuthConfigRequest {

    return &SetSourceAuthConfigRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/setSourceAuthConfig",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Domain: domain,
        Enable: enable,
        OriginRole: originRole,
        AuthType: authType,
        TosAuthInfo: tosAuthInfo,
        OssAuthInfo: ossAuthInfo,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewSetSourceAuthConfigRequestWithoutParam() *SetSourceAuthConfigRequest {

    return &SetSourceAuthConfigRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/setSourceAuthConfig",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param domain: 用户域名(Required) */
func (r *SetSourceAuthConfigRequest) SetDomain(domain string) {
    r.Domain = domain
}

/* param enable: 是否开启鉴权[on,off](Optional) */
func (r *SetSourceAuthConfigRequest) SetEnable(enable string) {
    r.Enable = &enable
}

/* param originRole: 回源为主/备[master,slave](Optional) */
func (r *SetSourceAuthConfigRequest) SetOriginRole(originRole string) {
    r.OriginRole = &originRole
}

/* param authType: 鉴权类型[oss,aws,tos],aws暂不支持(Optional) */
func (r *SetSourceAuthConfigRequest) SetAuthType(authType string) {
    r.AuthType = &authType
}

/* param tosAuthInfo: tos类型鉴权参数,authType为tos是不能为空(Optional) */
func (r *SetSourceAuthConfigRequest) SetTosAuthInfo(tosAuthInfo *cdn.TOSAuthInfo) {
    r.TosAuthInfo = tosAuthInfo
}

/* param ossAuthInfo: oss类型鉴权参数,authType为oss是不能为空(Optional) */
func (r *SetSourceAuthConfigRequest) SetOssAuthInfo(ossAuthInfo *cdn.OSSAuthInfo) {
    r.OssAuthInfo = ossAuthInfo
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r SetSourceAuthConfigRequest) GetRegionId() string {
    return ""
}

type SetSourceAuthConfigResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result SetSourceAuthConfigResult `json:"result"`
}

type SetSourceAuthConfigResult struct {
    TaskId string `json:"taskId"`
}