// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type UpdateResponseSpeedLimitRequest struct {

    core.JDCloudRequest

    /* 用户域名  */
    Domain string `json:"domain"`

    /* 单请求响应限速唯一键 (Optional) */
    Id *string `json:"id"`

    /* 生效类型 0:全部类型 1:指定文件类型 (Optional) */
    ActionType *int `json:"actionType"`

    /* 文件类型 多个文件类型用英文逗号分割，例如.mp4;.txt (Optional) */
    FileContent *string `json:"fileContent"`

    /* 时间范围 18:00-23:00 (Optional) */
    TimeRange *string `json:"timeRange"`

    /* 限速值 单位：KB/s (Optional) */
    SpeedLimit *int `json:"speedLimit"`
}

/*
 * param domain: 用户域名 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateResponseSpeedLimitRequest(
    domain string,
) *UpdateResponseSpeedLimitRequest {

	return &UpdateResponseSpeedLimitRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/domain/{domain}/responseSpeedLimit",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        Domain: domain,
	}
}

/*
 * param domain: 用户域名 (Required)
 * param id: 单请求响应限速唯一键 (Optional)
 * param actionType: 生效类型 0:全部类型 1:指定文件类型 (Optional)
 * param fileContent: 文件类型 多个文件类型用英文逗号分割，例如.mp4;.txt (Optional)
 * param timeRange: 时间范围 18:00-23:00 (Optional)
 * param speedLimit: 限速值 单位：KB/s (Optional)
 */
func NewUpdateResponseSpeedLimitRequestWithAllParams(
    domain string,
    id *string,
    actionType *int,
    fileContent *string,
    timeRange *string,
    speedLimit *int,
) *UpdateResponseSpeedLimitRequest {

    return &UpdateResponseSpeedLimitRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/responseSpeedLimit",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        Domain: domain,
        Id: id,
        ActionType: actionType,
        FileContent: fileContent,
        TimeRange: timeRange,
        SpeedLimit: speedLimit,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateResponseSpeedLimitRequestWithoutParam() *UpdateResponseSpeedLimitRequest {

    return &UpdateResponseSpeedLimitRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/domain/{domain}/responseSpeedLimit",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param domain: 用户域名(Required) */
func (r *UpdateResponseSpeedLimitRequest) SetDomain(domain string) {
    r.Domain = domain
}
/* param id: 单请求响应限速唯一键(Optional) */
func (r *UpdateResponseSpeedLimitRequest) SetId(id string) {
    r.Id = &id
}
/* param actionType: 生效类型 0:全部类型 1:指定文件类型(Optional) */
func (r *UpdateResponseSpeedLimitRequest) SetActionType(actionType int) {
    r.ActionType = &actionType
}
/* param fileContent: 文件类型 多个文件类型用英文逗号分割，例如.mp4;.txt(Optional) */
func (r *UpdateResponseSpeedLimitRequest) SetFileContent(fileContent string) {
    r.FileContent = &fileContent
}
/* param timeRange: 时间范围 18:00-23:00(Optional) */
func (r *UpdateResponseSpeedLimitRequest) SetTimeRange(timeRange string) {
    r.TimeRange = &timeRange
}
/* param speedLimit: 限速值 单位：KB/s(Optional) */
func (r *UpdateResponseSpeedLimitRequest) SetSpeedLimit(speedLimit int) {
    r.SpeedLimit = &speedLimit
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateResponseSpeedLimitRequest) GetRegionId() string {
    return ""
}

type UpdateResponseSpeedLimitResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateResponseSpeedLimitResult `json:"result"`
}

type UpdateResponseSpeedLimitResult struct {
}