// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    cdn "github.com/jdcloud-api/jdcloud-sdk-go/services/cdn/apis"
    "encoding/json"
    "errors"
)

type CdnClient struct {
    core.JDCloudClient
}

func NewCdnClient(credential *core.Credential) *CdnClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("cdn.jdcloud-api.com")

    return &CdnClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "cdn",
            Revision:    "0.7.8",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *CdnClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *CdnClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 分地区及运营商查询统计数据 */
func (c *CdnClient) QueryStatisticsDataGroupByArea(request *cdn.QueryStatisticsDataGroupByAreaRequest) (*cdn.QueryStatisticsDataGroupByAreaResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cdn.QueryStatisticsDataGroupByAreaResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 停止加速域名 */
func (c *CdnClient) StopDomain(request *cdn.StopDomainRequest) (*cdn.StopDomainResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cdn.StopDomainResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询TOP IP */
func (c *CdnClient) QueryStatisticsTopIp(request *cdn.QueryStatisticsTopIpRequest) (*cdn.QueryStatisticsTopIpResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cdn.QueryStatisticsTopIpResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 删除加速域名 */
func (c *CdnClient) DeleteDomain(request *cdn.DeleteDomainRequest) (*cdn.DeleteDomainResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cdn.DeleteDomainResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询统计数据 */
func (c *CdnClient) QueryStatisticsData(request *cdn.QueryStatisticsDataRequest) (*cdn.QueryStatisticsDataResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cdn.QueryStatisticsDataResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询TOP Url */
func (c *CdnClient) QueryStatisticsTopUrl(request *cdn.QueryStatisticsTopUrlRequest) (*cdn.QueryStatisticsTopUrlResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cdn.QueryStatisticsTopUrlResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询统计数据并进行汇总加和 */
func (c *CdnClient) QueryStatisticsDataGroupSum(request *cdn.QueryStatisticsDataGroupSumRequest) (*cdn.QueryStatisticsDataGroupSumResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cdn.QueryStatisticsDataGroupSumResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询加速域名接口 */
func (c *CdnClient) GetDomainList(request *cdn.GetDomainListRequest) (*cdn.GetDomainListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cdn.GetDomainListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询加速域名详情 */
func (c *CdnClient) GetDomainDetail(request *cdn.GetDomainDetailRequest) (*cdn.GetDomainDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cdn.GetDomainDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 启动加速域名 */
func (c *CdnClient) StartDomain(request *cdn.StartDomainRequest) (*cdn.StartDomainResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cdn.StartDomainResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

