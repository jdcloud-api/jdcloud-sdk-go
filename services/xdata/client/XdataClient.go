// Copyright 2018-2025 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    . "github.com/jdcloud-api/jdcloud-sdk-go/core"
    . "github.com/jdcloud-api/jdcloud-sdk-go/services/xdata/apis"
    "encoding/json"
    "errors"
)

type XdataClient struct {
    JDCloudClient
}

func NewXdataClient(credential *Credential) *XdataClient {
    if credential == nil {
        return nil
    }

    config := NewConfig()
    config.SetEndpoint("xdata.jdcloud-api.com")

    return &XdataClient{
        JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "xdata",
            Revision:    "0.1.0",
            Logger:      NewDefaultLogger(LOG_INFO),
        }}
}

func (c *XdataClient) SetConfig(config *Config) {
    c.Config = *config
}

func (c *XdataClient) SetLogger(logger Logger) {
    c.Logger = logger
}

/* 删除数据表 */
func (c *XdataClient) DeleteTable(request *DeleteTableRequest) (*DeleteTableResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DeleteTableResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询指定数据库下所有数据表 */
func (c *XdataClient) ListTableInfo(request *ListTableInfoRequest) (*ListTableInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ListTableInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询实例列表 */
func (c *XdataClient) ListDatabaseInfo(request *ListDatabaseInfoRequest) (*ListDatabaseInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ListDatabaseInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 删除数据库 */
func (c *XdataClient) DeleteDatabase(request *DeleteDatabaseRequest) (*DeleteDatabaseResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &DeleteDatabaseResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 创建数据库 */
func (c *XdataClient) CreateDatabase(request *CreateDatabaseRequest) (*CreateDatabaseResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &CreateDatabaseResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询实例列表 */
func (c *XdataClient) ListInstanceInfo(request *ListInstanceInfoRequest) (*ListInstanceInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &ListInstanceInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询数据库详情 */
func (c *XdataClient) GetDatabaseInfo(request *GetDatabaseInfoRequest) (*GetDatabaseInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &GetDatabaseInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 查询数据表信息 */
func (c *XdataClient) GetTableInfo(request *GetTableInfoRequest) (*GetTableInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &GetTableInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

/* 创建数据表 */
func (c *XdataClient) CreateTable(request *CreateTableRequest) (*CreateTableResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &CreateTableResponse{}
    err = json.Unmarshal(resp, jdResp)
    return jdResp, err
}

