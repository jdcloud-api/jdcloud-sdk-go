// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    cloudsign "github.com/jdcloud-api/jdcloud-sdk-go/services/cloudsign/models"
)

type ApplyCertRequest struct {

    core.JDCloudRequest

    /*   */
    CertSpec *cloudsign.CertSpec `json:"certSpec"`
}

/*
 * param certSpec:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewApplyCertRequest(
    certSpec *cloudsign.CertSpec,
) *ApplyCertRequest {

	return &ApplyCertRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/smqCert:applyCert",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        CertSpec: certSpec,
	}
}

/*
 * param certSpec:  (Required)
 */
func NewApplyCertRequestWithAllParams(
    certSpec *cloudsign.CertSpec,
) *ApplyCertRequest {

    return &ApplyCertRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/smqCert:applyCert",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        CertSpec: certSpec,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewApplyCertRequestWithoutParam() *ApplyCertRequest {

    return &ApplyCertRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/smqCert:applyCert",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param certSpec: (Required) */
func (r *ApplyCertRequest) SetCertSpec(certSpec *cloudsign.CertSpec) {
    r.CertSpec = certSpec
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ApplyCertRequest) GetRegionId() string {
    return ""
}

type ApplyCertResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ApplyCertResult `json:"result"`
}

type ApplyCertResult struct {
    Success bool `json:"success"`
    Message string `json:"message"`
    Code string `json:"code"`
    Data cloudsign.CertResp `json:"data"`
}