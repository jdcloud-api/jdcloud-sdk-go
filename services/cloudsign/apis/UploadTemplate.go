// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    cloudsign "github.com/jdcloud-api/jdcloud-sdk-go/services/cloudsign/models"
)

type UploadTemplateRequest struct {

    core.JDCloudRequest

    /*   */
    TemplateSpec *cloudsign.TemplateSpec `json:"templateSpec"`
}

/*
 * param templateSpec:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUploadTemplateRequest(
    templateSpec *cloudsign.TemplateSpec,
) *UploadTemplateRequest {

	return &UploadTemplateRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/template",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        TemplateSpec: templateSpec,
	}
}

/*
 * param templateSpec:  (Required)
 */
func NewUploadTemplateRequestWithAllParams(
    templateSpec *cloudsign.TemplateSpec,
) *UploadTemplateRequest {

    return &UploadTemplateRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/template",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        TemplateSpec: templateSpec,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUploadTemplateRequestWithoutParam() *UploadTemplateRequest {

    return &UploadTemplateRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/template",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param templateSpec: (Required) */
func (r *UploadTemplateRequest) SetTemplateSpec(templateSpec *cloudsign.TemplateSpec) {
    r.TemplateSpec = templateSpec
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UploadTemplateRequest) GetRegionId() string {
    return ""
}

type UploadTemplateResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UploadTemplateResult `json:"result"`
}

type UploadTemplateResult struct {
    TemplateId string `json:"templateId"`
}