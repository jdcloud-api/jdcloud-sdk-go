// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    compile "github.com/lshuining/jdcloud-sdk-go/services/compile/models"
)

type UpdateJobRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* job uuid  */
    Id string `json:"id"`

    /*  (Optional) */
    Data *compile.JobRequest `json:"data"`
}

/*
 * param regionId: Region ID (Required)
 * param id: job uuid (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateJobRequest(
    regionId string,
    id string,
) *UpdateJobRequest {

	return &UpdateJobRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/jobs/{id}",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        Id: id,
	}
}

/*
 * param regionId: Region ID (Required)
 * param id: job uuid (Required)
 * param data:  (Optional)
 */
func NewUpdateJobRequestWithAllParams(
    regionId string,
    id string,
    data *compile.JobRequest,
) *UpdateJobRequest {

    return &UpdateJobRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/jobs/{id}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Id: id,
        Data: data,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateJobRequestWithoutParam() *UpdateJobRequest {

    return &UpdateJobRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/jobs/{id}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *UpdateJobRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param id: job uuid(Required) */
func (r *UpdateJobRequest) SetId(id string) {
    r.Id = id
}

/* param data: (Optional) */
func (r *UpdateJobRequest) SetData(data *compile.JobRequest) {
    r.Data = data
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateJobRequest) GetRegionId() string {
    return r.RegionId
}

type UpdateJobResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateJobResult `json:"result"`
}

type UpdateJobResult struct {
    Id string `json:"id"`
    CodeRepoUrlLabel string `json:"codeRepoUrlLabel"`
    Result bool `json:"result"`
}