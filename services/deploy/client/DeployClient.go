// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    deploy "github.com/jdcloud-api/jdcloud-sdk-go/services/deploy/apis"
    "encoding/json"
    "errors"
)

type DeployClient struct {
    core.JDCloudClient
}

func NewDeployClient(credential *core.Credential) *DeployClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("deploy.jdcloud-api.com")

    return &DeployClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "deploy",
            Revision:    "1.0.0",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *DeployClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *DeployClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 查询一个应用的信息 */
func (c *DeployClient) DescribeApp(request *deploy.DescribeAppRequest) (*deploy.DescribeAppResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &deploy.DescribeAppResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建部署任务 */
func (c *DeployClient) CreateDeploy(request *deploy.CreateDeployRequest) (*deploy.CreateDeployResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &deploy.CreateDeployResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询一个部署任务详情 */
func (c *DeployClient) DescribeDeploy(request *deploy.DescribeDeployRequest) (*deploy.DescribeDeployResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &deploy.DescribeDeployResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量查询应用的信息，此接口支持分页查询，默认每页20条 */
func (c *DeployClient) DescribeApps(request *deploy.DescribeAppsRequest) (*deploy.DescribeAppsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &deploy.DescribeAppsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量查询部署组的信息，此接口支持分页查询，默认每页20条 */
func (c *DeployClient) DescribeGroups(request *deploy.DescribeGroupsRequest) (*deploy.DescribeGroupsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &deploy.DescribeGroupsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询一个部署组的信息 */
func (c *DeployClient) DescribeGroup(request *deploy.DescribeGroupRequest) (*deploy.DescribeGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &deploy.DescribeGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

