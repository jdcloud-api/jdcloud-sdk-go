// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type UpdateViTemplateRequest struct {

    core.JDCloudRequest

    /* 模板ID，路径参数  */
    TemplateId string `json:"templateId"`

    /* 模板名称。长度不超过128个字符。UTF-8编码。
 (Optional) */
    TemplateName *string `json:"templateName"`

    /* 截图间隔 (Optional) */
    ShotInterval *int `json:"shotInterval"`

    /* 间隔类型：time, percent (Optional) */
    ShotIntervalType *string `json:"shotIntervalType"`

    /* 截图格式：png, jpg (Optional) */
    ShotFormat *string `json:"shotFormat"`

    /* 截图帧类型：any, key (Optional) */
    ShotFrameType *string `json:"shotFrameType"`

    /* 截图宽度 (Optional) */
    ShotWidth *int `json:"shotWidth"`

    /* 截图高度 (Optional) */
    ShotHeight *int `json:"shotHeight"`

    /* 截图填充类型：stretch, gauss, black, white (Optional) */
    ShotFillType *string `json:"shotFillType"`

    /* 审查配置，JSON格式 (Optional) */
    InspectItems *string `json:"inspectItems"`
}

/*
 * param templateId: 模板ID，路径参数 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateViTemplateRequest(
    templateId string,
) *UpdateViTemplateRequest {

	return &UpdateViTemplateRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/viTemplates/{templateId}",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        TemplateId: templateId,
	}
}

/*
 * param templateId: 模板ID，路径参数 (Required)
 * param templateName: 模板名称。长度不超过128个字符。UTF-8编码。
 (Optional)
 * param shotInterval: 截图间隔 (Optional)
 * param shotIntervalType: 间隔类型：time, percent (Optional)
 * param shotFormat: 截图格式：png, jpg (Optional)
 * param shotFrameType: 截图帧类型：any, key (Optional)
 * param shotWidth: 截图宽度 (Optional)
 * param shotHeight: 截图高度 (Optional)
 * param shotFillType: 截图填充类型：stretch, gauss, black, white (Optional)
 * param inspectItems: 审查配置，JSON格式 (Optional)
 */
func NewUpdateViTemplateRequestWithAllParams(
    templateId string,
    templateName *string,
    shotInterval *int,
    shotIntervalType *string,
    shotFormat *string,
    shotFrameType *string,
    shotWidth *int,
    shotHeight *int,
    shotFillType *string,
    inspectItems *string,
) *UpdateViTemplateRequest {

    return &UpdateViTemplateRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/viTemplates/{templateId}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        TemplateId: templateId,
        TemplateName: templateName,
        ShotInterval: shotInterval,
        ShotIntervalType: shotIntervalType,
        ShotFormat: shotFormat,
        ShotFrameType: shotFrameType,
        ShotWidth: shotWidth,
        ShotHeight: shotHeight,
        ShotFillType: shotFillType,
        InspectItems: inspectItems,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateViTemplateRequestWithoutParam() *UpdateViTemplateRequest {

    return &UpdateViTemplateRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/viTemplates/{templateId}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param templateId: 模板ID，路径参数(Required) */
func (r *UpdateViTemplateRequest) SetTemplateId(templateId string) {
    r.TemplateId = templateId
}

/* param templateName: 模板名称。长度不超过128个字符。UTF-8编码。
(Optional) */
func (r *UpdateViTemplateRequest) SetTemplateName(templateName string) {
    r.TemplateName = &templateName
}

/* param shotInterval: 截图间隔(Optional) */
func (r *UpdateViTemplateRequest) SetShotInterval(shotInterval int) {
    r.ShotInterval = &shotInterval
}

/* param shotIntervalType: 间隔类型：time, percent(Optional) */
func (r *UpdateViTemplateRequest) SetShotIntervalType(shotIntervalType string) {
    r.ShotIntervalType = &shotIntervalType
}

/* param shotFormat: 截图格式：png, jpg(Optional) */
func (r *UpdateViTemplateRequest) SetShotFormat(shotFormat string) {
    r.ShotFormat = &shotFormat
}

/* param shotFrameType: 截图帧类型：any, key(Optional) */
func (r *UpdateViTemplateRequest) SetShotFrameType(shotFrameType string) {
    r.ShotFrameType = &shotFrameType
}

/* param shotWidth: 截图宽度(Optional) */
func (r *UpdateViTemplateRequest) SetShotWidth(shotWidth int) {
    r.ShotWidth = &shotWidth
}

/* param shotHeight: 截图高度(Optional) */
func (r *UpdateViTemplateRequest) SetShotHeight(shotHeight int) {
    r.ShotHeight = &shotHeight
}

/* param shotFillType: 截图填充类型：stretch, gauss, black, white(Optional) */
func (r *UpdateViTemplateRequest) SetShotFillType(shotFillType string) {
    r.ShotFillType = &shotFillType
}

/* param inspectItems: 审查配置，JSON格式(Optional) */
func (r *UpdateViTemplateRequest) SetInspectItems(inspectItems string) {
    r.InspectItems = &inspectItems
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateViTemplateRequest) GetRegionId() string {
    return ""
}

type UpdateViTemplateResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateViTemplateResult `json:"result"`
}

type UpdateViTemplateResult struct {
    TemplateId string `json:"templateId"`
    TemplateName string `json:"templateName"`
    ShotInterval int `json:"shotInterval"`
    ShotIntervalType string `json:"shotIntervalType"`
    ShotFormat string `json:"shotFormat"`
    ShotFrameType string `json:"shotFrameType"`
    ShotWidth int `json:"shotWidth"`
    ShotHeight int `json:"shotHeight"`
    ShotFillType string `json:"shotFillType"`
    InspectItems string `json:"inspectItems"`
    CreateTime string `json:"createTime"`
    UpdateTime string `json:"updateTime"`
}