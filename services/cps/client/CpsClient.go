// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    cps "github.com/jdcloud-api/jdcloud-sdk-go/services/cps/apis"
    "encoding/json"
    "errors"
)

type CpsClient struct {
    core.JDCloudClient
}

func NewCpsClient(credential *core.Credential) *CpsClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("cps.jdcloud-api.com")

    return &CpsClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "cps",
            Revision:    "1.0.0",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *CpsClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *CpsClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 查询云物理服务器区域列表 */
func (c *CpsClient) DescribeRegiones(request *cps.DescribeRegionesRequest) (*cps.DescribeRegionesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.DescribeRegionesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 重装云物理服务器，只能重装stopped状态的服务器<br>
- 可调用接口（describeOS）获取云物理服务器支持的操作系统列表
- 可调用接口（describeSoftware）获取云物理服务器支持的软件列表，也可以不预装软件
 */
func (c *CpsClient) ReinstallInstance(request *cps.ReinstallInstanceRequest) (*cps.ReinstallInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.ReinstallInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询云物理服务器类型 */
func (c *CpsClient) DescribeDeviceTypes(request *cps.DescribeDeviceTypesRequest) (*cps.DescribeDeviceTypesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.DescribeDeviceTypesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询子网 */
func (c *CpsClient) DescribeSubnet(request *cps.DescribeSubnetRequest) (*cps.DescribeSubnetResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.DescribeSubnetResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询单个云物理服务器raid信息 */
func (c *CpsClient) DescribeInstanceRaid(request *cps.DescribeInstanceRaidRequest) (*cps.DescribeInstanceRaidResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.DescribeInstanceRaidResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询物理服务器可预装的软件列表<br/>
可调用接口（describeOS）获取云物理服务器支持的操作系统列表<br/>
 */
func (c *CpsClient) DescribeSoftware(request *cps.DescribeSoftwareRequest) (*cps.DescribeSoftwareResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.DescribeSoftwareResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 批量查询云物理服务器详细信息<br/>
支持分页查询，默认每页10条<br/>
 */
func (c *CpsClient) DescribeInstances(request *cps.DescribeInstancesRequest) (*cps.DescribeInstancesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.DescribeInstancesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询单个云物理服务器监控信息 */
func (c *CpsClient) DescribeInstanceStatus(request *cps.DescribeInstanceStatusRequest) (*cps.DescribeInstanceStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.DescribeInstanceStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 修改云物理服务器部分信息，包括名称、描述 */
func (c *CpsClient) ModifyInstance(request *cps.ModifyInstanceRequest) (*cps.ModifyInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.ModifyInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询云物理服务器支持的raid类型 */
func (c *CpsClient) DescribeDeviceRaids(request *cps.DescribeDeviceRaidsRequest) (*cps.DescribeDeviceRaidsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.DescribeDeviceRaidsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询云物理服务器名称 */
func (c *CpsClient) DescribeInstanceName(request *cps.DescribeInstanceNameRequest) (*cps.DescribeInstanceNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.DescribeInstanceNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 升级云物理服务器外网带宽，只能操作running或者stopped状态的服务器<br>
- 不支持未启用外网的服务器升级带宽
- 外网带宽不支持降级
 */
func (c *CpsClient) ModifyBandwidth(request *cps.ModifyBandwidthRequest) (*cps.ModifyBandwidthResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.ModifyBandwidthResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询单台云物理服务器详细信息 */
func (c *CpsClient) DescribeInstance(request *cps.DescribeInstanceRequest) (*cps.DescribeInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.DescribeInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 启动单个云物理服务器，只能启动stopped状态的服务器 */
func (c *CpsClient) StartInstance(request *cps.StartInstanceRequest) (*cps.StartInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.StartInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 重启单个云物理服务器，只能重启running状态的服务器 */
func (c *CpsClient) RestartInstance(request *cps.RestartInstanceRequest) (*cps.RestartInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.RestartInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 创建一台或多台指定配置的云物理服务器
- 地域与可用区
  - 调用接口（describeRegiones）获取云物理服务器支持的地域与可用区
- 服务器规格类型
  - 调用接口（describeDeviceTypes）获取物理服务器类型列表
  - 不能使用已下线、或已售馨的规格ID
- 操作系统和预装软件
  - 可调用接口（describeOS）获取云物理服务器支持的操作系统列表
  - 可调用接口（describeSoftware）获取云物理服务器支持的软件列表，也可以不预装软件
- 存储
  - 数据盘多种Raid可选，可调用接口（describeDeviceRaids）获取服务器支持的Raid列表
- 网络
  - 网络类型目前只支持basic
  - 线路目前只支持bgp
  - 支持不启用外网，如果启用外网，带宽范围[1,200] 单位Mbps
- 其他
  - 购买时长，可按年或月购买，最少购买时长1个月，最长36个月（3年）
  - 密码设置参考公共参数规范
 */
func (c *CpsClient) CreateInstances(request *cps.CreateInstancesRequest) (*cps.CreateInstancesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.CreateInstancesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询云物理服务器支持的操作系统 */
func (c *CpsClient) DescribeOS(request *cps.DescribeOSRequest) (*cps.DescribeOSResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.DescribeOSResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 停止单个云物理服务器，只能停止running状态的服务器 */
func (c *CpsClient) StopInstance(request *cps.StopInstanceRequest) (*cps.StopInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &cps.StopInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

