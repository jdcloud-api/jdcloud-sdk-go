// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    logs "github.com/jdcloud-api/jdcloud-sdk-go/services/logs/models"
)

type DescribeLogsetsRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* 当前所在页，默认为1 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 页面大小，默认为20；取值范围[1, 200] (Optional) */
    PageSize *int `json:"pageSize"`

    /* 日志集名称. 已废弃，需要通过filter传递 (Optional) */
    Name *string `json:"name"`

    /* 过滤条件，key，Values。 支持的key:  name (Optional) */
    Filters []logs.Filter `json:"filters"`

    /* 标签过滤条件，key，Values (Optional) */
    Tags []logs.TagFilter `json:"tags"`

    /* 资源组过滤条件 (Optional) */
    ResourceGroupIds []string `json:"resourceGroupIds"`
}

/*
 * param regionId: 地域 Id (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeLogsetsRequest(
    regionId string,
) *DescribeLogsetsRequest {

	return &DescribeLogsetsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/logsets",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param pageNumber: 当前所在页，默认为1 (Optional)
 * param pageSize: 页面大小，默认为20；取值范围[1, 200] (Optional)
 * param name: 日志集名称. 已废弃，需要通过filter传递 (Optional)
 * param filters: 过滤条件，key，Values。 支持的key:  name (Optional)
 * param tags: 标签过滤条件，key，Values (Optional)
 * param resourceGroupIds: 资源组过滤条件 (Optional)
 */
func NewDescribeLogsetsRequestWithAllParams(
    regionId string,
    pageNumber *int,
    pageSize *int,
    name *string,
    filters []logs.Filter,
    tags []logs.TagFilter,
    resourceGroupIds []string,
) *DescribeLogsetsRequest {

    return &DescribeLogsetsRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/logsets",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        PageNumber: pageNumber,
        PageSize: pageSize,
        Name: name,
        Filters: filters,
        Tags: tags,
        ResourceGroupIds: resourceGroupIds,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeLogsetsRequestWithoutParam() *DescribeLogsetsRequest {

    return &DescribeLogsetsRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/logsets",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *DescribeLogsetsRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param pageNumber: 当前所在页，默认为1(Optional) */
func (r *DescribeLogsetsRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}
/* param pageSize: 页面大小，默认为20；取值范围[1, 200](Optional) */
func (r *DescribeLogsetsRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}
/* param name: 日志集名称. 已废弃，需要通过filter传递(Optional) */
func (r *DescribeLogsetsRequest) SetName(name string) {
    r.Name = &name
}
/* param filters: 过滤条件，key，Values。 支持的key:  name(Optional) */
func (r *DescribeLogsetsRequest) SetFilters(filters []logs.Filter) {
    r.Filters = filters
}
/* param tags: 标签过滤条件，key，Values(Optional) */
func (r *DescribeLogsetsRequest) SetTags(tags []logs.TagFilter) {
    r.Tags = tags
}
/* param resourceGroupIds: 资源组过滤条件(Optional) */
func (r *DescribeLogsetsRequest) SetResourceGroupIds(resourceGroupIds []string) {
    r.ResourceGroupIds = resourceGroupIds
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeLogsetsRequest) GetRegionId() string {
    return r.RegionId
}

type DescribeLogsetsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeLogsetsResult `json:"result"`
}

type DescribeLogsetsResult struct {
    Data []logs.LogsetEnd `json:"data"`
    NumberPages int64 `json:"numberPages"`
    NumberRecords int64 `json:"numberRecords"`
    PageNumber int64 `json:"pageNumber"`
    PageSize int64 `json:"pageSize"`
}