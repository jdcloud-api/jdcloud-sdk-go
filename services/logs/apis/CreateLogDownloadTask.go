// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type CreateLogDownloadTaskRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* 日志主题 UID  */
    LogtopicUID string `json:"logtopicUID"`

    /* Name 任务名 (Optional) */
    Name *string `json:"name"`

    /* Keyword 查询关键字 (Optional) */
    Keyword *string `json:"keyword"`

    /* Compress 压缩方式：0：不压缩，1：gzip，2：snappy (Optional) */
    Compress *int `json:"compress"`

    /* Format 文件格式：0: CSV, 1:JSON (Optional) */
    Format *int `json:"format"`

    /* 日志条数 (Optional) */
    LogCount *int `json:"logCount"`

    /* Quote quote：0：双引号；1：单引号 (Optional) */
    Quote *int `json:"quote"`

    /* FileSort 文件排序，0：正序，1：倒序 (Optional) */
    FileSort *int `json:"fileSort"`

    /* StartTimestamp 下载内容开始时间 (Optional) */
    StartTimestamp *int `json:"startTimestamp"`

    /* EndTimestamp 下载内容截止时间 (Optional) */
    EndTimestamp *int `json:"endTimestamp"`
}

/*
 * param regionId: 地域 Id (Required)
 * param logtopicUID: 日志主题 UID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateLogDownloadTaskRequest(
    regionId string,
    logtopicUID string,
) *CreateLogDownloadTaskRequest {

	return &CreateLogDownloadTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/logtopics/{logtopicUID}/downloadtask",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        LogtopicUID: logtopicUID,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param logtopicUID: 日志主题 UID (Required)
 * param name: Name 任务名 (Optional)
 * param keyword: Keyword 查询关键字 (Optional)
 * param compress: Compress 压缩方式：0：不压缩，1：gzip，2：snappy (Optional)
 * param format: Format 文件格式：0: CSV, 1:JSON (Optional)
 * param logCount: 日志条数 (Optional)
 * param quote: Quote quote：0：双引号；1：单引号 (Optional)
 * param fileSort: FileSort 文件排序，0：正序，1：倒序 (Optional)
 * param startTimestamp: StartTimestamp 下载内容开始时间 (Optional)
 * param endTimestamp: EndTimestamp 下载内容截止时间 (Optional)
 */
func NewCreateLogDownloadTaskRequestWithAllParams(
    regionId string,
    logtopicUID string,
    name *string,
    keyword *string,
    compress *int,
    format *int,
    logCount *int,
    quote *int,
    fileSort *int,
    startTimestamp *int,
    endTimestamp *int,
) *CreateLogDownloadTaskRequest {

    return &CreateLogDownloadTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/logtopics/{logtopicUID}/downloadtask",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        LogtopicUID: logtopicUID,
        Name: name,
        Keyword: keyword,
        Compress: compress,
        Format: format,
        LogCount: logCount,
        Quote: quote,
        FileSort: fileSort,
        StartTimestamp: startTimestamp,
        EndTimestamp: endTimestamp,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateLogDownloadTaskRequestWithoutParam() *CreateLogDownloadTaskRequest {

    return &CreateLogDownloadTaskRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/logtopics/{logtopicUID}/downloadtask",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *CreateLogDownloadTaskRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param logtopicUID: 日志主题 UID(Required) */
func (r *CreateLogDownloadTaskRequest) SetLogtopicUID(logtopicUID string) {
    r.LogtopicUID = logtopicUID
}
/* param name: Name 任务名(Optional) */
func (r *CreateLogDownloadTaskRequest) SetName(name string) {
    r.Name = &name
}
/* param keyword: Keyword 查询关键字(Optional) */
func (r *CreateLogDownloadTaskRequest) SetKeyword(keyword string) {
    r.Keyword = &keyword
}
/* param compress: Compress 压缩方式：0：不压缩，1：gzip，2：snappy(Optional) */
func (r *CreateLogDownloadTaskRequest) SetCompress(compress int) {
    r.Compress = &compress
}
/* param format: Format 文件格式：0: CSV, 1:JSON(Optional) */
func (r *CreateLogDownloadTaskRequest) SetFormat(format int) {
    r.Format = &format
}
/* param logCount: 日志条数(Optional) */
func (r *CreateLogDownloadTaskRequest) SetLogCount(logCount int) {
    r.LogCount = &logCount
}
/* param quote: Quote quote：0：双引号；1：单引号(Optional) */
func (r *CreateLogDownloadTaskRequest) SetQuote(quote int) {
    r.Quote = &quote
}
/* param fileSort: FileSort 文件排序，0：正序，1：倒序(Optional) */
func (r *CreateLogDownloadTaskRequest) SetFileSort(fileSort int) {
    r.FileSort = &fileSort
}
/* param startTimestamp: StartTimestamp 下载内容开始时间(Optional) */
func (r *CreateLogDownloadTaskRequest) SetStartTimestamp(startTimestamp int) {
    r.StartTimestamp = &startTimestamp
}
/* param endTimestamp: EndTimestamp 下载内容截止时间(Optional) */
func (r *CreateLogDownloadTaskRequest) SetEndTimestamp(endTimestamp int) {
    r.EndTimestamp = &endTimestamp
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateLogDownloadTaskRequest) GetRegionId() string {
    return r.RegionId
}

type CreateLogDownloadTaskResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateLogDownloadTaskResult `json:"result"`
}

type CreateLogDownloadTaskResult struct {
    DownloadTaskUID string `json:"downloadTaskUID"`
}