// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    logs "github.com/jdcloud-api/jdcloud-sdk-go/services/logs/models"
)

type LogDetailRequest struct {

    core.JDCloudRequest

    /* 租户  */
    Pin string `json:"pin"`

    /* UUID，同一批次保持一致，必填 (Optional) */
    SearchId *string `json:"searchId"`

    /* 产品名，必填  */
    Product string `json:"product"`

    /* 实例 (Optional) */
    Instance *string `json:"instance"`

    /* 日志类型 (Optional) */
    LogType *string `json:"logType"`

    /* ip (Optional) */
    Ip []string `json:"ip"`

    /* pod name (Optional) */
    PodName []string `json:"podName"`

    /* 命名空间 (Optional) */
    Namespace *string `json:"namespace"`

    /* 集群 (Optional) */
    Cluster *string `json:"cluster"`

    /* 容器名 (Optional) */
    ContainerName *string `json:"containerName"`

    /* 文件路径 (Optional) */
    FilePath []string `json:"filePath"`

    /* 开始时间纳秒数字，默认一小时前 (Optional) */
    StartTime *int64 `json:"startTime"`

    /* 结束时间纳秒数字，默认现在 (Optional) */
    EndTime *int64 `json:"endTime"`

    /* 正序：FORWARD、倒序：BACKWARD，默认BACKWARD (Optional) */
    Direction *string `json:"direction"`

    /* 查询数量数字，默认100 (Optional) */
    Limit *int `json:"limit"`

    /* 步长时间（单位：秒），10、0.5 (Optional) */
    Step *float32 `json:"step"`

    /* label过滤 (Optional) */
    StreamFilter []logs.StreamFilter `json:"streamFilter"`

    /* 行过滤 (Optional) */
    LineFilter *logs.LineFilter `json:"lineFilter"`

    /* 格式化过滤条件 (Optional) */
    FmtFilter *logs.FormatFilter `json:"fmtFilter"`
}

/*
 * param pin: 租户 (Required)
 * param product: 产品名，必填 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewLogDetailRequest(
    pin string,
    product string,
) *LogDetailRequest {

	return &LogDetailRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/logDetail",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Pin: pin,
        Product: product,
	}
}

/*
 * param pin: 租户 (Required)
 * param searchId: UUID，同一批次保持一致，必填 (Optional)
 * param product: 产品名，必填 (Required)
 * param instance: 实例 (Optional)
 * param logType: 日志类型 (Optional)
 * param ip: ip (Optional)
 * param podName: pod name (Optional)
 * param namespace: 命名空间 (Optional)
 * param cluster: 集群 (Optional)
 * param containerName: 容器名 (Optional)
 * param filePath: 文件路径 (Optional)
 * param startTime: 开始时间纳秒数字，默认一小时前 (Optional)
 * param endTime: 结束时间纳秒数字，默认现在 (Optional)
 * param direction: 正序：FORWARD、倒序：BACKWARD，默认BACKWARD (Optional)
 * param limit: 查询数量数字，默认100 (Optional)
 * param step: 步长时间（单位：秒），10、0.5 (Optional)
 * param streamFilter: label过滤 (Optional)
 * param lineFilter: 行过滤 (Optional)
 * param fmtFilter: 格式化过滤条件 (Optional)
 */
func NewLogDetailRequestWithAllParams(
    pin string,
    searchId *string,
    product string,
    instance *string,
    logType *string,
    ip []string,
    podName []string,
    namespace *string,
    cluster *string,
    containerName *string,
    filePath []string,
    startTime *int64,
    endTime *int64,
    direction *string,
    limit *int,
    step *float32,
    streamFilter []logs.StreamFilter,
    lineFilter *logs.LineFilter,
    fmtFilter *logs.FormatFilter,
) *LogDetailRequest {

    return &LogDetailRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/logDetail",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Pin: pin,
        SearchId: searchId,
        Product: product,
        Instance: instance,
        LogType: logType,
        Ip: ip,
        PodName: podName,
        Namespace: namespace,
        Cluster: cluster,
        ContainerName: containerName,
        FilePath: filePath,
        StartTime: startTime,
        EndTime: endTime,
        Direction: direction,
        Limit: limit,
        Step: step,
        StreamFilter: streamFilter,
        LineFilter: lineFilter,
        FmtFilter: fmtFilter,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewLogDetailRequestWithoutParam() *LogDetailRequest {

    return &LogDetailRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/logDetail",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param pin: 租户(Required) */
func (r *LogDetailRequest) SetPin(pin string) {
    r.Pin = pin
}
/* param searchId: UUID，同一批次保持一致，必填(Optional) */
func (r *LogDetailRequest) SetSearchId(searchId string) {
    r.SearchId = &searchId
}
/* param product: 产品名，必填(Required) */
func (r *LogDetailRequest) SetProduct(product string) {
    r.Product = product
}
/* param instance: 实例(Optional) */
func (r *LogDetailRequest) SetInstance(instance string) {
    r.Instance = &instance
}
/* param logType: 日志类型(Optional) */
func (r *LogDetailRequest) SetLogType(logType string) {
    r.LogType = &logType
}
/* param ip: ip(Optional) */
func (r *LogDetailRequest) SetIp(ip []string) {
    r.Ip = ip
}
/* param podName: pod name(Optional) */
func (r *LogDetailRequest) SetPodName(podName []string) {
    r.PodName = podName
}
/* param namespace: 命名空间(Optional) */
func (r *LogDetailRequest) SetNamespace(namespace string) {
    r.Namespace = &namespace
}
/* param cluster: 集群(Optional) */
func (r *LogDetailRequest) SetCluster(cluster string) {
    r.Cluster = &cluster
}
/* param containerName: 容器名(Optional) */
func (r *LogDetailRequest) SetContainerName(containerName string) {
    r.ContainerName = &containerName
}
/* param filePath: 文件路径(Optional) */
func (r *LogDetailRequest) SetFilePath(filePath []string) {
    r.FilePath = filePath
}
/* param startTime: 开始时间纳秒数字，默认一小时前(Optional) */
func (r *LogDetailRequest) SetStartTime(startTime int64) {
    r.StartTime = &startTime
}
/* param endTime: 结束时间纳秒数字，默认现在(Optional) */
func (r *LogDetailRequest) SetEndTime(endTime int64) {
    r.EndTime = &endTime
}
/* param direction: 正序：FORWARD、倒序：BACKWARD，默认BACKWARD(Optional) */
func (r *LogDetailRequest) SetDirection(direction string) {
    r.Direction = &direction
}
/* param limit: 查询数量数字，默认100(Optional) */
func (r *LogDetailRequest) SetLimit(limit int) {
    r.Limit = &limit
}
/* param step: 步长时间（单位：秒），10、0.5(Optional) */
func (r *LogDetailRequest) SetStep(step float32) {
    r.Step = &step
}
/* param streamFilter: label过滤(Optional) */
func (r *LogDetailRequest) SetStreamFilter(streamFilter []logs.StreamFilter) {
    r.StreamFilter = streamFilter
}
/* param lineFilter: 行过滤(Optional) */
func (r *LogDetailRequest) SetLineFilter(lineFilter *logs.LineFilter) {
    r.LineFilter = lineFilter
}
/* param fmtFilter: 格式化过滤条件(Optional) */
func (r *LogDetailRequest) SetFmtFilter(fmtFilter *logs.FormatFilter) {
    r.FmtFilter = fmtFilter
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r LogDetailRequest) GetRegionId() string {
    return ""
}

type LogDetailResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result LogDetailResult `json:"result"`
}

type LogDetailResult struct {
    Status string `json:"status"`
    Completed bool `json:"completed"`
    Data logs.LokiResponseData `json:"data"`
}