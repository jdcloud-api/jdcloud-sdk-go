// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    logs "github.com/jdcloud-api/jdcloud-sdk-go/services/logs/models"
)

type UpdateIndexOptionRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* 日志主题 UID  */
    LogtopicUID string `json:"logtopicUID"`

    /* 是否开启日志聚类，0-禁用，1-启用  */
    LogReduce bool `json:"logReduce"`

    /* 是否开启全文检索，0-禁用，1-启用  */
    FulltextIndex bool `json:"fulltextIndex"`

    /* 是否大小写敏感  */
    CaseSensitive bool `json:"caseSensitive"`

    /* 是否开启中文分词  */
    Chn bool `json:"chn"`

    /* 分词符 (Optional) */
    Token []string `json:"token"`

    /* 字段索引配置 (Optional) */
    FieldIndexOptions []logs.FieldIndexOption `json:"fieldIndexOptions"`

    /* 统计分析字段最大长度  */
    MaxTextLen int `json:"maxTextLen"`
}

/*
 * param regionId: 地域 Id (Required)
 * param logtopicUID: 日志主题 UID (Required)
 * param logReduce: 是否开启日志聚类，0-禁用，1-启用 (Required)
 * param fulltextIndex: 是否开启全文检索，0-禁用，1-启用 (Required)
 * param caseSensitive: 是否大小写敏感 (Required)
 * param chn: 是否开启中文分词 (Required)
 * param maxTextLen: 统计分析字段最大长度 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateIndexOptionRequest(
    regionId string,
    logtopicUID string,
    logReduce bool,
    fulltextIndex bool,
    caseSensitive bool,
    chn bool,
    maxTextLen int,
) *UpdateIndexOptionRequest {

	return &UpdateIndexOptionRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/logtopics/{logtopicUID}/indexoptions",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        LogtopicUID: logtopicUID,
        LogReduce: logReduce,
        FulltextIndex: fulltextIndex,
        CaseSensitive: caseSensitive,
        Chn: chn,
        MaxTextLen: maxTextLen,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param logtopicUID: 日志主题 UID (Required)
 * param logReduce: 是否开启日志聚类，0-禁用，1-启用 (Required)
 * param fulltextIndex: 是否开启全文检索，0-禁用，1-启用 (Required)
 * param caseSensitive: 是否大小写敏感 (Required)
 * param chn: 是否开启中文分词 (Required)
 * param token: 分词符 (Optional)
 * param fieldIndexOptions: 字段索引配置 (Optional)
 * param maxTextLen: 统计分析字段最大长度 (Required)
 */
func NewUpdateIndexOptionRequestWithAllParams(
    regionId string,
    logtopicUID string,
    logReduce bool,
    fulltextIndex bool,
    caseSensitive bool,
    chn bool,
    token []string,
    fieldIndexOptions []logs.FieldIndexOption,
    maxTextLen int,
) *UpdateIndexOptionRequest {

    return &UpdateIndexOptionRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/logtopics/{logtopicUID}/indexoptions",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        LogtopicUID: logtopicUID,
        LogReduce: logReduce,
        FulltextIndex: fulltextIndex,
        CaseSensitive: caseSensitive,
        Chn: chn,
        Token: token,
        FieldIndexOptions: fieldIndexOptions,
        MaxTextLen: maxTextLen,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateIndexOptionRequestWithoutParam() *UpdateIndexOptionRequest {

    return &UpdateIndexOptionRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/logtopics/{logtopicUID}/indexoptions",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *UpdateIndexOptionRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param logtopicUID: 日志主题 UID(Required) */
func (r *UpdateIndexOptionRequest) SetLogtopicUID(logtopicUID string) {
    r.LogtopicUID = logtopicUID
}
/* param logReduce: 是否开启日志聚类，0-禁用，1-启用(Required) */
func (r *UpdateIndexOptionRequest) SetLogReduce(logReduce bool) {
    r.LogReduce = logReduce
}
/* param fulltextIndex: 是否开启全文检索，0-禁用，1-启用(Required) */
func (r *UpdateIndexOptionRequest) SetFulltextIndex(fulltextIndex bool) {
    r.FulltextIndex = fulltextIndex
}
/* param caseSensitive: 是否大小写敏感(Required) */
func (r *UpdateIndexOptionRequest) SetCaseSensitive(caseSensitive bool) {
    r.CaseSensitive = caseSensitive
}
/* param chn: 是否开启中文分词(Required) */
func (r *UpdateIndexOptionRequest) SetChn(chn bool) {
    r.Chn = chn
}
/* param token: 分词符(Optional) */
func (r *UpdateIndexOptionRequest) SetToken(token []string) {
    r.Token = token
}
/* param fieldIndexOptions: 字段索引配置(Optional) */
func (r *UpdateIndexOptionRequest) SetFieldIndexOptions(fieldIndexOptions []logs.FieldIndexOption) {
    r.FieldIndexOptions = fieldIndexOptions
}
/* param maxTextLen: 统计分析字段最大长度(Required) */
func (r *UpdateIndexOptionRequest) SetMaxTextLen(maxTextLen int) {
    r.MaxTextLen = maxTextLen
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateIndexOptionRequest) GetRegionId() string {
    return r.RegionId
}

type UpdateIndexOptionResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateIndexOptionResult `json:"result"`
}

type UpdateIndexOptionResult struct {
}