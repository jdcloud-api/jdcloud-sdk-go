// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type LogSearchIdRequest struct {

    core.JDCloudRequest

    /* 租户信息 (Optional) */
    Pin *string `json:"pin"`

    /* 搜索应用 (Optional) */
    Apps []string `json:"apps"`

    /* 搜索关键字 (Optional) */
    Keyword *string `json:"keyword"`

    /* 排除关键字 (Optional) */
    Exclude *string `json:"exclude"`

    /* 查询机器 (Optional) */
    Hosts []string `json:"hosts"`

    /* 日志路径 (Optional) */
    FilePaths []string `json:"filePaths"`

    /* 日志等级，枚举类型取值为：DEBUG,INFO,WARN,ERROR,FATAL,ALL,UNKNOWN (Optional) */
    LogLevel *string `json:"logLevel"`

    /* 线程 (Optional) */
    Thread *string `json:"thread"`

    /* 类名 (Optional) */
    Clazz *string `json:"clazz"`

    /* 限制条数 (Optional) */
    Limit *int `json:"limit"`

    /* 开始时间 (Optional) */
    StartTime *string `json:"startTime"`

    /* 结束时间 (Optional) */
    EndTime *string `json:"endTime"`

    /* 查询时间单位，枚举类型取值为：NANOSECONDS,MICROSECONDS,SECONDS,MINUTES,DAYS (Optional) */
    TimeUnit *string `json:"timeUnit"`

    /* 搜索类型：regular、exact (Optional) */
    SearchType *string `json:"searchType"`

    /* 应用名 (Optional) */
    InstanceName *string `json:"instanceName"`

    /* 产品名 (Optional) */
    ProductName *string `json:"productName"`

    /* 日志类型名称 (Optional) */
    LogTypeName *string `json:"logTypeName"`

    /* chunks (Optional) */
    Chunks []string `json:"chunks"`

    /* 匹配方向 (Optional) */
    Direction *string `json:"direction"`

    /* 查询id (Optional) */
    SearchId *string `json:"searchId"`

    /* 检索index (Optional) */
    SearchIndex *int `json:"searchIndex"`

    /* searchEndTime (Optional) */
    SearchEndTime *int64 `json:"searchEndTime"`

    /* lifecycle (Optional) */
    Lifecycle *int `json:"lifecycle"`

    /* 查询sql (Optional) */
    QuerySql *string `json:"querySql"`

    /* 索引参数列表，map类型，key必须是string类型，value可自定义 (Optional) */
    IndexParams *interface{} `json:"indexParams"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewLogSearchIdRequest(
) *LogSearchIdRequest {

	return &LogSearchIdRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/logSearchId",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param pin: 租户信息 (Optional)
 * param apps: 搜索应用 (Optional)
 * param keyword: 搜索关键字 (Optional)
 * param exclude: 排除关键字 (Optional)
 * param hosts: 查询机器 (Optional)
 * param filePaths: 日志路径 (Optional)
 * param logLevel: 日志等级，枚举类型取值为：DEBUG,INFO,WARN,ERROR,FATAL,ALL,UNKNOWN (Optional)
 * param thread: 线程 (Optional)
 * param clazz: 类名 (Optional)
 * param limit: 限制条数 (Optional)
 * param startTime: 开始时间 (Optional)
 * param endTime: 结束时间 (Optional)
 * param timeUnit: 查询时间单位，枚举类型取值为：NANOSECONDS,MICROSECONDS,SECONDS,MINUTES,DAYS (Optional)
 * param searchType: 搜索类型：regular、exact (Optional)
 * param instanceName: 应用名 (Optional)
 * param productName: 产品名 (Optional)
 * param logTypeName: 日志类型名称 (Optional)
 * param chunks: chunks (Optional)
 * param direction: 匹配方向 (Optional)
 * param searchId: 查询id (Optional)
 * param searchIndex: 检索index (Optional)
 * param searchEndTime: searchEndTime (Optional)
 * param lifecycle: lifecycle (Optional)
 * param querySql: 查询sql (Optional)
 * param indexParams: 索引参数列表，map类型，key必须是string类型，value可自定义 (Optional)
 */
func NewLogSearchIdRequestWithAllParams(
    pin *string,
    apps []string,
    keyword *string,
    exclude *string,
    hosts []string,
    filePaths []string,
    logLevel *string,
    thread *string,
    clazz *string,
    limit *int,
    startTime *string,
    endTime *string,
    timeUnit *string,
    searchType *string,
    instanceName *string,
    productName *string,
    logTypeName *string,
    chunks []string,
    direction *string,
    searchId *string,
    searchIndex *int,
    searchEndTime *int64,
    lifecycle *int,
    querySql *string,
    indexParams *interface{},
) *LogSearchIdRequest {

    return &LogSearchIdRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/logSearchId",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Pin: pin,
        Apps: apps,
        Keyword: keyword,
        Exclude: exclude,
        Hosts: hosts,
        FilePaths: filePaths,
        LogLevel: logLevel,
        Thread: thread,
        Clazz: clazz,
        Limit: limit,
        StartTime: startTime,
        EndTime: endTime,
        TimeUnit: timeUnit,
        SearchType: searchType,
        InstanceName: instanceName,
        ProductName: productName,
        LogTypeName: logTypeName,
        Chunks: chunks,
        Direction: direction,
        SearchId: searchId,
        SearchIndex: searchIndex,
        SearchEndTime: searchEndTime,
        Lifecycle: lifecycle,
        QuerySql: querySql,
        IndexParams: indexParams,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewLogSearchIdRequestWithoutParam() *LogSearchIdRequest {

    return &LogSearchIdRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/logSearchId",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param pin: 租户信息(Optional) */
func (r *LogSearchIdRequest) SetPin(pin string) {
    r.Pin = &pin
}
/* param apps: 搜索应用(Optional) */
func (r *LogSearchIdRequest) SetApps(apps []string) {
    r.Apps = apps
}
/* param keyword: 搜索关键字(Optional) */
func (r *LogSearchIdRequest) SetKeyword(keyword string) {
    r.Keyword = &keyword
}
/* param exclude: 排除关键字(Optional) */
func (r *LogSearchIdRequest) SetExclude(exclude string) {
    r.Exclude = &exclude
}
/* param hosts: 查询机器(Optional) */
func (r *LogSearchIdRequest) SetHosts(hosts []string) {
    r.Hosts = hosts
}
/* param filePaths: 日志路径(Optional) */
func (r *LogSearchIdRequest) SetFilePaths(filePaths []string) {
    r.FilePaths = filePaths
}
/* param logLevel: 日志等级，枚举类型取值为：DEBUG,INFO,WARN,ERROR,FATAL,ALL,UNKNOWN(Optional) */
func (r *LogSearchIdRequest) SetLogLevel(logLevel string) {
    r.LogLevel = &logLevel
}
/* param thread: 线程(Optional) */
func (r *LogSearchIdRequest) SetThread(thread string) {
    r.Thread = &thread
}
/* param clazz: 类名(Optional) */
func (r *LogSearchIdRequest) SetClazz(clazz string) {
    r.Clazz = &clazz
}
/* param limit: 限制条数(Optional) */
func (r *LogSearchIdRequest) SetLimit(limit int) {
    r.Limit = &limit
}
/* param startTime: 开始时间(Optional) */
func (r *LogSearchIdRequest) SetStartTime(startTime string) {
    r.StartTime = &startTime
}
/* param endTime: 结束时间(Optional) */
func (r *LogSearchIdRequest) SetEndTime(endTime string) {
    r.EndTime = &endTime
}
/* param timeUnit: 查询时间单位，枚举类型取值为：NANOSECONDS,MICROSECONDS,SECONDS,MINUTES,DAYS(Optional) */
func (r *LogSearchIdRequest) SetTimeUnit(timeUnit string) {
    r.TimeUnit = &timeUnit
}
/* param searchType: 搜索类型：regular、exact(Optional) */
func (r *LogSearchIdRequest) SetSearchType(searchType string) {
    r.SearchType = &searchType
}
/* param instanceName: 应用名(Optional) */
func (r *LogSearchIdRequest) SetInstanceName(instanceName string) {
    r.InstanceName = &instanceName
}
/* param productName: 产品名(Optional) */
func (r *LogSearchIdRequest) SetProductName(productName string) {
    r.ProductName = &productName
}
/* param logTypeName: 日志类型名称(Optional) */
func (r *LogSearchIdRequest) SetLogTypeName(logTypeName string) {
    r.LogTypeName = &logTypeName
}
/* param chunks: chunks(Optional) */
func (r *LogSearchIdRequest) SetChunks(chunks []string) {
    r.Chunks = chunks
}
/* param direction: 匹配方向(Optional) */
func (r *LogSearchIdRequest) SetDirection(direction string) {
    r.Direction = &direction
}
/* param searchId: 查询id(Optional) */
func (r *LogSearchIdRequest) SetSearchId(searchId string) {
    r.SearchId = &searchId
}
/* param searchIndex: 检索index(Optional) */
func (r *LogSearchIdRequest) SetSearchIndex(searchIndex int) {
    r.SearchIndex = &searchIndex
}
/* param searchEndTime: searchEndTime(Optional) */
func (r *LogSearchIdRequest) SetSearchEndTime(searchEndTime int64) {
    r.SearchEndTime = &searchEndTime
}
/* param lifecycle: lifecycle(Optional) */
func (r *LogSearchIdRequest) SetLifecycle(lifecycle int) {
    r.Lifecycle = &lifecycle
}
/* param querySql: 查询sql(Optional) */
func (r *LogSearchIdRequest) SetQuerySql(querySql string) {
    r.QuerySql = &querySql
}
/* param indexParams: 索引参数列表，map类型，key必须是string类型，value可自定义(Optional) */
func (r *LogSearchIdRequest) SetIndexParams(indexParams interface{}) {
    r.IndexParams = &indexParams
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r LogSearchIdRequest) GetRegionId() string {
    return ""
}

type LogSearchIdResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result LogSearchIdResult `json:"result"`
}

type LogSearchIdResult struct {
    Status int `json:"status"`
    Desc string `json:"desc"`
    SearchId string `json:"searchId"`
}