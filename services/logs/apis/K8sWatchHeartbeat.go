// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type K8sWatchHeartbeatRequest struct {

    core.JDCloudRequest

    /* 集群 (Optional) */
    Cluster *string `json:"cluster"`

    /* 设备id (Optional) */
    DevId *string `json:"devId"`

    /* 公有云集群标识 (Optional) */
    Cloud *bool `json:"cloud"`

    /* node数量 (Optional) */
    NodeCount *int `json:"nodeCount"`

    /* 容器数量 (Optional) */
    ContainerCount *int `json:"containerCount"`

    /* 最新容器变化时间 (Optional) */
    LatestPodChangeTime *int64 `json:"latestPodChangeTime"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewK8sWatchHeartbeatRequest(
) *K8sWatchHeartbeatRequest {

	return &K8sWatchHeartbeatRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/k8sWatchHeartbeat",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param cluster: 集群 (Optional)
 * param devId: 设备id (Optional)
 * param cloud: 公有云集群标识 (Optional)
 * param nodeCount: node数量 (Optional)
 * param containerCount: 容器数量 (Optional)
 * param latestPodChangeTime: 最新容器变化时间 (Optional)
 */
func NewK8sWatchHeartbeatRequestWithAllParams(
    cluster *string,
    devId *string,
    cloud *bool,
    nodeCount *int,
    containerCount *int,
    latestPodChangeTime *int64,
) *K8sWatchHeartbeatRequest {

    return &K8sWatchHeartbeatRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/k8sWatchHeartbeat",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Cluster: cluster,
        DevId: devId,
        Cloud: cloud,
        NodeCount: nodeCount,
        ContainerCount: containerCount,
        LatestPodChangeTime: latestPodChangeTime,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewK8sWatchHeartbeatRequestWithoutParam() *K8sWatchHeartbeatRequest {

    return &K8sWatchHeartbeatRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/k8sWatchHeartbeat",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param cluster: 集群(Optional) */
func (r *K8sWatchHeartbeatRequest) SetCluster(cluster string) {
    r.Cluster = &cluster
}
/* param devId: 设备id(Optional) */
func (r *K8sWatchHeartbeatRequest) SetDevId(devId string) {
    r.DevId = &devId
}
/* param cloud: 公有云集群标识(Optional) */
func (r *K8sWatchHeartbeatRequest) SetCloud(cloud bool) {
    r.Cloud = &cloud
}
/* param nodeCount: node数量(Optional) */
func (r *K8sWatchHeartbeatRequest) SetNodeCount(nodeCount int) {
    r.NodeCount = &nodeCount
}
/* param containerCount: 容器数量(Optional) */
func (r *K8sWatchHeartbeatRequest) SetContainerCount(containerCount int) {
    r.ContainerCount = &containerCount
}
/* param latestPodChangeTime: 最新容器变化时间(Optional) */
func (r *K8sWatchHeartbeatRequest) SetLatestPodChangeTime(latestPodChangeTime int64) {
    r.LatestPodChangeTime = &latestPodChangeTime
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r K8sWatchHeartbeatRequest) GetRegionId() string {
    return ""
}

type K8sWatchHeartbeatResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result K8sWatchHeartbeatResult `json:"result"`
}

type K8sWatchHeartbeatResult struct {
    Result bool `json:"result"`
}