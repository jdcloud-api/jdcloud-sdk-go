// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    dbaudit "github.com/lshuining/jdcloud-sdk-go/services/dbaudit/models"
)

type UpdateDatabaseRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* 审计实例ID  */
    InsId string `json:"insId"`

    /* 数据库ID  */
    DbId string `json:"dbId"`

    /*   */
    DatabaseSpec *dbaudit.DatabaseSpec `json:"databaseSpec"`
}

/*
 * param regionId: 地域 Id (Required)
 * param insId: 审计实例ID (Required)
 * param dbId: 数据库ID (Required)
 * param databaseSpec:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateDatabaseRequest(
    regionId string,
    insId string,
    dbId string,
    databaseSpec *dbaudit.DatabaseSpec,
) *UpdateDatabaseRequest {

	return &UpdateDatabaseRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/instances/{insId}/databases/{dbId}",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        InsId: insId,
        DbId: dbId,
        DatabaseSpec: databaseSpec,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param insId: 审计实例ID (Required)
 * param dbId: 数据库ID (Required)
 * param databaseSpec:  (Required)
 */
func NewUpdateDatabaseRequestWithAllParams(
    regionId string,
    insId string,
    dbId string,
    databaseSpec *dbaudit.DatabaseSpec,
) *UpdateDatabaseRequest {

    return &UpdateDatabaseRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{insId}/databases/{dbId}",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        InsId: insId,
        DbId: dbId,
        DatabaseSpec: databaseSpec,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateDatabaseRequestWithoutParam() *UpdateDatabaseRequest {

    return &UpdateDatabaseRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instances/{insId}/databases/{dbId}",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *UpdateDatabaseRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param insId: 审计实例ID(Required) */
func (r *UpdateDatabaseRequest) SetInsId(insId string) {
    r.InsId = insId
}

/* param dbId: 数据库ID(Required) */
func (r *UpdateDatabaseRequest) SetDbId(dbId string) {
    r.DbId = dbId
}

/* param databaseSpec: (Required) */
func (r *UpdateDatabaseRequest) SetDatabaseSpec(databaseSpec *dbaudit.DatabaseSpec) {
    r.DatabaseSpec = databaseSpec
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateDatabaseRequest) GetRegionId() string {
    return r.RegionId
}

type UpdateDatabaseResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateDatabaseResult `json:"result"`
}

type UpdateDatabaseResult struct {
}