// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    dbaudit "github.com/lshuining/jdcloud-sdk-go/services/dbaudit/apis"
    "encoding/json"
    "errors"
)

type DbauditClient struct {
    core.JDCloudClient
}

func NewDbauditClient(credential *core.Credential) *DbauditClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("dbaudit.jdcloud-api.com")

    return &DbauditClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "dbaudit",
            Revision:    "1.0.2",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *DbauditClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *DbauditClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *DbauditClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 配置数据库审计信息 */
func (c *DbauditClient) SetAuditConfig(request *dbaudit.SetAuditConfigRequest) (*dbaudit.SetAuditConfigResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.SetAuditConfigResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 启用数据库的双向审计 */
func (c *DbauditClient) EnableAuditResponse(request *dbaudit.EnableAuditResponseRequest) (*dbaudit.EnableAuditResponseResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.EnableAuditResponseResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取此实例的所有IP白名单列表 */
func (c *DbauditClient) DescribeIpWhiteList(request *dbaudit.DescribeIpWhiteListRequest) (*dbaudit.DescribeIpWhiteListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DescribeIpWhiteListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加敏感信息遮蔽规则 */
func (c *DbauditClient) AddMaskRule(request *dbaudit.AddMaskRuleRequest) (*dbaudit.AddMaskRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.AddMaskRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改网卡信息 */
func (c *DbauditClient) ModyfyAuditNetCards(request *dbaudit.ModyfyAuditNetCardsRequest) (*dbaudit.ModyfyAuditNetCardsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.ModyfyAuditNetCardsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取敏感信息遮蔽规则列表 */
func (c *DbauditClient) DescribeMaskRuleList(request *dbaudit.DescribeMaskRuleListRequest) (*dbaudit.DescribeMaskRuleListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DescribeMaskRuleListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 下载此任务报表 */
func (c *DbauditClient) DownloadReport(request *dbaudit.DownloadReportRequest) (*dbaudit.DownloadReportResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DownloadReportResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除数据库配置 */
func (c *DbauditClient) DeleteDatabase(request *dbaudit.DeleteDatabaseRequest) (*dbaudit.DeleteDatabaseResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DeleteDatabaseResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 新增规则 */
func (c *DbauditClient) AddRule(request *dbaudit.AddRuleRequest) (*dbaudit.AddRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.AddRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改数据库审计实例名称和描述 */
func (c *DbauditClient) ModifyInstance(request *dbaudit.ModifyInstanceRequest) (*dbaudit.ModifyInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.ModifyInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 禁用规则组 */
func (c *DbauditClient) DisableRuleGroup(request *dbaudit.DisableRuleGroupRequest) (*dbaudit.DisableRuleGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DisableRuleGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取数据库审计agent审计的数据库列表 */
func (c *DbauditClient) DescribeAgentDatabases(request *dbaudit.DescribeAgentDatabasesRequest) (*dbaudit.DescribeAgentDatabasesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DescribeAgentDatabasesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取数据库审计实例列表
pageNumber: 页码
pageSize: 每页数量
nameFilter: 按名称查询
filters: 按instanceId 查询，只支持eq，单个instanceId匹配
 */
func (c *DbauditClient) DescribeInstanceList(request *dbaudit.DescribeInstanceListRequest) (*dbaudit.DescribeInstanceListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DescribeInstanceListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取数据库审计实例详情 */
func (c *DbauditClient) DescribeInstance(request *dbaudit.DescribeInstanceRequest) (*dbaudit.DescribeInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DescribeInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 停止报表任务 */
func (c *DbauditClient) StopTask(request *dbaudit.StopTaskRequest) (*dbaudit.StopTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.StopTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取数据库审计agent主机列表 */
func (c *DbauditClient) DescribeAgentList(request *dbaudit.DescribeAgentListRequest) (*dbaudit.DescribeAgentListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DescribeAgentListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取规则组内规则列表 */
func (c *DbauditClient) DescribeRuleGroupRules(request *dbaudit.DescribeRuleGroupRulesRequest) (*dbaudit.DescribeRuleGroupRulesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DescribeRuleGroupRulesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查看审计日志详情 */
func (c *DbauditClient) DescribeAuditLog(request *dbaudit.DescribeAuditLogRequest) (*dbaudit.DescribeAuditLogResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DescribeAuditLogResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 卸载agent，支持批量，多个ID用英文逗号分隔 */
func (c *DbauditClient) UninstallAgent(request *dbaudit.UninstallAgentRequest) (*dbaudit.UninstallAgentResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.UninstallAgentResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除规则 */
func (c *DbauditClient) DeleteRule(request *dbaudit.DeleteRuleRequest) (*dbaudit.DeleteRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DeleteRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除规则组 */
func (c *DbauditClient) DeleteRuleGroup(request *dbaudit.DeleteRuleGroupRequest) (*dbaudit.DeleteRuleGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DeleteRuleGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 编辑敏感信息遮蔽规则 */
func (c *DbauditClient) ModifyMask(request *dbaudit.ModifyMaskRequest) (*dbaudit.ModifyMaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.ModifyMaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取规则详情 */
func (c *DbauditClient) DescribeRule(request *dbaudit.DescribeRuleRequest) (*dbaudit.DescribeRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DescribeRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 取消对该数据库的审计，支持批量，多个ID用英文逗号分隔 */
func (c *DbauditClient) DeleteAuditFromAgent(request *dbaudit.DeleteAuditFromAgentRequest) (*dbaudit.DeleteAuditFromAgentResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DeleteAuditFromAgentResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 启动报表任务 */
func (c *DbauditClient) StartTask(request *dbaudit.StartTaskRequest) (*dbaudit.StartTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.StartTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 新增规则组 */
func (c *DbauditClient) AddRuleGroup(request *dbaudit.AddRuleGroupRequest) (*dbaudit.AddRuleGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.AddRuleGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改agent资源限额,支持多个agentId,英文逗号分隔 */
func (c *DbauditClient) ModyfyAgentLimits(request *dbaudit.ModyfyAgentLimitsRequest) (*dbaudit.ModyfyAgentLimitsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.ModyfyAgentLimitsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取审计日志列表
时间范围[0-180天]
 */
func (c *DbauditClient) DescribeAuditLogList(request *dbaudit.DescribeAuditLogListRequest) (*dbaudit.DescribeAuditLogListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DescribeAuditLogListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取任务下的报表列表 */
func (c *DbauditClient) DescribeReportList(request *dbaudit.DescribeReportListRequest) (*dbaudit.DescribeReportListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DescribeReportListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 新建数据库配置 */
func (c *DbauditClient) AddDatabase(request *dbaudit.AddDatabaseRequest) (*dbaudit.AddDatabaseResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.AddDatabaseResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 安装数据库审计agent */
func (c *DbauditClient) InstallAgent(request *dbaudit.InstallAgentRequest) (*dbaudit.InstallAgentResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.InstallAgentResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除敏感信息遮蔽规则 */
func (c *DbauditClient) DeleteMask(request *dbaudit.DeleteMaskRequest) (*dbaudit.DeleteMaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DeleteMaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取数据库详情 */
func (c *DbauditClient) DescribeDatabase(request *dbaudit.DescribeDatabaseRequest) (*dbaudit.DescribeDatabaseResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DescribeDatabaseResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改数据库描述或配置 */
func (c *DbauditClient) UpdateDatabase(request *dbaudit.UpdateDatabaseRequest) (*dbaudit.UpdateDatabaseResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.UpdateDatabaseResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 添加一条IP白名单记录 */
func (c *DbauditClient) AddIpWhiteItem(request *dbaudit.AddIpWhiteItemRequest) (*dbaudit.AddIpWhiteItemResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.AddIpWhiteItemResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改任务的配置信息 */
func (c *DbauditClient) ModifyTask(request *dbaudit.ModifyTaskRequest) (*dbaudit.ModifyTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.ModifyTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 禁用数据库的双向审计 */
func (c *DbauditClient) DisableAuditResponse(request *dbaudit.DisableAuditResponseRequest) (*dbaudit.DisableAuditResponseResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DisableAuditResponseResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建任务报表 */
func (c *DbauditClient) CreateTask(request *dbaudit.CreateTaskRequest) (*dbaudit.CreateTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.CreateTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取数据库列表 */
func (c *DbauditClient) DescribeDatabases(request *dbaudit.DescribeDatabasesRequest) (*dbaudit.DescribeDatabasesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DescribeDatabasesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除此任务，如果任务下有报表，需要首先删除任务下的报表才能删除此任务 */
func (c *DbauditClient) DeleteTask(request *dbaudit.DeleteTaskRequest) (*dbaudit.DeleteTaskResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DeleteTaskResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取任务列表
一次性任务报表时间范围[0-30天]
 */
func (c *DbauditClient) DescribeTaskList(request *dbaudit.DescribeTaskListRequest) (*dbaudit.DescribeTaskListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DescribeTaskListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除此任务报表 */
func (c *DbauditClient) DeleteReport(request *dbaudit.DeleteReportRequest) (*dbaudit.DeleteReportResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DeleteReportResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除一条IP白名单记录 */
func (c *DbauditClient) DeleteIpWhiteItem(request *dbaudit.DeleteIpWhiteItemRequest) (*dbaudit.DeleteIpWhiteItemResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DeleteIpWhiteItemResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 启用规则组 */
func (c *DbauditClient) EnableRuleGroup(request *dbaudit.EnableRuleGroupRequest) (*dbaudit.EnableRuleGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.EnableRuleGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 编辑规则组内的规则 */
func (c *DbauditClient) ModifyRule(request *dbaudit.ModifyRuleRequest) (*dbaudit.ModifyRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.ModifyRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 下发规则组到指定dbIds */
func (c *DbauditClient) DeployRuleGroup(request *dbaudit.DeployRuleGroupRequest) (*dbaudit.DeployRuleGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DeployRuleGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取规则组列表 */
func (c *DbauditClient) DescribeRuleGroups(request *dbaudit.DescribeRuleGroupsRequest) (*dbaudit.DescribeRuleGroupsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &dbaudit.DescribeRuleGroupsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

