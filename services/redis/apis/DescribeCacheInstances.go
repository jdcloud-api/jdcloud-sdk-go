// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    redis "github.com/lshuining/jdcloud-sdk-go/services/redis/models"
    common "github.com/lshuining/jdcloud-sdk-go/services/common/models"
)

type DescribeCacheInstancesRequest struct {

    core.JDCloudRequest

    /* 缓存Redis实例所在区域的Region ID。目前有华北-北京、华南-广州、华东-上海三个区域，Region ID分别为cn-north-1、cn-south-1、cn-east-2  */
    RegionId string `json:"regionId"`

    /* 页码：取值范围[1,∞)，默认为1 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 分页大小：取值范围[10, 100]，默认为10 (Optional) */
    PageSize *int `json:"pageSize"`

    /* 过滤属性：
cacheInstanceId - 实例Id，精确匹配，可选择多个
cacheInstanceName - 实例名称，模糊匹配
cacheInstanceStatus - 实例状态，精确匹配，可选择多个(running：运行中，error：错误，creating：创建中，changing：变配中，configuring：参数修改中，restoring：备份恢复中，deleting：删除中)
redisVersion - redis引擎版本，精确匹配，可选择2.8和4.0
instanceType - 实例类型，精确匹配（redis表示主从版，redis_cluster表示集群版）
chargeMode - 计费类型，精确匹配（prepaid_by_duration表示包年包月预付费，postpaid_by_duration表示按配置后付费）
 (Optional) */
    Filters []common.Filter `json:"filters"`

    /* 排序属性：
createTime - 按创建时间排序(asc表示按时间正序，desc表示按时间倒序)
 (Optional) */
    Sorts []common.Sort `json:"sorts"`

    /* 标签的过滤条件 (Optional) */
    TagFilters []common.TagFilter `json:"tagFilters"`

    /*  (Optional) */
    ResourceGroupIds []string `json:"resourceGroupIds"`
}

/*
 * param regionId: 缓存Redis实例所在区域的Region ID。目前有华北-北京、华南-广州、华东-上海三个区域，Region ID分别为cn-north-1、cn-south-1、cn-east-2 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeCacheInstancesRequest(
    regionId string,
) *DescribeCacheInstancesRequest {

	return &DescribeCacheInstancesRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/cacheInstance",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: 缓存Redis实例所在区域的Region ID。目前有华北-北京、华南-广州、华东-上海三个区域，Region ID分别为cn-north-1、cn-south-1、cn-east-2 (Required)
 * param pageNumber: 页码：取值范围[1,∞)，默认为1 (Optional)
 * param pageSize: 分页大小：取值范围[10, 100]，默认为10 (Optional)
 * param filters: 过滤属性：
cacheInstanceId - 实例Id，精确匹配，可选择多个
cacheInstanceName - 实例名称，模糊匹配
cacheInstanceStatus - 实例状态，精确匹配，可选择多个(running：运行中，error：错误，creating：创建中，changing：变配中，configuring：参数修改中，restoring：备份恢复中，deleting：删除中)
redisVersion - redis引擎版本，精确匹配，可选择2.8和4.0
instanceType - 实例类型，精确匹配（redis表示主从版，redis_cluster表示集群版）
chargeMode - 计费类型，精确匹配（prepaid_by_duration表示包年包月预付费，postpaid_by_duration表示按配置后付费）
 (Optional)
 * param sorts: 排序属性：
createTime - 按创建时间排序(asc表示按时间正序，desc表示按时间倒序)
 (Optional)
 * param tagFilters: 标签的过滤条件 (Optional)
 * param resourceGroupIds:  (Optional)
 */
func NewDescribeCacheInstancesRequestWithAllParams(
    regionId string,
    pageNumber *int,
    pageSize *int,
    filters []common.Filter,
    sorts []common.Sort,
    tagFilters []common.TagFilter,
    resourceGroupIds []string,
) *DescribeCacheInstancesRequest {

    return &DescribeCacheInstancesRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/cacheInstance",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        PageNumber: pageNumber,
        PageSize: pageSize,
        Filters: filters,
        Sorts: sorts,
        TagFilters: tagFilters,
        ResourceGroupIds: resourceGroupIds,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeCacheInstancesRequestWithoutParam() *DescribeCacheInstancesRequest {

    return &DescribeCacheInstancesRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/cacheInstance",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 缓存Redis实例所在区域的Region ID。目前有华北-北京、华南-广州、华东-上海三个区域，Region ID分别为cn-north-1、cn-south-1、cn-east-2(Required) */
func (r *DescribeCacheInstancesRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param pageNumber: 页码：取值范围[1,∞)，默认为1(Optional) */
func (r *DescribeCacheInstancesRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}

/* param pageSize: 分页大小：取值范围[10, 100]，默认为10(Optional) */
func (r *DescribeCacheInstancesRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

/* param filters: 过滤属性：
cacheInstanceId - 实例Id，精确匹配，可选择多个
cacheInstanceName - 实例名称，模糊匹配
cacheInstanceStatus - 实例状态，精确匹配，可选择多个(running：运行中，error：错误，creating：创建中，changing：变配中，configuring：参数修改中，restoring：备份恢复中，deleting：删除中)
redisVersion - redis引擎版本，精确匹配，可选择2.8和4.0
instanceType - 实例类型，精确匹配（redis表示主从版，redis_cluster表示集群版）
chargeMode - 计费类型，精确匹配（prepaid_by_duration表示包年包月预付费，postpaid_by_duration表示按配置后付费）
(Optional) */
func (r *DescribeCacheInstancesRequest) SetFilters(filters []common.Filter) {
    r.Filters = filters
}

/* param sorts: 排序属性：
createTime - 按创建时间排序(asc表示按时间正序，desc表示按时间倒序)
(Optional) */
func (r *DescribeCacheInstancesRequest) SetSorts(sorts []common.Sort) {
    r.Sorts = sorts
}

/* param tagFilters: 标签的过滤条件(Optional) */
func (r *DescribeCacheInstancesRequest) SetTagFilters(tagFilters []common.TagFilter) {
    r.TagFilters = tagFilters
}

/* param resourceGroupIds: (Optional) */
func (r *DescribeCacheInstancesRequest) SetResourceGroupIds(resourceGroupIds []string) {
    r.ResourceGroupIds = resourceGroupIds
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeCacheInstancesRequest) GetRegionId() string {
    return r.RegionId
}

type DescribeCacheInstancesResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeCacheInstancesResult `json:"result"`
}

type DescribeCacheInstancesResult struct {
    CacheInstances []redis.CacheInstance `json:"cacheInstances"`
    TotalCount int `json:"totalCount"`
}