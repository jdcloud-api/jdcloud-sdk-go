// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    redis "github.com/jdcloud-api/jdcloud-sdk-go/services/redis/models"
    charge "github.com/jdcloud-api/jdcloud-sdk-go/services/charge/models"
)

type CreateCacheInstanceRequest struct {

    core.JDCloudRequest

    /* 缓存Redis实例所在区域的Region ID。目前缓存Redis有华北、华南、华东区域，对应Region ID为cn-north-1、cn-south-1、cn-east-2  */
    RegionId string `json:"regionId"`

    /* 创建缓存实例的具体属性，包括所属私有网络ID(vpcId)、子网ID(subnetId)、缓存实例名称、缓存实例规格、缓存实例密码、缓存实例所在区域可用区ID信息和缓存实例描述。  */
    CacheInstance *redis.CacheInstanceSpec `json:"cacheInstance"`

    /* 计费信息的相关配置。 (Optional) */
    Charge *charge.ChargeSpec `json:"charge"`
}

/*
 * param regionId: 缓存Redis实例所在区域的Region ID。目前缓存Redis有华北、华南、华东区域，对应Region ID为cn-north-1、cn-south-1、cn-east-2 (Required)
 * param cacheInstance: 创建缓存实例的具体属性，包括所属私有网络ID(vpcId)、子网ID(subnetId)、缓存实例名称、缓存实例规格、缓存实例密码、缓存实例所在区域可用区ID信息和缓存实例描述。 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateCacheInstanceRequest(
    regionId string,
    cacheInstance *redis.CacheInstanceSpec,
) *CreateCacheInstanceRequest {

	return &CreateCacheInstanceRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/cacheInstance",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        CacheInstance: cacheInstance,
	}
}

/*
 * param regionId: 缓存Redis实例所在区域的Region ID。目前缓存Redis有华北、华南、华东区域，对应Region ID为cn-north-1、cn-south-1、cn-east-2 (Required)
 * param cacheInstance: 创建缓存实例的具体属性，包括所属私有网络ID(vpcId)、子网ID(subnetId)、缓存实例名称、缓存实例规格、缓存实例密码、缓存实例所在区域可用区ID信息和缓存实例描述。 (Required)
 * param charge: 计费信息的相关配置。 (Optional)
 */
func NewCreateCacheInstanceRequestWithAllParams(
    regionId string,
    cacheInstance *redis.CacheInstanceSpec,
    charge *charge.ChargeSpec,
) *CreateCacheInstanceRequest {

    return &CreateCacheInstanceRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/cacheInstance",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        CacheInstance: cacheInstance,
        Charge: charge,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateCacheInstanceRequestWithoutParam() *CreateCacheInstanceRequest {

    return &CreateCacheInstanceRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/cacheInstance",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 缓存Redis实例所在区域的Region ID。目前缓存Redis有华北、华南、华东区域，对应Region ID为cn-north-1、cn-south-1、cn-east-2(Required) */
func (r *CreateCacheInstanceRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param cacheInstance: 创建缓存实例的具体属性，包括所属私有网络ID(vpcId)、子网ID(subnetId)、缓存实例名称、缓存实例规格、缓存实例密码、缓存实例所在区域可用区ID信息和缓存实例描述。(Required) */
func (r *CreateCacheInstanceRequest) SetCacheInstance(cacheInstance *redis.CacheInstanceSpec) {
    r.CacheInstance = cacheInstance
}

/* param charge: 计费信息的相关配置。(Optional) */
func (r *CreateCacheInstanceRequest) SetCharge(charge *charge.ChargeSpec) {
    r.Charge = charge
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateCacheInstanceRequest) GetRegionId() string {
    return r.RegionId
}

type CreateCacheInstanceResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateCacheInstanceResult `json:"result"`
}

type CreateCacheInstanceResult struct {
    CacheInstanceId string `json:"cacheInstanceId"`
    OrderNum string `json:"orderNum"`
}