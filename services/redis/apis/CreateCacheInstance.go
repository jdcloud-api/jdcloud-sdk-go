// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    "reflect"
    redis "github.com/jdcloud-api/jdcloud-sdk-go/services/redis/models"
    charge "github.com/jdcloud-api/jdcloud-sdk-go/services/charge/models"
)

type CreateCacheInstanceRequest struct {

    core.JDCloudRequest

    /* 缓存Redis实例所在区域的Region ID。目前缓存Redis有华北、华南、华东区域，对应Region ID为cn-north-1、cn-south-1、cn-east-2  */
    RegionId string `json:"regionId"`

    /*   */
    CacheInstance *redis.CacheInstanceSpec `json:"cacheInstance"`

    /*  (Optional) */
    Charge *charge.ChargeSpec `json:"charge"`
}

/*
 * param regionId: 缓存Redis实例所在区域的Region ID。目前缓存Redis有华北、华南、华东区域，对应Region ID为cn-north-1、cn-south-1、cn-east-2 
 * param cacheInstance:  
 * param charge:  (Optional)
 */
func NewCreateCacheInstanceRequest(
    regionId string,
    cacheInstance *redis.CacheInstanceSpec,
) *CreateCacheInstanceRequest {

	return &CreateCacheInstanceRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/cacheInstance",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        CacheInstance: cacheInstance,
	}
}

func (r *CreateCacheInstanceRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

func (r *CreateCacheInstanceRequest) SetCacheInstance(cacheInstance *redis.CacheInstanceSpec) {
    r.CacheInstance = cacheInstance
}

func (r *CreateCacheInstanceRequest) SetCharge(charge *charge.ChargeSpec) {
    r.Charge = charge
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateCacheInstanceRequest) GetRegionId() string {
    fieldName := "RegionId"
    reqType := reflect.TypeOf(r)
    value := reflect.ValueOf(r)
    _, ok := reqType.FieldByName(fieldName)
    if ok {
        return value.FieldByName(fieldName).String()
    }

    return ""
}

type CreateCacheInstanceResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateCacheInstanceResult `json:"result"`
}

type CreateCacheInstanceResult struct {
    CacheInstanceId string `json:"cacheInstanceId"`
    OrderNum string `json:"orderNum"`
}