// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    billing "github.com/jdcloud-api/jdcloud-sdk-go/services/billing/apis"
    "encoding/json"
    "errors"
)

type BillingClient struct {
    core.JDCloudClient
}

func NewBillingClient(credential *core.Credential) *BillingClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("billing.jdcloud-api.com")

    return &BillingClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "billing",
            Revision:    "1.1.16",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *BillingClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *BillingClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *BillingClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 查询计费项账单月汇总数据 */
func (c *BillingClient) DescribeFormulaSummaryList(request *billing.DescribeFormulaSummaryListRequest) (*billing.DescribeFormulaSummaryListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &billing.DescribeFormulaSummaryListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询计费价格信息 */
func (c *BillingClient) CalculateTotalPrice(request *billing.CalculateTotalPriceRequest) (*billing.CalculateTotalPriceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &billing.CalculateTotalPriceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询账单资源汇总数据 */
func (c *BillingClient) QueryBillSummary(request *billing.QueryBillSummaryRequest) (*billing.QueryBillSummaryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &billing.QueryBillSummaryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询账单资源汇总数据V2版本 */
func (c *BillingClient) DescribeBillSummarys(request *billing.DescribeBillSummarysRequest) (*billing.DescribeBillSummarysResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &billing.DescribeBillSummarysResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询分账账单天汇总数据 */
func (c *BillingClient) QuerySplitItemDaySummary(request *billing.QuerySplitItemDaySummaryRequest) (*billing.QuerySplitItemDaySummaryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &billing.QuerySplitItemDaySummaryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询分账账单月汇总数据 */
func (c *BillingClient) QuerySplitItemMonthSummary(request *billing.QuerySplitItemMonthSummaryRequest) (*billing.QuerySplitItemMonthSummaryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &billing.QuerySplitItemMonthSummaryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询账单明细数据V2版本 */
func (c *BillingClient) DescribeBillDetails(request *billing.DescribeBillDetailsRequest) (*billing.DescribeBillDetailsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &billing.DescribeBillDetailsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询账单明细数据 */
func (c *BillingClient) QueryBillDetail(request *billing.QueryBillDetailRequest) (*billing.QueryBillDetailResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &billing.QueryBillDetailResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询账单资源天汇总数据 */
func (c *BillingClient) QueryBillDaySummary(request *billing.QueryBillDaySummaryRequest) (*billing.QueryBillDaySummaryResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &billing.QueryBillDaySummaryResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

