// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    nc "github.com/jdcloud-api/jdcloud-sdk-go/services/nc/models"
)

type CreateContainersRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* 创建容器规格 (Optional) */
    ContainerSpec *nc.ContainerSpec `json:"containerSpec"`

    /* 购买实例数量；取值范围：[1,100] (Optional) */
    MaxCount *int `json:"maxCount"`
}

/*
 * param regionId: Region ID 
 * param containerSpec: 创建容器规格 (Optional)
 * param maxCount: 购买实例数量；取值范围：[1,100] (Optional)
 */
func NewCreateContainersRequest(
    regionId string,
) *CreateContainersRequest {

	return &CreateContainersRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/containers",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

func (r *CreateContainersRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

func (r *CreateContainersRequest) SetContainerSpec(containerSpec *nc.ContainerSpec) {
    r.ContainerSpec = containerSpec
}

func (r *CreateContainersRequest) SetMaxCount(maxCount int) {
    r.MaxCount = &maxCount
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateContainersRequest) GetRegionId() string {
    return r.RegionId
}

type CreateContainersResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateContainersResult `json:"result"`
}

type CreateContainersResult struct {
    ContainerIds []string `json:"containerIds"`
}