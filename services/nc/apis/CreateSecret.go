// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    nc "github.com/jdcloud-api/jdcloud-sdk-go/services/nc/models"
)

type CreateSecretRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* 机密数据名称，不能重复
  */
    Name string `json:"name"`

    /* 机密数据的类型，目前仅支持：docker-registry 类型，用来和docker registry认证的类型。
  */
    SecretType string `json:"secretType"`

    /* 机密的数据。<br>
key 的有效字符包括字母、数字、-、_和.； <br>
value 是 Base64 编码的字符串，不能包含换行符（在 linux 下使用 base64 -w 0选项），每个value长度上限为4KB，整个data的长度不能超过256KB; <br>
必须包含server、username、password 字段，email 字段是可选的。<br>
 (Optional) */
    Data *nc.DockerRegistryData `json:"data"`
}

/*
 * param regionId: Region ID (Required)
 * param name: 机密数据名称，不能重复
 (Required)
 * param secretType: 机密数据的类型，目前仅支持：docker-registry 类型，用来和docker registry认证的类型。
 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateSecretRequest(
    regionId string,
    name string,
    secretType string,
) *CreateSecretRequest {

	return &CreateSecretRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/secrets",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        Name: name,
        SecretType: secretType,
	}
}

/*
 * param regionId: Region ID (Required)
 * param name: 机密数据名称，不能重复
 (Required)
 * param secretType: 机密数据的类型，目前仅支持：docker-registry 类型，用来和docker registry认证的类型。
 (Required)
 * param data: 机密的数据。<br>
key 的有效字符包括字母、数字、-、_和.； <br>
value 是 Base64 编码的字符串，不能包含换行符（在 linux 下使用 base64 -w 0选项），每个value长度上限为4KB，整个data的长度不能超过256KB; <br>
必须包含server、username、password 字段，email 字段是可选的。<br>
 (Optional)
 */
func NewCreateSecretRequestWithAllParams(
    regionId string,
    name string,
    secretType string,
    data *nc.DockerRegistryData,
) *CreateSecretRequest {

    return &CreateSecretRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/secrets",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Name: name,
        SecretType: secretType,
        Data: data,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateSecretRequestWithoutParam() *CreateSecretRequest {

    return &CreateSecretRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/secrets",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *CreateSecretRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param name: 机密数据名称，不能重复
(Required) */
func (r *CreateSecretRequest) SetName(name string) {
    r.Name = name
}

/* param secretType: 机密数据的类型，目前仅支持：docker-registry 类型，用来和docker registry认证的类型。
(Required) */
func (r *CreateSecretRequest) SetSecretType(secretType string) {
    r.SecretType = secretType
}

/* param data: 机密的数据。<br>
key 的有效字符包括字母、数字、-、_和.； <br>
value 是 Base64 编码的字符串，不能包含换行符（在 linux 下使用 base64 -w 0选项），每个value长度上限为4KB，整个data的长度不能超过256KB; <br>
必须包含server、username、password 字段，email 字段是可选的。<br>
(Optional) */
func (r *CreateSecretRequest) SetData(data *nc.DockerRegistryData) {
    r.Data = data
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateSecretRequest) GetRegionId() string {
    return r.RegionId
}

type CreateSecretResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateSecretResult `json:"result"`
}

type CreateSecretResult struct {
    SecretName string `json:"secretName"`
}