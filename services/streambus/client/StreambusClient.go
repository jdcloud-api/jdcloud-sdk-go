// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    streambus "github.com/jdcloud-api/jdcloud-sdk-go/services/streambus/apis"
    "encoding/json"
    "errors"
)

type StreambusClient struct {
    core.JDCloudClient
}

func NewStreambusClient(credential *core.Credential) *StreambusClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("streambus.jdcloud-api.com")

    return &StreambusClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "streambus",
            Revision:    "1.0.1",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *StreambusClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *StreambusClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

/* 查看指定主题的所有消费组 */
func (c *StreambusClient) GetConsumerGroupList(request *streambus.GetConsumerGroupListRequest) (*streambus.GetConsumerGroupListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streambus.GetConsumerGroupListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 创建consumerGroupName */
func (c *StreambusClient) CreateConsumerGroup(request *streambus.CreateConsumerGroupRequest) (*streambus.CreateConsumerGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streambus.CreateConsumerGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 删除consumerGroupName */
func (c *StreambusClient) DeleteConsumerGroup(request *streambus.DeleteConsumerGroupRequest) (*streambus.DeleteConsumerGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streambus.DeleteConsumerGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 创建topic时，topicModel中只需要传topic参数，另外两个参数可为空 */
func (c *StreambusClient) AddTopic(request *streambus.AddTopicRequest) (*streambus.AddTopicResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streambus.AddTopicResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询指定主题,如果已归档会返回归档信息 */
func (c *StreambusClient) DescribeTopic(request *streambus.DescribeTopicRequest) (*streambus.DescribeTopicResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streambus.DescribeTopicResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 删除topic */
func (c *StreambusClient) DeleteTopic(request *streambus.DeleteTopicRequest) (*streambus.DeleteTopicResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streambus.DeleteTopicResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 此接口可以用来更新主题，创建归档，修改归档，删除归档，传入不同的参数可以实现不同的功能。修改归档只需要修改相应归档的参数，删除归档只需要把归档参数置为空即可 */
func (c *StreambusClient) UpdateTopic(request *streambus.UpdateTopicRequest) (*streambus.UpdateTopicResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streambus.UpdateTopicResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

/* 查询topic列表，返回topic的集合 */
func (c *StreambusClient) GetTopicList(request *streambus.GetTopicListRequest) (*streambus.GetTopicListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &streambus.GetTopicListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        return nil, err
    }

    return jdResp, err
}

