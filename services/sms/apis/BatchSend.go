// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    sms "github.com/lshuining/jdcloud-sdk-go/services/sms/models"
)

type BatchSendRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* 模板Id  */
    TemplateId string `json:"templateId"`

    /* 签名Id  */
    SignId string `json:"signId"`

    /* 群发的国内电话号码,群发时一次最多不要超过100个手机号  */
    PhoneList []string `json:"phoneList"`

    /* 短信模板变量对应的数据值,Array格式 (Optional) */
    Params []string `json:"params"`
}

/*
 * param regionId: Region ID (Required)
 * param templateId: 模板Id (Required)
 * param signId: 签名Id (Required)
 * param phoneList: 群发的国内电话号码,群发时一次最多不要超过100个手机号 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewBatchSendRequest(
    regionId string,
    templateId string,
    signId string,
    phoneList []string,
) *BatchSendRequest {

	return &BatchSendRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/batchSend",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        TemplateId: templateId,
        SignId: signId,
        PhoneList: phoneList,
	}
}

/*
 * param regionId: Region ID (Required)
 * param templateId: 模板Id (Required)
 * param signId: 签名Id (Required)
 * param phoneList: 群发的国内电话号码,群发时一次最多不要超过100个手机号 (Required)
 * param params: 短信模板变量对应的数据值,Array格式 (Optional)
 */
func NewBatchSendRequestWithAllParams(
    regionId string,
    templateId string,
    signId string,
    phoneList []string,
    params []string,
) *BatchSendRequest {

    return &BatchSendRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/batchSend",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        TemplateId: templateId,
        SignId: signId,
        PhoneList: phoneList,
        Params: params,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewBatchSendRequestWithoutParam() *BatchSendRequest {

    return &BatchSendRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/batchSend",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *BatchSendRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param templateId: 模板Id(Required) */
func (r *BatchSendRequest) SetTemplateId(templateId string) {
    r.TemplateId = templateId
}

/* param signId: 签名Id(Required) */
func (r *BatchSendRequest) SetSignId(signId string) {
    r.SignId = signId
}

/* param phoneList: 群发的国内电话号码,群发时一次最多不要超过100个手机号(Required) */
func (r *BatchSendRequest) SetPhoneList(phoneList []string) {
    r.PhoneList = phoneList
}

/* param params: 短信模板变量对应的数据值,Array格式(Optional) */
func (r *BatchSendRequest) SetParams(params []string) {
    r.Params = params
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r BatchSendRequest) GetRegionId() string {
    return r.RegionId
}

type BatchSendResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result BatchSendResult `json:"result"`
}

type BatchSendResult struct {
    Data sms.BatchSendResp `json:"data"`
    Status bool `json:"status"`
    Code int64 `json:"code"`
    Message string `json:"message"`
}