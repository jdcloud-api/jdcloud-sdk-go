// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    iotcard "github.com/lshuining/jdcloud-sdk-go/services/iotcard/apis"
    "encoding/json"
    "errors"
)

type IotcardClient struct {
    core.JDCloudClient
}

func NewIotcardClient(credential *core.Credential) *IotcardClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("iotcard.jdcloud-api.com")

    return &IotcardClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "iotcard",
            Revision:    "1.0.0",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *IotcardClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *IotcardClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *IotcardClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 根据物联网卡iccid查询该卡的开关机状态信息 */
func (c *IotcardClient) OnOffStatus(request *iotcard.OnOffStatusRequest) (*iotcard.OnOffStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iotcard.OnOffStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 物联网卡停流量操作 */
func (c *IotcardClient) CloseIotFlow(request *iotcard.CloseIotFlowRequest) (*iotcard.CloseIotFlowResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iotcard.CloseIotFlowResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 物联网卡开机操作 */
func (c *IotcardClient) OpenIotCard(request *iotcard.OpenIotCardRequest) (*iotcard.OpenIotCardResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iotcard.OpenIotCardResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 物联网卡开启流量操作 */
func (c *IotcardClient) OpenIotFlow(request *iotcard.OpenIotFlowRequest) (*iotcard.OpenIotFlowResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iotcard.OpenIotFlowResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据物联网卡iccid查询该卡的生命周期信息 */
func (c *IotcardClient) LifeStatus(request *iotcard.LifeStatusRequest) (*iotcard.LifeStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iotcard.LifeStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 物联网卡停机操作 */
func (c *IotcardClient) CloseIotCard(request *iotcard.CloseIotCardRequest) (*iotcard.CloseIotCardResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iotcard.CloseIotCardResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据物联网卡iccid查询该卡的当月套餐内的GPRS实时使用量 */
func (c *IotcardClient) GprsRealtimeInfo(request *iotcard.GprsRealtimeInfoRequest) (*iotcard.GprsRealtimeInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iotcard.GprsRealtimeInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据物联网卡iccid查询该卡的gprs状态信息 */
func (c *IotcardClient) GprsStatus(request *iotcard.GprsStatusRequest) (*iotcard.GprsStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &iotcard.GprsStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

