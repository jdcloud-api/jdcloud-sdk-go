// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    starshield "github.com/lshuining/jdcloud-sdk-go/services/starshield/models"
)

type UpdateIndividualFilterRequest struct {

    core.JDCloudRequest

    /*   */
    Zone_identifier string `json:"zone_identifier"`

    /*   */
    Id string `json:"id"`

    /* 要使用的筛选器表达式 (Optional) */
    Expression *string `json:"expression"`

    /* 此筛选器当前是否已暂停 (Optional) */
    Paused *bool `json:"paused"`

    /* 可用于描述过滤器用途的注释 (Optional) */
    Description *string `json:"description"`

    /* 短引用标记，用于快速选择相关规则。 (Optional) */
    Ref *string `json:"ref"`
}

/*
 * param zone_identifier:  (Required)
 * param id:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateIndividualFilterRequest(
    zone_identifier string,
    id string,
) *UpdateIndividualFilterRequest {

	return &UpdateIndividualFilterRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/zones/{zone_identifier}/filters/{id}",
			Method:  "PUT",
			Header:  nil,
			Version: "v1",
		},
        Zone_identifier: zone_identifier,
        Id: id,
	}
}

/*
 * param zone_identifier:  (Required)
 * param id:  (Required)
 * param expression: 要使用的筛选器表达式 (Optional)
 * param paused: 此筛选器当前是否已暂停 (Optional)
 * param description: 可用于描述过滤器用途的注释 (Optional)
 * param ref: 短引用标记，用于快速选择相关规则。 (Optional)
 */
func NewUpdateIndividualFilterRequestWithAllParams(
    zone_identifier string,
    id string,
    expression *string,
    paused *bool,
    description *string,
    ref *string,
) *UpdateIndividualFilterRequest {

    return &UpdateIndividualFilterRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/zones/{zone_identifier}/filters/{id}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
        Zone_identifier: zone_identifier,
        Id: id,
        Expression: expression,
        Paused: paused,
        Description: description,
        Ref: ref,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateIndividualFilterRequestWithoutParam() *UpdateIndividualFilterRequest {

    return &UpdateIndividualFilterRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/zones/{zone_identifier}/filters/{id}",
            Method:  "PUT",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param zone_identifier: (Required) */
func (r *UpdateIndividualFilterRequest) SetZone_identifier(zone_identifier string) {
    r.Zone_identifier = zone_identifier
}

/* param id: (Required) */
func (r *UpdateIndividualFilterRequest) SetId(id string) {
    r.Id = id
}

/* param expression: 要使用的筛选器表达式(Optional) */
func (r *UpdateIndividualFilterRequest) SetExpression(expression string) {
    r.Expression = &expression
}

/* param paused: 此筛选器当前是否已暂停(Optional) */
func (r *UpdateIndividualFilterRequest) SetPaused(paused bool) {
    r.Paused = &paused
}

/* param description: 可用于描述过滤器用途的注释(Optional) */
func (r *UpdateIndividualFilterRequest) SetDescription(description string) {
    r.Description = &description
}

/* param ref: 短引用标记，用于快速选择相关规则。(Optional) */
func (r *UpdateIndividualFilterRequest) SetRef(ref string) {
    r.Ref = &ref
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateIndividualFilterRequest) GetRegionId() string {
    return ""
}

type UpdateIndividualFilterResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateIndividualFilterResult `json:"result"`
}

type UpdateIndividualFilterResult struct {
    Data starshield.Filter `json:"data"`
}