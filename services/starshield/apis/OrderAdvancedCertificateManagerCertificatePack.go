// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    starshield "github.com/lshuining/jdcloud-sdk-go/services/starshield/models"
)

type OrderAdvancedCertificateManagerCertificatePackRequest struct {

    core.JDCloudRequest

    /*   */
    Zone_identifier string `json:"zone_identifier"`

    /* 证书包的类型 (Optional) */
    Ty_pe *string `json:"ty_pe"`

    /* 以逗号分隔的证书包的有效主机名称列表。必须包含域的顶级域名，不得包含50个以上的主机，也不得为空。 (Optional) */
    Hosts []string `json:"hosts"`

    /* 为订阅选择的验证方法 (Optional) */
    Validation_method *string `json:"validation_method"`

    /* 为订阅选择的有效日期 (Optional) */
    Validity_days *int `json:"validity_days"`

    /* 为该订阅选择的证书颁发机构。选择Let's Encrypt将减少对其他字段的定制。
validation_method必须是'txt'，validity_days必须是90，cloudflare_branding必须省略，hosts必须只包含两个条目。
一个是域名，一个是域名的子域通配符（例如 example.com, *.example.com）。
 (Optional) */
    Certificate_authority *string `json:"certificate_authority"`

    /* 是否为订阅添加星盾品牌。 (Optional) */
    Cloudflare_branding *bool `json:"cloudflare_branding"`
}

/*
 * param zone_identifier:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewOrderAdvancedCertificateManagerCertificatePackRequest(
    zone_identifier string,
) *OrderAdvancedCertificateManagerCertificatePackRequest {

	return &OrderAdvancedCertificateManagerCertificatePackRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/zones/{zone_identifier}/ssl$$certificate_packs$$order",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Zone_identifier: zone_identifier,
	}
}

/*
 * param zone_identifier:  (Required)
 * param ty_pe: 证书包的类型 (Optional)
 * param hosts: 以逗号分隔的证书包的有效主机名称列表。必须包含域的顶级域名，不得包含50个以上的主机，也不得为空。 (Optional)
 * param validation_method: 为订阅选择的验证方法 (Optional)
 * param validity_days: 为订阅选择的有效日期 (Optional)
 * param certificate_authority: 为该订阅选择的证书颁发机构。选择Let's Encrypt将减少对其他字段的定制。
validation_method必须是'txt'，validity_days必须是90，cloudflare_branding必须省略，hosts必须只包含两个条目。
一个是域名，一个是域名的子域通配符（例如 example.com, *.example.com）。
 (Optional)
 * param cloudflare_branding: 是否为订阅添加星盾品牌。 (Optional)
 */
func NewOrderAdvancedCertificateManagerCertificatePackRequestWithAllParams(
    zone_identifier string,
    ty_pe *string,
    hosts []string,
    validation_method *string,
    validity_days *int,
    certificate_authority *string,
    cloudflare_branding *bool,
) *OrderAdvancedCertificateManagerCertificatePackRequest {

    return &OrderAdvancedCertificateManagerCertificatePackRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/zones/{zone_identifier}/ssl$$certificate_packs$$order",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Zone_identifier: zone_identifier,
        Ty_pe: ty_pe,
        Hosts: hosts,
        Validation_method: validation_method,
        Validity_days: validity_days,
        Certificate_authority: certificate_authority,
        Cloudflare_branding: cloudflare_branding,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewOrderAdvancedCertificateManagerCertificatePackRequestWithoutParam() *OrderAdvancedCertificateManagerCertificatePackRequest {

    return &OrderAdvancedCertificateManagerCertificatePackRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/zones/{zone_identifier}/ssl$$certificate_packs$$order",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param zone_identifier: (Required) */
func (r *OrderAdvancedCertificateManagerCertificatePackRequest) SetZone_identifier(zone_identifier string) {
    r.Zone_identifier = zone_identifier
}

/* param ty_pe: 证书包的类型(Optional) */
func (r *OrderAdvancedCertificateManagerCertificatePackRequest) SetTy_pe(ty_pe string) {
    r.Ty_pe = &ty_pe
}

/* param hosts: 以逗号分隔的证书包的有效主机名称列表。必须包含域的顶级域名，不得包含50个以上的主机，也不得为空。(Optional) */
func (r *OrderAdvancedCertificateManagerCertificatePackRequest) SetHosts(hosts []string) {
    r.Hosts = hosts
}

/* param validation_method: 为订阅选择的验证方法(Optional) */
func (r *OrderAdvancedCertificateManagerCertificatePackRequest) SetValidation_method(validation_method string) {
    r.Validation_method = &validation_method
}

/* param validity_days: 为订阅选择的有效日期(Optional) */
func (r *OrderAdvancedCertificateManagerCertificatePackRequest) SetValidity_days(validity_days int) {
    r.Validity_days = &validity_days
}

/* param certificate_authority: 为该订阅选择的证书颁发机构。选择Let's Encrypt将减少对其他字段的定制。
validation_method必须是'txt'，validity_days必须是90，cloudflare_branding必须省略，hosts必须只包含两个条目。
一个是域名，一个是域名的子域通配符（例如 example.com, *.example.com）。
(Optional) */
func (r *OrderAdvancedCertificateManagerCertificatePackRequest) SetCertificate_authority(certificate_authority string) {
    r.Certificate_authority = &certificate_authority
}

/* param cloudflare_branding: 是否为订阅添加星盾品牌。(Optional) */
func (r *OrderAdvancedCertificateManagerCertificatePackRequest) SetCloudflare_branding(cloudflare_branding bool) {
    r.Cloudflare_branding = &cloudflare_branding
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r OrderAdvancedCertificateManagerCertificatePackRequest) GetRegionId() string {
    return ""
}

type OrderAdvancedCertificateManagerCertificatePackResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result OrderAdvancedCertificateManagerCertificatePackResult `json:"result"`
}

type OrderAdvancedCertificateManagerCertificatePackResult struct {
    Data starshield.CertificatePack `json:"data"`
}