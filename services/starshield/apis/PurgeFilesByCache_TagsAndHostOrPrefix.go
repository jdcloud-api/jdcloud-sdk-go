// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    starshield "github.com/lshuining/jdcloud-sdk-go/services/starshield/models"
)

type PurgeFilesByCache_TagsAndHostOrPrefixRequest struct {

    core.JDCloudRequest

    /*   */
    Identifier string `json:"identifier"`

    /* 如何资产携带Cache-Tag头，并且它的值与提供的值之一匹配的话，该资产将从星盾缓存中清除 (Optional) */
    Tags []string `json:"tags"`

    /* 如果资产的URL中的host与提供的值之一匹配的话，该资产将从星盾缓存中清除 (Optional) */
    Hosts []string `json:"hosts"`

    /* URL上与前缀匹配的任何资产都将从星盾缓存中清除。
例如, a.com/b 意味着 a.com/b/c/d.png 会被删除，而 a.com/bc.png 不会被删除。前缀a.com/b和a.com/b/c是冗余的。
 (Optional) */
    Prefixes []string `json:"prefixes"`
}

/*
 * param identifier:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewPurgeFilesByCache_TagsAndHostOrPrefixRequest(
    identifier string,
) *PurgeFilesByCache_TagsAndHostOrPrefixRequest {

	return &PurgeFilesByCache_TagsAndHostOrPrefixRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/zones/{identifier}/purge_cache__purgeFilesByCache_TagsAndHostOrPrefix",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Identifier: identifier,
	}
}

/*
 * param identifier:  (Required)
 * param tags: 如何资产携带Cache-Tag头，并且它的值与提供的值之一匹配的话，该资产将从星盾缓存中清除 (Optional)
 * param hosts: 如果资产的URL中的host与提供的值之一匹配的话，该资产将从星盾缓存中清除 (Optional)
 * param prefixes: URL上与前缀匹配的任何资产都将从星盾缓存中清除。
例如, a.com/b 意味着 a.com/b/c/d.png 会被删除，而 a.com/bc.png 不会被删除。前缀a.com/b和a.com/b/c是冗余的。
 (Optional)
 */
func NewPurgeFilesByCache_TagsAndHostOrPrefixRequestWithAllParams(
    identifier string,
    tags []string,
    hosts []string,
    prefixes []string,
) *PurgeFilesByCache_TagsAndHostOrPrefixRequest {

    return &PurgeFilesByCache_TagsAndHostOrPrefixRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/zones/{identifier}/purge_cache__purgeFilesByCache_TagsAndHostOrPrefix",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Identifier: identifier,
        Tags: tags,
        Hosts: hosts,
        Prefixes: prefixes,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewPurgeFilesByCache_TagsAndHostOrPrefixRequestWithoutParam() *PurgeFilesByCache_TagsAndHostOrPrefixRequest {

    return &PurgeFilesByCache_TagsAndHostOrPrefixRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/zones/{identifier}/purge_cache__purgeFilesByCache_TagsAndHostOrPrefix",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param identifier: (Required) */
func (r *PurgeFilesByCache_TagsAndHostOrPrefixRequest) SetIdentifier(identifier string) {
    r.Identifier = identifier
}

/* param tags: 如何资产携带Cache-Tag头，并且它的值与提供的值之一匹配的话，该资产将从星盾缓存中清除(Optional) */
func (r *PurgeFilesByCache_TagsAndHostOrPrefixRequest) SetTags(tags []string) {
    r.Tags = tags
}

/* param hosts: 如果资产的URL中的host与提供的值之一匹配的话，该资产将从星盾缓存中清除(Optional) */
func (r *PurgeFilesByCache_TagsAndHostOrPrefixRequest) SetHosts(hosts []string) {
    r.Hosts = hosts
}

/* param prefixes: URL上与前缀匹配的任何资产都将从星盾缓存中清除。
例如, a.com/b 意味着 a.com/b/c/d.png 会被删除，而 a.com/bc.png 不会被删除。前缀a.com/b和a.com/b/c是冗余的。
(Optional) */
func (r *PurgeFilesByCache_TagsAndHostOrPrefixRequest) SetPrefixes(prefixes []string) {
    r.Prefixes = prefixes
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r PurgeFilesByCache_TagsAndHostOrPrefixRequest) GetRegionId() string {
    return ""
}

type PurgeFilesByCache_TagsAndHostOrPrefixResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result PurgeFilesByCache_TagsAndHostOrPrefixResult `json:"result"`
}

type PurgeFilesByCache_TagsAndHostOrPrefixResult struct {
    Data starshield.Zone `json:"data"`
}