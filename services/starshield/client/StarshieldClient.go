// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    starshield "github.com/jdcloud-api/jdcloud-sdk-go/services/starshield/apis"
    "encoding/json"
    "errors"
)

type StarshieldClient struct {
    core.JDCloudClient
}

func NewStarshieldClient(credential *core.Credential) *StarshieldClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("starshield.jdcloud-api.com")

    return &StarshieldClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "starshield",
            Revision:    "0.0.14",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *StarshieldClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *StarshieldClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *StarshieldClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 剥离元数据并压缩你的图像，以加快页面加载时间。
Basic（无损），减少PNG、JPEG和GIF文件的大小 - 对视觉质量没有影响。
Basic+JPEG（有损），进一步减少JPEG文件的大小，以加快图像加载。
较大的JPEG文件被转换为渐进式图像，首先加载较低分辨率的图像，最后是较高的分辨率版本。
不建议用于高像素的摄影网站。
 */
func (c *StarshieldClient) GetPolishSetting(request *starshield.GetPolishSettingRequest) (*starshield.GetPolishSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetPolishSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 星盾将代理源服务器上任何 502、504 错误的客户错误页面，而不是显示默认的星盾错误页面。这不适用于 522 错误，并且仅限于企业级域。
 */
func (c *StarshieldClient) ChangeEnableErrorPagesOnSetting(request *starshield.ChangeEnableErrorPagesOnSettingRequest) (*starshield.ChangeEnableErrorPagesOnSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeEnableErrorPagesOnSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建套餐实例，调用成功，将自动扣费（请保证账户充足，否则无法成功创建实例）。
 */
func (c *StarshieldClient) CreateInstance(request *starshield.CreateInstanceRequest) (*starshield.CreateInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CreateInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 星盾将把具有相同查询字符串的文件视为缓存中的同一个文件，而不管查询字符串的顺序如何。这只限于企业级域。
 */
func (c *StarshieldClient) ChangeEnableQueryStringSortSetting(request *starshield.ChangeEnableQueryStringSortSettingRequest) (*starshield.ChangeEnableQueryStringSortSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeEnableQueryStringSortSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 浏览器完整性检查与不良行为检查类似，寻找最常被垃圾邮件发送者滥用的常见HTTP头，并拒绝他们访问您的页面。它还会对没有用户代理或非标准用户代理（也是滥用机器人、爬虫或访客常用的）的访客提出挑战质询。
 */
func (c *StarshieldClient) GetBrowserCheckSetting(request *starshield.GetBrowserCheckSettingRequest) (*starshield.GetBrowserCheckSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetBrowserCheckSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新规则在域上触发时将执行的操作 */
func (c *StarshieldClient) EditRule(request *starshield.EditRuleRequest) (*starshield.EditRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.EditRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 域名Spectrum应用流量统计. */
func (c *StarshieldClient) ZoneTrafficDateHistogram4Pa(request *starshield.ZoneTrafficDateHistogram4PaRequest) (*starshield.ZoneTrafficDateHistogram4PaResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ZoneTrafficDateHistogram4PaResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 星盾将预取包含在响应标头中的任何 URL。这只限于企业级域。 */
func (c *StarshieldClient) GetPrefetchPreloadSetting(request *starshield.GetPrefetchPreloadSettingRequest) (*starshield.GetPrefetchPreloadSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetPrefetchPreloadSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* bps on Zone */
func (c *StarshieldClient) BpsZone(request *starshield.BpsZoneRequest) (*starshield.BpsZoneResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.BpsZoneResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 根据订单号查询套餐实例详情 */
func (c *StarshieldClient) DescribeInstanceByOrderNo(request *starshield.DescribeInstanceByOrderNoRequest) (*starshield.DescribeInstanceByOrderNoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.DescribeInstanceByOrderNoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 流量图。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) InstanceTrafficDateHistogram(request *starshield.InstanceTrafficDateHistogramRequest) (*starshield.InstanceTrafficDateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.InstanceTrafficDateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 按响应带宽统计，返回日期直方图. */
func (c *StarshieldClient) DateHistogramBandwidth(request *starshield.DateHistogramBandwidthRequest) (*starshield.DateHistogramBandwidthResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.DateHistogramBandwidthResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* Spectrum应用流量统计. */
func (c *StarshieldClient) SpectrumAppTrafficDateHistogram(request *starshield.SpectrumAppTrafficDateHistogramRequest) (*starshield.SpectrumAppTrafficDateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.SpectrumAppTrafficDateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 请求量图。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) InstanceRequestDateHistogram(request *starshield.InstanceRequestDateHistogramRequest) (*starshield.InstanceRequestDateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.InstanceRequestDateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 按域名的TopK总请求量。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) RequestTopK(request *starshield.RequestTopKRequest) (*starshield.RequestTopKResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.RequestTopKResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新一个现有的筛选器。 */
func (c *StarshieldClient) UpdateIndividualFilter(request *starshield.UpdateIndividualFilterRequest) (*starshield.UpdateIndividualFilterResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.UpdateIndividualFilterResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 为当前域启用随机加密 */
func (c *StarshieldClient) ChangeOpportunisticEncryptionSetting(request *starshield.ChangeOpportunisticEncryptionSettingRequest) (*starshield.ChangeOpportunisticEncryptionSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeOpportunisticEncryptionSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* WAF检查对您网站的HTTP请求。它检查GET和POST请求，并应用规则来帮助从合法的网站访问者中过滤出非法流量。星盾 WAF 检查网站地址或 URL 以检测任何不正常的东西。
如果星盾 WAF确定了可疑的用户行为。那么 WAF 将用一个页面 "挑战 "网络访客，要求他们成功提交验证码以继续其行动。
如果挑战失败，行动将被停止。这意味着 星盾 的 WAF 将在任何被识别为非法的流量到达您的源网络服务器之前将其阻止。
 */
func (c *StarshieldClient) GetWebApplicationFirewallWAFSetting(request *starshield.GetWebApplicationFirewallWAFSettingRequest) (*starshield.GetWebApplicationFirewallWAFSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetWebApplicationFirewallWAFSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 通过指定URL，从星盾的缓存中细化删除一个或多个文件。
要清除带有自定义缓存key的文件，请包括用于计算缓存key的报头。
例如要清除缓存key中含有${geo}或${devicetype}的文件，请包括CF-Device-Type或CF-IPCountry报头。
注意：当包含源报头时，请确保包括scheme协议和hostname主机名。如果是默认端口，可以省略端口号（http为80，https为443），否则必须包含端口号。
 */
func (c *StarshieldClient) PurgeFilesByURL(request *starshield.PurgeFilesByURLRequest) (*starshield.PurgeFilesByURLResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.PurgeFilesByURLResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* HTTP/2边缘优化，优化了通过HTTP/2提供的资源交付，提高了页面加载性能。当与Worker结合使用时，它还支持对内容交付的精细控制。
 */
func (c *StarshieldClient) GetHTTP2EdgePrioritizationSetting(request *starshield.GetHTTP2EdgePrioritizationSettingRequest) (*starshield.GetHTTP2EdgePrioritizationSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetHTTP2EdgePrioritizationSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 按请求次数统计，返回日期直方图. */
func (c *StarshieldClient) CacheDateHistogram(request *starshield.CacheDateHistogramRequest) (*starshield.CacheDateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CacheDateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 升级套餐实例 */
func (c *StarshieldClient) ModifyInstance(request *starshield.ModifyInstanceRequest) (*starshield.ModifyInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ModifyInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 为你的网站自动最小化某些资产 */
func (c *StarshieldClient) ChangeMinifySetting(request *starshield.ChangeMinifySettingRequest) (*starshield.ChangeMinifySettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeMinifySettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 指定访问者在成功完成一项挑战（如验证码）后允许访问您的网站多长时间。在TTL过期后，访问者将不得不完成新的挑战。我们建议设置为15-45分钟，并将尝试遵守任何超过45分钟的设置。
 */
func (c *StarshieldClient) ChangeChallengeTTLSetting(request *starshield.ChangeChallengeTTLSettingRequest) (*starshield.ChangeChallengeTTLSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeChallengeTTLSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 星盾将预取包含在响应标头中的任何 URL。这只限于企业级域。 */
func (c *StarshieldClient) ChangePrefetchPreloadSetting(request *starshield.ChangePrefetchPreloadSettingRequest) (*starshield.ChangePrefetchPreloadSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangePrefetchPreloadSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 对所有使用"http"的URL的请求，用301重定向到相应的 "https" URL。如果你只想对一个子集的请求进行重定向，可以考虑创建一个"Always use HTTPS"的页面规则。
 */
func (c *StarshieldClient) ChangeAlwaysUseHTTPSSetting(request *starshield.ChangeAlwaysUseHTTPSSettingRequest) (*starshield.ChangeAlwaysUseHTTPSSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeAlwaysUseHTTPSSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 为该域启用自动HTTPS重写功能。 */
func (c *StarshieldClient) GetAutomaticHTTPSRewritesSetting(request *starshield.GetAutomaticHTTPSRewritesSettingRequest) (*starshield.GetAutomaticHTTPSRewritesSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetAutomaticHTTPSRewritesSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 95峰值带宽。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) InstanceBandwidthP95(request *starshield.InstanceBandwidthP95Request) (*starshield.InstanceBandwidthP95Response, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.InstanceBandwidthP95Response{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 对您的网站进行高级保护，防止分布式拒绝服务（DDoS）攻击。这是一个不可编辑的值。
 */
func (c *StarshieldClient) GetAdvancedDDOSSetting(request *starshield.GetAdvancedDDOSSettingRequest) (*starshield.GetAdvancedDDOSSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetAdvancedDDOSSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 购买流量包，调用成功，将自动扣费（请保证账户充足，否则无法成功创建流量包）。
 */
func (c *StarshieldClient) CreateFlowPack(request *starshield.CreateFlowPackRequest) (*starshield.CreateFlowPackResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CreateFlowPackResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询Bot开启状态 */
func (c *StarshieldClient) DescribeBotStatus(request *starshield.DescribeBotStatusRequest) (*starshield.DescribeBotStatusResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.DescribeBotStatusResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 变更上传文件的最大值 */
func (c *StarshieldClient) ChangeMaxUploadSetting(request *starshield.ChangeMaxUploadSettingRequest) (*starshield.ChangeMaxUploadSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeMaxUploadSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* qps */
func (c *StarshieldClient) QpsInstance(request *starshield.QpsInstanceRequest) (*starshield.QpsInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.QpsInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取HTTPS请求允许使用的TLS协议的最低版本。例如，如果是TLS 1.1，那么TLS 1.0连接将被拒绝，而1.1、1.2和1.3（如果启用）将被允许。 */
func (c *StarshieldClient) GetMinimumTLSVersionSetting(request *starshield.GetMinimumTLSVersionSettingRequest) (*starshield.GetMinimumTLSVersionSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetMinimumTLSVersionSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 域的相关配置 */
func (c *StarshieldClient) GetAllZoneSettings(request *starshield.GetAllZoneSettingsRequest) (*starshield.GetAllZoneSettingsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetAllZoneSettingsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 域名Spectrum应用带宽统计. */
func (c *StarshieldClient) ZoneBandwidthDateHistogram4Pa(request *starshield.ZoneBandwidthDateHistogram4PaRequest) (*starshield.ZoneBandwidthDateHistogram4PaResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ZoneBandwidthDateHistogram4PaResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* HTTP/2边缘优化，优化了通过HTTP/2提供的资源交付，提高了页面加载性能。当与Worker结合使用时，它还支持对内容交付的精细控制。
 */
func (c *StarshieldClient) ChangeHTTP2EdgePrioritizationSetting(request *starshield.ChangeHTTP2EdgePrioritizationSettingRequest) (*starshield.ChangeHTTP2EdgePrioritizationSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeHTTP2EdgePrioritizationSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除规则。 */
func (c *StarshieldClient) DeleteRule(request *starshield.DeleteRuleRequest) (*starshield.DeleteRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.DeleteRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 列出当前定义的所有防火墙规则。 */
func (c *StarshieldClient) ListOfFirewallRules(request *starshield.ListOfFirewallRulesRequest) (*starshield.ListOfFirewallRulesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ListOfFirewallRulesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取当前域随机加密设置 */
func (c *StarshieldClient) GetOpportunisticEncryptionSetting(request *starshield.GetOpportunisticEncryptionSettingRequest) (*starshield.GetOpportunisticEncryptionSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetOpportunisticEncryptionSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 设置HTTPS请求使用的TLS协议的最低版本。例如，如果选择TLS 1.1，那么TLS 1.0连接将被拒绝，而1.1、1.2和1.3（如果启用）将被允许。 */
func (c *StarshieldClient) ChangeMinimumTLSVersionSetting(request *starshield.ChangeMinimumTLSVersionSettingRequest) (*starshield.ChangeMinimumTLSVersionSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeMinimumTLSVersionSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 请求量图。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) ZoneRequestDateHistogram(request *starshield.ZoneRequestDateHistogramRequest) (*starshield.ZoneRequestDateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ZoneRequestDateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 当开启时，在你的源站离线期间，星盾会提供已缓存过的页面。 */
func (c *StarshieldClient) ChangeAlwaysOnlineSetting(request *starshield.ChangeAlwaysOnlineSettingRequest) (*starshield.ChangeAlwaysOnlineSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeAlwaysOnlineSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 在所有启用星盾的子域上启用 IPv6。 */
func (c *StarshieldClient) ChangeIPv6Setting(request *starshield.ChangeIPv6SettingRequest) (*starshield.ChangeIPv6SettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeIPv6SettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 为你的网站选择适当的安全配置文件，这将自动调整每个安全设置。如果你选择定制一个单独的安全设置，该配置文件将成为自定义。
 */
func (c *StarshieldClient) GetSecurityLevelSetting(request *starshield.GetSecurityLevelSettingRequest) (*starshield.GetSecurityLevelSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetSecurityLevelSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 实例Spectrum应用带宽统计. */
func (c *StarshieldClient) InstanceBandwidthDateHistogram4Pa(request *starshield.InstanceBandwidthDateHistogram4PaRequest) (*starshield.InstanceBandwidthDateHistogram4PaResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.InstanceBandwidthDateHistogram4PaResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 按域名的TopK峰值带宽。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) BandwidthTopK(request *starshield.BandwidthTopKRequest) (*starshield.BandwidthTopKResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.BandwidthTopKResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* Rocket Loader是一个通用的异步JavaScript优化，它优先渲染你的内容同时异步加载你的网站的Javascript。
开启Rocket Loader将立即改善网页的渲染时间，有时以首次绘制时间（TTFP）以及window.onload时间（假设页面上有JavaScript）来衡量，这对你的搜索排名会产生积极影响。
当打开时，Rocket Loader将自动推迟加载你的HTML中引用的所有Javascript，而不需要配置。
 */
func (c *StarshieldClient) ChangeRocketLoaderSetting(request *starshield.ChangeRocketLoaderSettingRequest) (*starshield.ChangeRocketLoaderSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeRocketLoaderSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新日志推送作业 */
func (c *StarshieldClient) UpdateLogpushJob(request *starshield.UpdateLogpushJobRequest) (*starshield.UpdateLogpushJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.UpdateLogpushJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 域可以使用的可用自定义页面列表 */
func (c *StarshieldClient) ListAvailableCustomPages(request *starshield.ListAvailableCustomPagesRequest) (*starshield.ListAvailableCustomPagesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ListAvailableCustomPagesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* TLS 客户端授权要求星盾使用客户端证书连接到您的源服务器（Enterprise Only）。 */
func (c *StarshieldClient) ChangeTLSClientAuthSetting(request *starshield.ChangeTLSClientAuthSettingRequest) (*starshield.ChangeTLSClientAuthSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeTLSClientAuthSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 上载域的新SSL证书 */
func (c *StarshieldClient) CreateSSLConfiguration(request *starshield.CreateSSLConfigurationRequest) (*starshield.CreateSSLConfigurationResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CreateSSLConfigurationResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* TopK域名的请求量图。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) RequestDateHistogramTopK(request *starshield.RequestDateHistogramTopKRequest) (*starshield.RequestDateHistogramTopKResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.RequestDateHistogramTopKResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 星盾域的安全标头。 */
func (c *StarshieldClient) GetSecurityHeaderHSTSSetting(request *starshield.GetSecurityHeaderHSTSSettingRequest) (*starshield.GetSecurityHeaderHSTSSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetSecurityHeaderHSTSSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 在你的网页上对电子邮件地址进行加密，以防止机器人入侵，同时保持它们对人类可见。 */
func (c *StarshieldClient) GetEmailObfuscationSetting(request *starshield.GetEmailObfuscationSettingRequest) (*starshield.GetEmailObfuscationSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetEmailObfuscationSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 总流量。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) ZoneTrafficSum(request *starshield.ZoneTrafficSumRequest) (*starshield.ZoneTrafficSumResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ZoneTrafficSumResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 自动将移动设备上的访问者重定向到一个移动优化的子域上 */
func (c *StarshieldClient) ChangeMobileRedirectSetting(request *starshield.ChangeMobileRedirectSettingRequest) (*starshield.ChangeMobileRedirectSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeMobileRedirectSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 总流量。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) InstanceTrafficSum(request *starshield.InstanceTrafficSumRequest) (*starshield.InstanceTrafficSumResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.InstanceTrafficSumResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 安全报告导出 */
func (c *StarshieldClient) ZoneSecurityReport(request *starshield.ZoneSecurityReportRequest) (*starshield.ZoneSecurityReportResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ZoneSecurityReportResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 星盾将把具有相同查询字符串的文件视为缓存中的同一个文件，而不管查询字符串的顺序如何。这只限于企业级域。
 */
func (c *StarshieldClient) GetEnableQueryStringSortSetting(request *starshield.GetEnableQueryStringSortSettingRequest) (*starshield.GetEnableQueryStringSortSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetEnableQueryStringSortSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 多指标的流量图。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) InstanceTrafficMultiDateHistogram(request *starshield.InstanceTrafficMultiDateHistogramRequest) (*starshield.InstanceTrafficMultiDateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.InstanceTrafficMultiDateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* The dashboard view provides both totals and timeseries data for the given zone and time period across the entire scdn network. */
func (c *StarshieldClient) Dashboard(request *starshield.DashboardRequest) (*starshield.DashboardResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.DashboardResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 对于一个特定域，订购一个高级证书包 */
func (c *StarshieldClient) OrderAdvancedCertificateManagerCertificatePack(request *starshield.OrderAdvancedCertificateManagerCertificatePackRequest) (*starshield.OrderAdvancedCertificateManagerCertificatePackResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.OrderAdvancedCertificateManagerCertificatePackResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 自动优化移动设备上网站访问者的图像加载 */
func (c *StarshieldClient) ChangeMirageSetting(request *starshield.ChangeMirageSettingRequest) (*starshield.ChangeMirageSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeMirageSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 对于给定域，删除高级证书包 */
func (c *StarshieldClient) DeleteAdvancedCertificateManagerCertificatePack(request *starshield.DeleteAdvancedCertificateManagerCertificatePackRequest) (*starshield.DeleteAdvancedCertificateManagerCertificatePackResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.DeleteAdvancedCertificateManagerCertificatePackResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修补域的通用SSL设置 */
func (c *StarshieldClient) EditUniversalSSLSettings(request *starshield.EditUniversalSSLSettingsRequest) (*starshield.EditUniversalSSLSettingsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.EditUniversalSSLSettingsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 多指标的带宽图。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) ZoneBandwidthMultiDateHistogram(request *starshield.ZoneBandwidthMultiDateHistogramRequest) (*starshield.ZoneBandwidthMultiDateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ZoneBandwidthMultiDateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* SSL对访问者的连接进行加密，并保护信用卡号码和其他进出网站的个人数据。
SSL最多需要5分钟才能完全激活。需要在星盾激活你的根域或www域。
Off，访客和星盾之间没有SSL，星盾和你的Web服务器之间也没有SSL（所有HTTP流量）。
Flexible, 访客和星盾之间的 SSL -- 访客在你的网站上看到 HTTPS，但星盾和你的 Web 服务器之间没有 SSL。您不需要在您的 Web 服务器上安装 SSL 证书，但您的访客仍会看到启用 HTTPS 的网站。
Full, 访客和星盾之间的 SSL -- 访客在你的网站上看到 HTTPS，以及星盾和你的 Web 服务器之间的 SSL。您至少需要有自己的 SSL 证书或自签名的证书。
Full (Strict), 访客和星盾之间的 SSL -- 访客在您的网站上看到 HTTPS，以及星盾和您的 Web 服务器之间的 SSL。你需要在你的网络服务器上安装一个有效的SSL证书。
这个证书必须由一个证书机构签署，有一个在未来的到期日，并为请求的域名（主机名）作出回应。
 */
func (c *StarshieldClient) GetSSLSetting(request *starshield.GetSSLSettingRequest) (*starshield.GetSSLSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetSSLSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* qps on Zone */
func (c *StarshieldClient) QpsZone(request *starshield.QpsZoneRequest) (*starshield.QpsZoneResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.QpsZoneResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 数据集可用的所有字段的列表。 */
func (c *StarshieldClient) Fields(request *starshield.FieldsRequest) (*starshield.FieldsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.FieldsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 分组统计。 */
func (c *StarshieldClient) GroupBy(request *starshield.GroupByRequest) (*starshield.GroupByResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GroupByResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 数据集可用的所有默认字段列表。 */
func (c *StarshieldClient) FieldsDefault(request *starshield.FieldsDefaultRequest) (*starshield.FieldsDefaultResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.FieldsDefaultResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取规则集。 */
func (c *StarshieldClient) GetRuleSet(request *starshield.GetRuleSetRequest) (*starshield.GetRuleSetResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetRuleSetResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 按请求次数统计。获取国家/地区的请求分布情况；获取路径、主机、设备类型的TopK. */
func (c *StarshieldClient) TopK(request *starshield.TopKRequest) (*starshield.TopKResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.TopKResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建新的防火墙规则。 */
func (c *StarshieldClient) CreateFirewallRules(request *starshield.CreateFirewallRulesRequest) (*starshield.CreateFirewallRulesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CreateFirewallRulesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建规则 */
func (c *StarshieldClient) CreateRule(request *starshield.CreateRuleRequest) (*starshield.CreateRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CreateRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 为该域启用加密TLS 1.3功能。 */
func (c *StarshieldClient) ChangeTLS1_3Setting(request *starshield.ChangeTLS1_3SettingRequest) (*starshield.ChangeTLS1_3SettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeTLS1_3SettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 平均峰值带宽。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) ZoneBandwidthAvg(request *starshield.ZoneBandwidthAvgRequest) (*starshield.ZoneBandwidthAvgResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ZoneBandwidthAvgResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除现有防火墙规则。 */
func (c *StarshieldClient) DeleteIndividualFirewallRules(request *starshield.DeleteIndividualFirewallRulesRequest) (*starshield.DeleteIndividualFirewallRulesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.DeleteIndividualFirewallRulesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 总请求量。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) InstanceRequestSum(request *starshield.InstanceRequestSumRequest) (*starshield.InstanceRequestSumResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.InstanceRequestSumResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 如果你的网站上有敏感的内容，你想让真正的访问者看到，但你想对可疑的访问者进行隐藏，你所要做的就是用星盾SSE标签来包装这些内容。
用下面的SSE标签包住任何你想不让可疑访客看到的内容，<!--sse--><!--/sse-->。
例如，<!--sse-->不好的访问者不会看到我的电话号码，555-555-5555<!--/sse-->。注意，SSE只对HTML起作用。
如果你启用了HTML最小化功能，当你的HTML源代码通过星盾提供服务时，你不会看到SSE标签。
在这种情况下，SSE 仍将发挥作用，因为星盾的 HTML 缩减和 SSE 功能是在资源通过我们的网络传输给我们时即时发生的。当资源通过我们的网络移动到访问者的计算机上时，SSE 仍会发挥作用。
 */
func (c *StarshieldClient) GetServerSideExcludeSetting(request *starshield.GetServerSideExcludeSettingRequest) (*starshield.GetServerSideExcludeSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetServerSideExcludeSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 多指标的带宽图。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) InstanceBandwidthMultiDateHistogram(request *starshield.InstanceBandwidthMultiDateHistogramRequest) (*starshield.InstanceBandwidthMultiDateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.InstanceBandwidthMultiDateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建页面规则 */
func (c *StarshieldClient) CreatePageRule(request *starshield.CreatePageRuleRequest) (*starshield.CreatePageRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CreatePageRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* SSL对访问者的连接进行加密，并保护信用卡号码和其他进出网站的个人数据。
SSL最多需要5分钟才能完全激活。需要在星盾激活你的根域或www域。
Off，访客和星盾之间没有SSL，星盾和你的Web服务器之间也没有SSL（所有HTTP流量）。
Flexible, 访客和星盾之间的 SSL -- 访客在你的网站上看到 HTTPS，但星盾和你的 Web 服务器之间没有 SSL。您不需要在您的 Web 服务器上安装 SSL 证书，但您的访客仍会看到启用 HTTPS 的网站。
Full, 访客和星盾之间的 SSL -- 访客在你的网站上看到 HTTPS，以及星盾和你的 Web 服务器之间的 SSL。您至少需要有自己的 SSL 证书或自签名的证书。
Full (Strict), 访客和星盾之间的 SSL -- 访客在您的网站上看到 HTTPS，以及星盾和您的 Web 服务器之间的 SSL。你需要在你的网络服务器上安装一个有效的SSL证书。
这个证书必须由一个证书机构签署，有一个在未来的到期日，并为请求的域名（主机名）作出回应。
 */
func (c *StarshieldClient) ChangeSSLSetting(request *starshield.ChangeSSLSettingRequest) (*starshield.ChangeSSLSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeSSLSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 套餐实例列表信息查询 */
func (c *StarshieldClient) DescribeInstances(request *starshield.DescribeInstancesRequest) (*starshield.DescribeInstancesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.DescribeInstancesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取HTTP2设置的状态 */
func (c *StarshieldClient) GetHTTP2Setting(request *starshield.GetHTTP2SettingRequest) (*starshield.GetHTTP2SettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetHTTP2SettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 列出域的日志推送作业 */
func (c *StarshieldClient) ListLogpushJobs(request *starshield.ListLogpushJobsRequest) (*starshield.ListLogpushJobsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ListLogpushJobsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/*  */
func (c *StarshieldClient) UpdateDNSRecord(request *starshield.UpdateDNSRecordRequest) (*starshield.UpdateDNSRecordResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.UpdateDNSRecordResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 通过指定主机、关联的缓存标记或前缀，从星盾的缓存中精确删除一个或多个文件。
注意，缓存标记、主机和前缀清除每24小时的速率限制为30000次清除API调用。一次API调用最多可以清除30个标记、主机或前缀。
对于需要以更大容量进行清除的客户，可以提高此速率限制。
 */
func (c *StarshieldClient) PurgeFilesByCache_TagsAndHostOrPrefix(request *starshield.PurgeFilesByCache_TagsAndHostOrPrefixRequest) (*starshield.PurgeFilesByCache_TagsAndHostOrPrefixResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.PurgeFilesByCache_TagsAndHostOrPrefixResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* Bot日期直方图. */
func (c *StarshieldClient) BotDateHistogram(request *starshield.BotDateHistogramRequest) (*starshield.BotDateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.BotDateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 从星盾的缓存中删除所有文件 */
func (c *StarshieldClient) PurgeAllFiles(request *starshield.PurgeAllFilesRequest) (*starshield.PurgeAllFilesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.PurgeAllFilesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 开启/关闭HTTP3 */
func (c *StarshieldClient) ChangeHTTP3Setting(request *starshield.ChangeHTTP3SettingRequest) (*starshield.ChangeHTTP3SettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeHTTP3SettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 按响应带宽统计，返回日期直方图。 */
func (c *StarshieldClient) CacheDateHistogramBandwidth(request *starshield.CacheDateHistogramBandwidthRequest) (*starshield.CacheDateHistogramBandwidthResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CacheDateHistogramBandwidthResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/*  */
func (c *StarshieldClient) DeleteDNSRecord(request *starshield.DeleteDNSRecordRequest) (*starshield.DeleteDNSRecordResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.DeleteDNSRecordResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 套餐包列表查询 */
func (c *StarshieldClient) DescribePackages(request *starshield.DescribePackagesRequest) (*starshield.DescribePackagesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.DescribePackagesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 自动将移动设备上的访问者重定向到一个移动优化的子域上 */
func (c *StarshieldClient) GetMobileRedirectSetting(request *starshield.GetMobileRedirectSettingRequest) (*starshield.GetMobileRedirectSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetMobileRedirectSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 剥离元数据并压缩你的图像，以加快页面加载时间。
Basic（无损），减少PNG、JPEG和GIF文件的大小 - 对视觉质量没有影响。
Basic+JPEG（有损），进一步减少JPEG文件的大小，以加快图像加载。
较大的JPEG文件被转换为渐进式图像，首先加载较低分辨率的图像，最后是较高的分辨率版本。
不建议用于高像素的摄影网站。
 */
func (c *StarshieldClient) ChangePolishSetting(request *starshield.ChangePolishSettingRequest) (*starshield.ChangePolishSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangePolishSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取有关单个防火墙包的信息 */
func (c *StarshieldClient) FirewallPackageDetails(request *starshield.FirewallPackageDetailsRequest) (*starshield.FirewallPackageDetailsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.FirewallPackageDetailsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 自动优化移动设备上网站访问者的图像加载 */
func (c *StarshieldClient) GetMirageSetting(request *starshield.GetMirageSettingRequest) (*starshield.GetMirageSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetMirageSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 替换页面规则。最终规则将与此请求传递的数据完全匹配。 */
func (c *StarshieldClient) UpdatePageRule(request *starshield.UpdatePageRuleRequest) (*starshield.UpdatePageRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.UpdatePageRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 一个用于TLS终端的密码允许列表。这些密码必须是BoringSSL的格式。 */
func (c *StarshieldClient) GetCiphersSetting(request *starshield.GetCiphersSettingRequest) (*starshield.GetCiphersSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetCiphersSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* bps */
func (c *StarshieldClient) BpsInstance(request *starshield.BpsInstanceRequest) (*starshield.BpsInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.BpsInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 当请求图像的客户端支持WebP图像编解码器时。当WebP比原始图像格式具有性能优势时，星盾将提供WebP版本的图像。
 */
func (c *StarshieldClient) GetWebPSetting(request *starshield.GetWebPSettingRequest) (*starshield.GetWebPSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetWebPSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 流量图。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) ZoneTrafficDateHistogram(request *starshield.ZoneTrafficDateHistogramRequest) (*starshield.ZoneTrafficDateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ZoneTrafficDateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取单个规则组 */
func (c *StarshieldClient) RuleGroupDetails(request *starshield.RuleGroupDetailsRequest) (*starshield.RuleGroupDetailsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.RuleGroupDetailsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 搜索、列出和排序包中包含的规则组 */
func (c *StarshieldClient) ListRuleGroups(request *starshield.ListRuleGroupsRequest) (*starshield.ListRuleGroupsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ListRuleGroupsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 检查是否存在作业，处理该目标。 */
func (c *StarshieldClient) CheckDestinationExists(request *starshield.CheckDestinationExistsRequest) (*starshield.CheckDestinationExistsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CheckDestinationExistsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建DNS记录 */
func (c *StarshieldClient) CreateDNSRecord(request *starshield.CreateDNSRecordRequest) (*starshield.CreateDNSRecordResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CreateDNSRecordResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 星盾节点信息 */
func (c *StarshieldClient) Ips(request *starshield.IpsRequest) (*starshield.IpsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.IpsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 如果你需要对你的网站进行修改，开发模式可以让你暂时进入网站的开发模式。这将绕过星盾的加速缓存，并降低您的网站速度。
但如果您正在对可缓存的内容（如图片、css 或 JavaScript）进行更改，并希望立即看到这些更改，这时就很有用。一旦进入，开发模式将持续3小时，然后自动切换关闭。
 */
func (c *StarshieldClient) GetDevelopmentModeSetting(request *starshield.GetDevelopmentModeSettingRequest) (*starshield.GetDevelopmentModeSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetDevelopmentModeSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* WebSockets是客户端和源服务器之间持续的开放连接。在WebSockets连接中，客户端和源服务器可以来回传递数据，而不需要重新建立会话。
这使得在WebSockets连接中的数据交换非常快。WebSockets经常被用于实时应用，如即时聊天和游戏。
 */
func (c *StarshieldClient) GetWebSocketsSetting(request *starshield.GetWebSocketsSettingRequest) (*starshield.GetWebSocketsSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetWebSocketsSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 上传SSL证书的新私钥和/或PEM/CRT。
注意，更新sni_custom证书的配置将导致返回新的资源id，并删除之前的资源id。
 */
func (c *StarshieldClient) EditSSLConfiguration(request *starshield.EditSSLConfigurationRequest) (*starshield.EditSSLConfigurationResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.EditSSLConfigurationResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量更新域的设置 */
func (c *StarshieldClient) EditZoneSettingsInfo(request *starshield.EditZoneSettingsInfoRequest) (*starshield.EditZoneSettingsInfoResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.EditZoneSettingsInfoResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 启用后，热链路保护选项可确保其他网站无法通过建立使用您网站上托管的图像的页面来占用您的带宽。只要您的网站上的图像请求被星盾选中，我们就会检查以确保这不是其他网站在请求它们。
人们仍然能够从你的网页上下载和查看图像，但其他网站将无法窃取它们用于自己的网页。
 */
func (c *StarshieldClient) ChangeHotlinkProtectionSetting(request *starshield.ChangeHotlinkProtectionSettingRequest) (*starshield.ChangeHotlinkProtectionSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeHotlinkProtectionSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取你的网站自动最小化资产的配置 */
func (c *StarshieldClient) GetMinifySetting(request *starshield.GetMinifySettingRequest) (*starshield.GetMinifySettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetMinifySettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* TopK域名的带宽图。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) BandwidthDateHistogramTopK(request *starshield.BandwidthDateHistogramTopKRequest) (*starshield.BandwidthDateHistogramTopKResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.BandwidthDateHistogramTopKResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 对于给定域，列出所有激活的证书包 */
func (c *StarshieldClient) ListCertificatePacks(request *starshield.ListCertificatePacksRequest) (*starshield.ListCertificatePacksResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ListCertificatePacksResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 95峰值带宽。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) ZoneBandwidthP95(request *starshield.ZoneBandwidthP95Request) (*starshield.ZoneBandwidthP95Response, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ZoneBandwidthP95Response{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 浏览器缓存TTL（以秒为单位）指定星盾缓存资源将在访问者的计算机上保留多长时间。星盾将遵守服务器指定的任何更长时间。
 */
func (c *StarshieldClient) GetBrowserCacheTTLSetting(request *starshield.GetBrowserCacheTTLSettingRequest) (*starshield.GetBrowserCacheTTLSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetBrowserCacheTTLSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除存在的域名 */
func (c *StarshieldClient) DeleteZone(request *starshield.DeleteZoneRequest) (*starshield.DeleteZoneResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.DeleteZoneResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 带宽图。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) ZoneBandwidthDateHistogram(request *starshield.ZoneBandwidthDateHistogramRequest) (*starshield.ZoneBandwidthDateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ZoneBandwidthDateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建新过滤器 */
func (c *StarshieldClient) CreateFilters(request *starshield.CreateFiltersRequest) (*starshield.CreateFiltersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CreateFiltersResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 图像调整为通过星盾的网络提供的图像提供按需调整、转换和优化。 */
func (c *StarshieldClient) GetImageResizingSetting(request *starshield.GetImageResizingSettingRequest) (*starshield.GetImageResizingSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetImageResizingSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 如果你需要对你的网站进行修改，开发模式可以让你暂时进入网站的开发模式。这将绕过星盾的加速缓存，并降低您的网站速度。
但如果您正在对可缓存的内容（如图片、css 或 JavaScript）进行更改，并希望立即看到这些更改，这时就很有用。一旦进入，开发模式将持续3小时，然后自动切换关闭。
 */
func (c *StarshieldClient) ChangeDevelopmentModeSetting(request *starshield.ChangeDevelopmentModeSettingRequest) (*starshield.ChangeDevelopmentModeSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeDevelopmentModeSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除日志推送作业 */
func (c *StarshieldClient) DeleteLogpushJob(request *starshield.DeleteLogpushJobRequest) (*starshield.DeleteLogpushJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.DeleteLogpushJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 缓存级别的功能是基于设置的级别。
basic设置将缓存大多数静态资源（即css、图片和JavaScript）。
simplified设置将在提供缓存的资源时忽略查询字符串。
aggressive设置将缓存所有的静态资源，包括有查询字符串的资源。
 */
func (c *StarshieldClient) ChangeCacheLevelSetting(request *starshield.ChangeCacheLevelSettingRequest) (*starshield.ChangeCacheLevelSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeCacheLevelSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取当前Always Online的配置。当Always Online开启时，在你的源站离线期间，星盾会提供已缓存过的页面。 */
func (c *StarshieldClient) GetAlwaysOnlineSetting(request *starshield.GetAlwaysOnlineSettingRequest) (*starshield.GetAlwaysOnlineSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetAlwaysOnlineSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 多指标的请求量图。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) ZoneRequestMultiDateHistogram(request *starshield.ZoneRequestMultiDateHistogramRequest) (*starshield.ZoneRequestMultiDateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ZoneRequestMultiDateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 实例Spectrum应用流量统计. */
func (c *StarshieldClient) InstanceTrafficDateHistogram4Pa(request *starshield.InstanceTrafficDateHistogram4PaRequest) (*starshield.InstanceTrafficDateHistogram4PaResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.InstanceTrafficDateHistogram4PaResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* Individual information about a rule */
func (c *StarshieldClient) RuleDetails(request *starshield.RuleDetailsRequest) (*starshield.RuleDetailsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.RuleDetailsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 列出、搜索和筛选所有自定义SSL证书。
 */
func (c *StarshieldClient) ListSSLConfigurations(request *starshield.ListSSLConfigurationsRequest) (*starshield.ListSSLConfigurationsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ListSSLConfigurationsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 列出、搜索、排序和筛选您的域 */
func (c *StarshieldClient) ListZones(request *starshield.ListZonesRequest) (*starshield.ListZonesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ListZonesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 检查实例名称 */
func (c *StarshieldClient) CheckInstancesName(request *starshield.CheckInstancesNameRequest) (*starshield.CheckInstancesNameResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CheckInstancesNameResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新规则。 */
func (c *StarshieldClient) UpdateRule(request *starshield.UpdateRuleRequest) (*starshield.UpdateRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.UpdateRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 浏览器缓存TTL（以秒为单位）指定星盾缓存资源将在访问者的计算机上保留多长时间。星盾将遵守服务器指定的任何更长时间。
 */
func (c *StarshieldClient) ChangeBrowserCacheTTLSetting(request *starshield.ChangeBrowserCacheTTLSettingRequest) (*starshield.ChangeBrowserCacheTTLSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeBrowserCacheTTLSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 检索域的防火墙包 */
func (c *StarshieldClient) ListFirewallPackages(request *starshield.ListFirewallPackagesRequest) (*starshield.ListFirewallPackagesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ListFirewallPackagesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 带宽峰值。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) ZoneBandwidthMax(request *starshield.ZoneBandwidthMaxRequest) (*starshield.ZoneBandwidthMaxResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ZoneBandwidthMaxResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 为该域启用加密TLS 1.3功能。 */
func (c *StarshieldClient) GetZoneEnableTLS1_3Setting(request *starshield.GetZoneEnableTLS1_3SettingRequest) (*starshield.GetZoneEnableTLS1_3SettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetZoneEnableTLS1_3SettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 带宽图。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) InstanceBandwidthDateHistogram(request *starshield.InstanceBandwidthDateHistogramRequest) (*starshield.InstanceBandwidthDateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.InstanceBandwidthDateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* TLS 客户端授权要求星盾使用客户端证书连接到您的源服务器（Enterprise Only）。 */
func (c *StarshieldClient) GetTLSClientAuthSetting(request *starshield.GetTLSClientAuthSettingRequest) (*starshield.GetTLSClientAuthSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetTLSClientAuthSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 域的每秒指标，request/bandwidth/waf/l7ddos/firewallRules */
func (c *StarshieldClient) Xps(request *starshield.XpsRequest) (*starshield.XpsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.XpsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新自定义页面URL */
func (c *StarshieldClient) UpdateCustomPageURL(request *starshield.UpdateCustomPageURLRequest) (*starshield.UpdateCustomPageURLResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.UpdateCustomPageURLResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取页面规则列表 */
func (c *StarshieldClient) ListPageRules(request *starshield.ListPageRulesRequest) (*starshield.ListPageRulesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ListPageRulesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 开启/关闭HTTP2 */
func (c *StarshieldClient) ChangeHTTP2Setting(request *starshield.ChangeHTTP2SettingRequest) (*starshield.ChangeHTTP2SettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeHTTP2SettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建域 */
func (c *StarshieldClient) CreateZone(request *starshield.CreateZoneRequest) (*starshield.CreateZoneResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CreateZoneResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/*  */
func (c *StarshieldClient) ListAvailablePageRuleSetting(request *starshield.ListAvailablePageRuleSettingRequest) (*starshield.ListAvailablePageRuleSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ListAvailablePageRuleSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取Pseudo IPv4(IPv6到IPv4的转换服务)的设置 */
func (c *StarshieldClient) GetPseudoIPv4Setting(request *starshield.GetPseudoIPv4SettingRequest) (*starshield.GetPseudoIPv4SettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetPseudoIPv4SettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 域名带宽列表，按带宽降序排列。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) InstanceBandwidthList(request *starshield.InstanceBandwidthListRequest) (*starshield.InstanceBandwidthListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.InstanceBandwidthListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* WebSockets是客户端和源服务器之间持续的开放连接。在WebSockets连接中，客户端和源服务器可以来回传递数据，而不需要重新建立会话。
这使得在WebSockets连接中的数据交换非常快。WebSockets经常被用于实时应用，如即时聊天和游戏。
 */
func (c *StarshieldClient) ChangeWebSocketsSetting(request *starshield.ChangeWebSocketsSettingRequest) (*starshield.ChangeWebSocketsSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeWebSocketsSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 星盾将代源服务器上任何 502、504 错误的客户错误页面，而不是显示默认的星盾错误页面。这不适用于 522 错误，并且仅限于企业级域。
 */
func (c *StarshieldClient) GetEnableErrorPagesOnSetting(request *starshield.GetEnableErrorPagesOnSettingRequest) (*starshield.GetEnableErrorPagesOnSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetEnableErrorPagesOnSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 平均峰值带宽。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) InstanceBandwidthAvg(request *starshield.InstanceBandwidthAvgRequest) (*starshield.InstanceBandwidthAvgResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.InstanceBandwidthAvgResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 为你的网站选择适当的安全配置文件，这将自动调整每个安全设置。如果你选择定制一个单独的安全设置，该配置文件将成为自定义。
 */
func (c *StarshieldClient) ChangeSecurityLevelSetting(request *starshield.ChangeSecurityLevelSettingRequest) (*starshield.ChangeSecurityLevelSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeSecurityLevelSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取域的通用SSL证书设置 */
func (c *StarshieldClient) UniversalSSLSettingsDetails(request *starshield.UniversalSSLSettingsDetailsRequest) (*starshield.UniversalSSLSettingsDetailsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.UniversalSSLSettingsDetailsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 为域创建新的日志推送作业 */
func (c *StarshieldClient) CreateLogpushJob(request *starshield.CreateLogpushJobRequest) (*starshield.CreateLogpushJobResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CreateLogpushJobResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 允许客户继续在我们发送给源的头中使用真正的客户IP。这只限于企业级域。 */
func (c *StarshieldClient) ChangeTrueClientIPSetting(request *starshield.ChangeTrueClientIPSettingRequest) (*starshield.ChangeTrueClientIPSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeTrueClientIPSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 在所有启用星盾的子域上启用 IPv6。 */
func (c *StarshieldClient) GetIPv6Setting(request *starshield.GetIPv6SettingRequest) (*starshield.GetIPv6SettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetIPv6SettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* TopK域名的流量图。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) TrafficDateHistogramTopK(request *starshield.TrafficDateHistogramTopKRequest) (*starshield.TrafficDateHistogramTopKResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.TrafficDateHistogramTopKResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 按防火墙事件数量统计，返回日期直方图. */
func (c *StarshieldClient) FirewallDateHistogram(request *starshield.FirewallDateHistogramRequest) (*starshield.FirewallDateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.FirewallDateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* Rocket Loader是一个通用的异步JavaScript优化，它优先渲染你的内容同时异步加载你的网站的Javascript。
开启Rocket Loader将立即改善网页的渲染时间，有时以首次绘制时间（TTFP）以及window.onload时间（假设页面上有JavaScript）来衡量，这对你的搜索排名会产生积极影响。
当打开时，Rocket Loader将自动推迟加载你的HTML中引用的所有Javascript，而不需要配置。
 */
func (c *StarshieldClient) GetRocketLoaderSetting(request *starshield.GetRocketLoaderSettingRequest) (*starshield.GetRocketLoaderSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetRocketLoaderSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除页面规则 */
func (c *StarshieldClient) DeletePageRule(request *starshield.DeletePageRuleRequest) (*starshield.DeletePageRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.DeletePageRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 当请求资产的客户端支持brotli压缩算法时，星盾将提供资产的brotli压缩版本。 */
func (c *StarshieldClient) ChangeBrotliSetting(request *starshield.ChangeBrotliSettingRequest) (*starshield.ChangeBrotliSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeBrotliSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 请求下单 */
func (c *StarshieldClient) SubmitOrder(request *starshield.SubmitOrderRequest) (*starshield.SubmitOrderResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.SubmitOrderResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 启用IP地理定位，让星盾对您网站的访问者进行地理定位，并将国家代码传递给您。 */
func (c *StarshieldClient) ChangeIPGeolocationSetting(request *starshield.ChangeIPGeolocationSettingRequest) (*starshield.ChangeIPGeolocationSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeIPGeolocationSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* Privacy Pass是一个由Privacy Pass团队开发的浏览器扩展，旨在改善您的访客的浏览体验。启用Privacy Pass将减少显示给你的访客的验证码的数量。
 */
func (c *StarshieldClient) ChangePrivacyPassSetting(request *starshield.ChangePrivacyPassSettingRequest) (*starshield.ChangePrivacyPassSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangePrivacyPassSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* Privacy Pass是一个由Privacy Pass团队开发的浏览器扩展，旨在改善您的访客的浏览体验。启用Privacy Pass将减少显示给你的访客的验证码的数量。
 */
func (c *StarshieldClient) GetPrivacyPassSetting(request *starshield.GetPrivacyPassSettingRequest) (*starshield.GetPrivacyPassSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetPrivacyPassSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 按响应带宽统计。获取内容类型、路径、主机、设备类型、国家/地区、状态代码的TopK. */
func (c *StarshieldClient) CacheBandwidthTopK(request *starshield.CacheBandwidthTopKRequest) (*starshield.CacheBandwidthTopKResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CacheBandwidthTopKResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 为该域启用自动HTTPS重写功能。 */
func (c *StarshieldClient) ChangeAutomaticHTTPSRewritesSetting(request *starshield.ChangeAutomaticHTTPSRewritesSettingRequest) (*starshield.ChangeAutomaticHTTPSRewritesSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeAutomaticHTTPSRewritesSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 按域名的TopK总流量。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) TrafficTopK(request *starshield.TrafficTopKRequest) (*starshield.TrafficTopKResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.TrafficTopKResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 开启/关闭 0-RTT */
func (c *StarshieldClient) Change0_RTTSessionResumptionSetting(request *starshield.Change0_RTTSessionResumptionSettingRequest) (*starshield.Change0_RTTSessionResumptionSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.Change0_RTTSessionResumptionSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 对所有使用"http"的URL的请求，用301重定向到相应的 "https" URL。如果你只想对一个子集的请求进行重定向，可以考虑创建一个"Always use HTTPS"的页面规则。
 */
func (c *StarshieldClient) GetAlwaysUseHTTPSSetting(request *starshield.GetAlwaysUseHTTPSSettingRequest) (*starshield.GetAlwaysUseHTTPSSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetAlwaysUseHTTPSSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 套餐包详情查询 */
func (c *StarshieldClient) DescribePackage(request *starshield.DescribePackageRequest) (*starshield.DescribePackageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.DescribePackageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 列出、搜索、排序和筛选域的DNS记录。 */
func (c *StarshieldClient) ListDNSRecords(request *starshield.ListDNSRecordsRequest) (*starshield.ListDNSRecordsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ListDNSRecordsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 指定访问者在成功完成一项挑战（如验证码）后允许访问您的网站多长时间。在TTL过期后，访问者将不得不完成新的挑战。我们建议设置为15-45分钟，并将尝试遵守任何超过45分钟的设置。
 */
func (c *StarshieldClient) GetChallengeTTLSetting(request *starshield.GetChallengeTTLSettingRequest) (*starshield.GetChallengeTTLSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetChallengeTTLSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 开启BOT */
func (c *StarshieldClient) OpenFirewallBot(request *starshield.OpenFirewallBotRequest) (*starshield.OpenFirewallBotResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.OpenFirewallBotResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建规则集 */
func (c *StarshieldClient) CreateRuleSet(request *starshield.CreateRuleSetRequest) (*starshield.CreateRuleSetResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CreateRuleSetResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 启用IP地理定位，让星盾对您网站的访问者进行地理定位，并将国家代码传递给您。 */
func (c *StarshieldClient) GetIPGeolocationSetting(request *starshield.GetIPGeolocationSettingRequest) (*starshield.GetIPGeolocationSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetIPGeolocationSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 访问日志. */
func (c *StarshieldClient) AccessLog(request *starshield.AccessLogRequest) (*starshield.AccessLogResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.AccessLogResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* Value of the 0-RTT setting */
func (c *StarshieldClient) Get0_RTTSessionResumptionSetting(request *starshield.Get0_RTTSessionResumptionSettingRequest) (*starshield.Get0_RTTSessionResumptionSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.Get0_RTTSessionResumptionSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 按请求或响应带宽统计，返回日期直方图. */
func (c *StarshieldClient) BandwidthTrend(request *starshield.BandwidthTrendRequest) (*starshield.BandwidthTrendResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.BandwidthTrendResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* Spectrum应用带宽统计. */
func (c *StarshieldClient) SpectrumAppBandwidthDateHistogram(request *starshield.SpectrumAppBandwidthDateHistogramRequest) (*starshield.SpectrumAppBandwidthDateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.SpectrumAppBandwidthDateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 如果你的网站上有敏感的内容，你想让真正的访问者看到，但你想对可疑的访问者进行隐藏，你所要做的就是用星盾SSE标签来包装这些内容。
用下面的SSE标签包住任何你想不让可疑访客看到的内容，<!--sse--><!--/sse-->。
例如，<!--sse-->不好的访问者不会看到我的电话号码，555-555-5555<!--/sse-->。注意，SSE只对HTML起作用。
如果你启用了HTML最小化功能，当你的HTML源代码通过星盾提供服务时，你不会看到SSE标签。
在这种情况下，SSE 仍将发挥作用，因为星盾的 HTML 缩减和 SSE 功能是在资源通过我们的网络传输给我们时即时发生的。当资源通过我们的网络移动到访问者的计算机上时，SSE 仍会发挥作用。
 */
func (c *StarshieldClient) ChangeServerSideExcludeSetting(request *starshield.ChangeServerSideExcludeSettingRequest) (*starshield.ChangeServerSideExcludeSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeServerSideExcludeSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更改异常检测类型WAF规则包的灵敏度和操作 */
func (c *StarshieldClient) EditFirewallPackage(request *starshield.EditFirewallPackageRequest) (*starshield.EditFirewallPackageResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.EditFirewallPackageResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 按防火墙事件数量统计。获取IP地址、用户代理、路径、主机、国家/地区、HTTP方法的TopK。 */
func (c *StarshieldClient) FirewallTopK(request *starshield.FirewallTopKRequest) (*starshield.FirewallTopKResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.FirewallTopKResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 总请求量。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) ZoneRequestSum(request *starshield.ZoneRequestSumRequest) (*starshield.ZoneRequestSumResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ZoneRequestSumResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 活动日志. */
func (c *StarshieldClient) FirewallActivityLog(request *starshield.FirewallActivityLogRequest) (*starshield.FirewallActivityLogResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.FirewallActivityLogResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 套餐实例续费回调查询 */
func (c *StarshieldClient) SelectDetailList(request *starshield.SelectDetailListRequest) (*starshield.SelectDetailListResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.SelectDetailListResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 按请求次数统计，返回日期直方图. */
func (c *StarshieldClient) DateHistogram(request *starshield.DateHistogramRequest) (*starshield.DateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.DateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 关闭BOT */
func (c *StarshieldClient) CloseFirewallBot(request *starshield.CloseFirewallBotRequest) (*starshield.CloseFirewallBotResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CloseFirewallBotResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 浏览器完整性检查与不良行为检查类似，寻找最常被垃圾邮件发送者滥用的常见HTTP头，并拒绝他们访问您的页面。它还会对没有用户代理或非标准用户代理（也是滥用机器人、爬虫或访客常用的）的访客提出挑战质询。
 */
func (c *StarshieldClient) ChangeBrowserCheckSetting(request *starshield.ChangeBrowserCheckSettingRequest) (*starshield.ChangeBrowserCheckSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeBrowserCheckSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 多指标的流量图。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) ZoneTrafficMultiDateHistogram(request *starshield.ZoneTrafficMultiDateHistogramRequest) (*starshield.ZoneTrafficMultiDateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ZoneTrafficMultiDateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 设置Pseudo IPv4(IPv6到IPv4的转换服务) */
func (c *StarshieldClient) ChangePseudoIPv4Setting(request *starshield.ChangePseudoIPv4SettingRequest) (*starshield.ChangePseudoIPv4SettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangePseudoIPv4SettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 允许客户继续在我们发送给源的头中使用真正的客户IP。这只限于企业级域。 */
func (c *StarshieldClient) GetTrueClientIPSetting(request *starshield.GetTrueClientIPSettingRequest) (*starshield.GetTrueClientIPSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetTrueClientIPSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 在你的网页上对电子邮件地址进行加密，以防止机器人入侵，同时保持它们对人类可见。 */
func (c *StarshieldClient) ChangeEmailObfuscationSetting(request *starshield.ChangeEmailObfuscationSettingRequest) (*starshield.ChangeEmailObfuscationSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeEmailObfuscationSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 按请求次数统计。获取内容类型、路径、主机、设备类型、国家/地区、状态代码的TopK. */
func (c *StarshieldClient) CacheTopK(request *starshield.CacheTopKRequest) (*starshield.CacheTopKResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.CacheTopKResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新一个单独的现有防火墙规则。 */
func (c *StarshieldClient) UpdateIndividualFirewallRule(request *starshield.UpdateIndividualFirewallRuleRequest) (*starshield.UpdateIndividualFirewallRuleResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.UpdateIndividualFirewallRuleResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 带宽峰值。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) InstanceBandwidthMax(request *starshield.InstanceBandwidthMaxRequest) (*starshield.InstanceBandwidthMaxResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.InstanceBandwidthMaxResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 更新规则组的状态 */
func (c *StarshieldClient) EditRuleGroup(request *starshield.EditRuleGroupRequest) (*starshield.EditRuleGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.EditRuleGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 一个用于TLS终端的密码允许列表。这些密码必须是BoringSSL的格式。 */
func (c *StarshieldClient) ChangeCiphersSetting(request *starshield.ChangeCiphersSettingRequest) (*starshield.ChangeCiphersSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeCiphersSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 当请求图像的客户端支持WebP图像编解码器时。当WebP比原始图像格式具有性能优势时，星盾将提供WebP版本的图像。
 */
func (c *StarshieldClient) ChangeWebPSetting(request *starshield.ChangeWebPSettingRequest) (*starshield.ChangeWebPSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeWebPSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 启用后，热链路保护选项可确保其他网站无法通过建立使用您网站上托管的图像的页面来占用您的带宽。只要您的网站上的图像请求被星盾选中，我们就会检查以确保这不是其他网站在请求它们。
人们仍然能够从你的网页上下载和查看图像，但其他网站将无法窃取它们用于自己的网页。
 */
func (c *StarshieldClient) GetHotlinkProtectionSetting(request *starshield.GetHotlinkProtectionSettingRequest) (*starshield.GetHotlinkProtectionSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetHotlinkProtectionSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* WAF检查对您网站的HTTP请求。它检查GET和POST请求，并应用规则来帮助从合法的网站访问者中过滤出非法流量。星盾 WAF 检查网站地址或 URL 以检测任何不正常的东西。
如果星盾 WAF确定了可疑的用户行为。那么 WAF 将用一个页面 "挑战 "网络访客，要求他们成功提交验证码以继续其行动。
如果挑战失败，行动将被停止。这意味着 星盾 的 WAF 将在任何被识别为非法的流量到达您的源网络服务器之前将其阻止。
 */
func (c *StarshieldClient) ChangeWebApplicationFirewallWAFSetting(request *starshield.ChangeWebApplicationFirewallWAFSettingRequest) (*starshield.ChangeWebApplicationFirewallWAFSettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ChangeWebApplicationFirewallWAFSettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 从域中删除SSL证书。 */
func (c *StarshieldClient) DeleteSSLConfiguration(request *starshield.DeleteSSLConfigurationRequest) (*starshield.DeleteSSLConfigurationResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.DeleteSSLConfigurationResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 包内的搜索、排序和筛选规则 */
func (c *StarshieldClient) ListRules(request *starshield.ListRulesRequest) (*starshield.ListRulesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.ListRulesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 多指标的请求量图。查询范围最近6个月、查询最大跨度1个月。 */
func (c *StarshieldClient) InstanceRequestMultiDateHistogram(request *starshield.InstanceRequestMultiDateHistogramRequest) (*starshield.InstanceRequestMultiDateHistogramResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.InstanceRequestMultiDateHistogramResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取HTTP3设置的状态 */
func (c *StarshieldClient) GetHTTP3Setting(request *starshield.GetHTTP3SettingRequest) (*starshield.GetHTTP3SettingResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &starshield.GetHTTP3SettingResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

