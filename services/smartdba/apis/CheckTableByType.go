// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    smartdba "github.com/lshuining/jdcloud-sdk-go/services/smartdba/models"
)

type CheckTableByTypeRequest struct {

    core.JDCloudRequest

    /* 地域代码  */
    RegionId string `json:"regionId"`

    /* 实例ID  */
    InstanceGid string `json:"instanceGid"`

    /* 诊断类型id  */
    CheckTypeId int `json:"checkTypeId"`

    /* 显示数据的页码，默认为1，取值范围：[-1,∞)  pageIndex 为-1时，返回所有数据页码 (Optional) */
    PageIndex *int `json:"pageIndex"`

    /* 每页显示的数据条数，默认为10，取值范围：[1,100] (Optional) */
    PageSize *int `json:"pageSize"`
}

/*
 * param regionId: 地域代码 (Required)
 * param instanceGid: 实例ID (Required)
 * param checkTypeId: 诊断类型id (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCheckTableByTypeRequest(
    regionId string,
    instanceGid string,
    checkTypeId int,
) *CheckTableByTypeRequest {

	return &CheckTableByTypeRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/instance/{instanceGid}/checkTables",
			Method:  "GET",
			Header:  nil,
			Version: "v2",
		},
        RegionId: regionId,
        InstanceGid: instanceGid,
        CheckTypeId: checkTypeId,
	}
}

/*
 * param regionId: 地域代码 (Required)
 * param instanceGid: 实例ID (Required)
 * param checkTypeId: 诊断类型id (Required)
 * param pageIndex: 显示数据的页码，默认为1，取值范围：[-1,∞)  pageIndex 为-1时，返回所有数据页码 (Optional)
 * param pageSize: 每页显示的数据条数，默认为10，取值范围：[1,100] (Optional)
 */
func NewCheckTableByTypeRequestWithAllParams(
    regionId string,
    instanceGid string,
    checkTypeId int,
    pageIndex *int,
    pageSize *int,
) *CheckTableByTypeRequest {

    return &CheckTableByTypeRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instance/{instanceGid}/checkTables",
            Method:  "GET",
            Header:  nil,
            Version: "v2",
        },
        RegionId: regionId,
        InstanceGid: instanceGid,
        CheckTypeId: checkTypeId,
        PageIndex: pageIndex,
        PageSize: pageSize,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCheckTableByTypeRequestWithoutParam() *CheckTableByTypeRequest {

    return &CheckTableByTypeRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/instance/{instanceGid}/checkTables",
            Method:  "GET",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param regionId: 地域代码(Required) */
func (r *CheckTableByTypeRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param instanceGid: 实例ID(Required) */
func (r *CheckTableByTypeRequest) SetInstanceGid(instanceGid string) {
    r.InstanceGid = instanceGid
}

/* param checkTypeId: 诊断类型id(Required) */
func (r *CheckTableByTypeRequest) SetCheckTypeId(checkTypeId int) {
    r.CheckTypeId = checkTypeId
}

/* param pageIndex: 显示数据的页码，默认为1，取值范围：[-1,∞)  pageIndex 为-1时，返回所有数据页码(Optional) */
func (r *CheckTableByTypeRequest) SetPageIndex(pageIndex int) {
    r.PageIndex = &pageIndex
}

/* param pageSize: 每页显示的数据条数，默认为10，取值范围：[1,100](Optional) */
func (r *CheckTableByTypeRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CheckTableByTypeRequest) GetRegionId() string {
    return r.RegionId
}

type CheckTableByTypeResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CheckTableByTypeResult `json:"result"`
}

type CheckTableByTypeResult struct {
    Data []smartdba.FieldList `json:"data"`
    TotalCount int `json:"totalCount"`
}