// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    nativecontainer "github.com/lshuining/jdcloud-sdk-go/services/nativecontainer/models"
)

type RebuildContainerRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* Container ID  */
    ContainerId string `json:"containerId"`

    /* 镜像名称 </br> 1. Docker Hub官方镜像通过类似nginx, mysql/mysql-server的名字指定 </br> </br> repository长度最大256个字符，tag最大128个字符，registry最大255个字符 </br> 下载镜像超时时间：10分钟  */
    Image string `json:"image"`

    /* 镜像仓库认证信息；使用Docker Hub和京东云CR的镜像不需要secret (Optional) */
    Secret *string `json:"secret"`

    /* 容器启动执行的命令, 如果不指定默认是镜像的ENTRYPOINT. 数组字符总长度范围：[0-256] (Optional) */
    Command []string `json:"command"`

    /* 容器启动执行命令的参数, 如果不指定默认是镜像的CMD. 数组字符总长度范围：[0-2048] (Optional) */
    Args []string `json:"args"`

    /* 容器是否分配tty。默认不分配 (Optional) */
    Tty *bool `json:"tty"`

    /* 容器的工作目录。如果不指定，默认是根目录（/），必须是绝对路径。字符长度范围：[0-1024] (Optional) */
    WorkingDir *string `json:"workingDir"`

    /* 容器执行的环境变量；如果和镜像中的环境变量Key相同，会覆盖镜像中的值；</br> 最大100对 (Optional) */
    Envs []nativecontainer.EnvVar `json:"envs"`
}

/*
 * param regionId: Region ID (Required)
 * param containerId: Container ID (Required)
 * param image: 镜像名称 </br> 1. Docker Hub官方镜像通过类似nginx, mysql/mysql-server的名字指定 </br> </br> repository长度最大256个字符，tag最大128个字符，registry最大255个字符 </br> 下载镜像超时时间：10分钟 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewRebuildContainerRequest(
    regionId string,
    containerId string,
    image string,
) *RebuildContainerRequest {

	return &RebuildContainerRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/containers/{containerId}:rebuild",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        ContainerId: containerId,
        Image: image,
	}
}

/*
 * param regionId: Region ID (Required)
 * param containerId: Container ID (Required)
 * param image: 镜像名称 </br> 1. Docker Hub官方镜像通过类似nginx, mysql/mysql-server的名字指定 </br> </br> repository长度最大256个字符，tag最大128个字符，registry最大255个字符 </br> 下载镜像超时时间：10分钟 (Required)
 * param secret: 镜像仓库认证信息；使用Docker Hub和京东云CR的镜像不需要secret (Optional)
 * param command: 容器启动执行的命令, 如果不指定默认是镜像的ENTRYPOINT. 数组字符总长度范围：[0-256] (Optional)
 * param args: 容器启动执行命令的参数, 如果不指定默认是镜像的CMD. 数组字符总长度范围：[0-2048] (Optional)
 * param tty: 容器是否分配tty。默认不分配 (Optional)
 * param workingDir: 容器的工作目录。如果不指定，默认是根目录（/），必须是绝对路径。字符长度范围：[0-1024] (Optional)
 * param envs: 容器执行的环境变量；如果和镜像中的环境变量Key相同，会覆盖镜像中的值；</br> 最大100对 (Optional)
 */
func NewRebuildContainerRequestWithAllParams(
    regionId string,
    containerId string,
    image string,
    secret *string,
    command []string,
    args []string,
    tty *bool,
    workingDir *string,
    envs []nativecontainer.EnvVar,
) *RebuildContainerRequest {

    return &RebuildContainerRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/containers/{containerId}:rebuild",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        ContainerId: containerId,
        Image: image,
        Secret: secret,
        Command: command,
        Args: args,
        Tty: tty,
        WorkingDir: workingDir,
        Envs: envs,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewRebuildContainerRequestWithoutParam() *RebuildContainerRequest {

    return &RebuildContainerRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/containers/{containerId}:rebuild",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *RebuildContainerRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param containerId: Container ID(Required) */
func (r *RebuildContainerRequest) SetContainerId(containerId string) {
    r.ContainerId = containerId
}

/* param image: 镜像名称 </br> 1. Docker Hub官方镜像通过类似nginx, mysql/mysql-server的名字指定 </br> </br> repository长度最大256个字符，tag最大128个字符，registry最大255个字符 </br> 下载镜像超时时间：10分钟(Required) */
func (r *RebuildContainerRequest) SetImage(image string) {
    r.Image = image
}

/* param secret: 镜像仓库认证信息；使用Docker Hub和京东云CR的镜像不需要secret(Optional) */
func (r *RebuildContainerRequest) SetSecret(secret string) {
    r.Secret = &secret
}

/* param command: 容器启动执行的命令, 如果不指定默认是镜像的ENTRYPOINT. 数组字符总长度范围：[0-256](Optional) */
func (r *RebuildContainerRequest) SetCommand(command []string) {
    r.Command = command
}

/* param args: 容器启动执行命令的参数, 如果不指定默认是镜像的CMD. 数组字符总长度范围：[0-2048](Optional) */
func (r *RebuildContainerRequest) SetArgs(args []string) {
    r.Args = args
}

/* param tty: 容器是否分配tty。默认不分配(Optional) */
func (r *RebuildContainerRequest) SetTty(tty bool) {
    r.Tty = &tty
}

/* param workingDir: 容器的工作目录。如果不指定，默认是根目录（/），必须是绝对路径。字符长度范围：[0-1024](Optional) */
func (r *RebuildContainerRequest) SetWorkingDir(workingDir string) {
    r.WorkingDir = &workingDir
}

/* param envs: 容器执行的环境变量；如果和镜像中的环境变量Key相同，会覆盖镜像中的值；</br> 最大100对(Optional) */
func (r *RebuildContainerRequest) SetEnvs(envs []nativecontainer.EnvVar) {
    r.Envs = envs
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r RebuildContainerRequest) GetRegionId() string {
    return r.RegionId
}

type RebuildContainerResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result RebuildContainerResult `json:"result"`
}

type RebuildContainerResult struct {
}