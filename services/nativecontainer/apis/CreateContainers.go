// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    nativecontainer "github.com/lshuining/jdcloud-sdk-go/services/nativecontainer/models"
)

type CreateContainersRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* 创建容器规格  */
    ContainerSpec *nativecontainer.ContainerSpec `json:"containerSpec"`

    /* 购买实例数量；取值范围：[1,100]  */
    MaxCount int `json:"maxCount"`

    /* 保证请求幂等性 (Optional) */
    ClientToken *string `json:"clientToken"`
}

/*
 * param regionId: Region ID (Required)
 * param containerSpec: 创建容器规格 (Required)
 * param maxCount: 购买实例数量；取值范围：[1,100] (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateContainersRequest(
    regionId string,
    containerSpec *nativecontainer.ContainerSpec,
    maxCount int,
) *CreateContainersRequest {

	return &CreateContainersRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/containers",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        ContainerSpec: containerSpec,
        MaxCount: maxCount,
	}
}

/*
 * param regionId: Region ID (Required)
 * param containerSpec: 创建容器规格 (Required)
 * param maxCount: 购买实例数量；取值范围：[1,100] (Required)
 * param clientToken: 保证请求幂等性 (Optional)
 */
func NewCreateContainersRequestWithAllParams(
    regionId string,
    containerSpec *nativecontainer.ContainerSpec,
    maxCount int,
    clientToken *string,
) *CreateContainersRequest {

    return &CreateContainersRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/containers",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        ContainerSpec: containerSpec,
        MaxCount: maxCount,
        ClientToken: clientToken,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateContainersRequestWithoutParam() *CreateContainersRequest {

    return &CreateContainersRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/containers",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *CreateContainersRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param containerSpec: 创建容器规格(Required) */
func (r *CreateContainersRequest) SetContainerSpec(containerSpec *nativecontainer.ContainerSpec) {
    r.ContainerSpec = containerSpec
}

/* param maxCount: 购买实例数量；取值范围：[1,100](Required) */
func (r *CreateContainersRequest) SetMaxCount(maxCount int) {
    r.MaxCount = maxCount
}

/* param clientToken: 保证请求幂等性(Optional) */
func (r *CreateContainersRequest) SetClientToken(clientToken string) {
    r.ClientToken = &clientToken
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateContainersRequest) GetRegionId() string {
    return r.RegionId
}

type CreateContainersResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateContainersResult `json:"result"`
}

type CreateContainersResult struct {
    ContainerIds []string `json:"containerIds"`
}