// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
    dbs "github.com/lshuining/jdcloud-sdk-go/services/dbs/models"
)

type InitBackupPlanRequest struct {

    core.JDCloudRequest

    /* 地域代码，取值范围参见[《各地域及可用区对照表》]  */
    RegionId string `json:"regionId"`

    /* 备份计划ID  */
    BackupPlanId string `json:"backupPlanId"`

    /* 引擎类型 MySQL5  MySQL8  MariaDB  Percona  */
    SourceEngine string `json:"sourceEngine"`

    /* 备份方式，支持物理备份或逻辑备份  */
    BackupType string `json:"backupType"`

    /* 是否开启日志备份；true：开启；false：关闭 (Optional) */
    EnableBackupLogs *bool `json:"enableBackupLogs"`

    /* 日志备份保存天数，支持7-3650 天，默认7天 (Optional) */
    LogBackupRetentionPeriod *int `json:"logBackupRetentionPeriod"`

    /* 全量备份保存天数，支持7-3650 天，默认7天 (Optional) */
    FullBackupRetentionPeriod *int `json:"fullBackupRetentionPeriod"`

    /* 全量备份的备份周期  */
    FullBackupSchedule *dbs.BackupSchedule `json:"fullBackupSchedule"`

    /* 备份目标的详细信息  */
    SourceEndpoint *dbs.SourceEndpoint `json:"sourceEndpoint"`

    /* 逻辑备份中要备份的对象的信息，物理备份无须该信息 (Optional) */
    BackupObjects *dbs.BackupObjects `json:"backupObjects"`

    /* 是否开启日志备份；true：开启；false：关闭  */
    CreateNewEndpoint bool `json:"createNewEndpoint"`
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》] (Required)
 * param backupPlanId: 备份计划ID (Required)
 * param sourceEngine: 引擎类型 MySQL5  MySQL8  MariaDB  Percona (Required)
 * param backupType: 备份方式，支持物理备份或逻辑备份 (Required)
 * param fullBackupSchedule: 全量备份的备份周期 (Required)
 * param sourceEndpoint: 备份目标的详细信息 (Required)
 * param createNewEndpoint: 是否开启日志备份；true：开启；false：关闭 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewInitBackupPlanRequest(
    regionId string,
    backupPlanId string,
    sourceEngine string,
    backupType string,
    fullBackupSchedule *dbs.BackupSchedule,
    sourceEndpoint *dbs.SourceEndpoint,
    createNewEndpoint bool,
) *InitBackupPlanRequest {

	return &InitBackupPlanRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/backupPlans/{backupPlanId}:initBackupPlan",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        RegionId: regionId,
        BackupPlanId: backupPlanId,
        SourceEngine: sourceEngine,
        BackupType: backupType,
        FullBackupSchedule: fullBackupSchedule,
        SourceEndpoint: sourceEndpoint,
        CreateNewEndpoint: createNewEndpoint,
	}
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》] (Required)
 * param backupPlanId: 备份计划ID (Required)
 * param sourceEngine: 引擎类型 MySQL5  MySQL8  MariaDB  Percona (Required)
 * param backupType: 备份方式，支持物理备份或逻辑备份 (Required)
 * param enableBackupLogs: 是否开启日志备份；true：开启；false：关闭 (Optional)
 * param logBackupRetentionPeriod: 日志备份保存天数，支持7-3650 天，默认7天 (Optional)
 * param fullBackupRetentionPeriod: 全量备份保存天数，支持7-3650 天，默认7天 (Optional)
 * param fullBackupSchedule: 全量备份的备份周期 (Required)
 * param sourceEndpoint: 备份目标的详细信息 (Required)
 * param backupObjects: 逻辑备份中要备份的对象的信息，物理备份无须该信息 (Optional)
 * param createNewEndpoint: 是否开启日志备份；true：开启；false：关闭 (Required)
 */
func NewInitBackupPlanRequestWithAllParams(
    regionId string,
    backupPlanId string,
    sourceEngine string,
    backupType string,
    enableBackupLogs *bool,
    logBackupRetentionPeriod *int,
    fullBackupRetentionPeriod *int,
    fullBackupSchedule *dbs.BackupSchedule,
    sourceEndpoint *dbs.SourceEndpoint,
    backupObjects *dbs.BackupObjects,
    createNewEndpoint bool,
) *InitBackupPlanRequest {

    return &InitBackupPlanRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/backupPlans/{backupPlanId}:initBackupPlan",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        RegionId: regionId,
        BackupPlanId: backupPlanId,
        SourceEngine: sourceEngine,
        BackupType: backupType,
        EnableBackupLogs: enableBackupLogs,
        LogBackupRetentionPeriod: logBackupRetentionPeriod,
        FullBackupRetentionPeriod: fullBackupRetentionPeriod,
        FullBackupSchedule: fullBackupSchedule,
        SourceEndpoint: sourceEndpoint,
        BackupObjects: backupObjects,
        CreateNewEndpoint: createNewEndpoint,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewInitBackupPlanRequestWithoutParam() *InitBackupPlanRequest {

    return &InitBackupPlanRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/backupPlans/{backupPlanId}:initBackupPlan",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](Required) */
func (r *InitBackupPlanRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param backupPlanId: 备份计划ID(Required) */
func (r *InitBackupPlanRequest) SetBackupPlanId(backupPlanId string) {
    r.BackupPlanId = backupPlanId
}

/* param sourceEngine: 引擎类型 MySQL5  MySQL8  MariaDB  Percona(Required) */
func (r *InitBackupPlanRequest) SetSourceEngine(sourceEngine string) {
    r.SourceEngine = sourceEngine
}

/* param backupType: 备份方式，支持物理备份或逻辑备份(Required) */
func (r *InitBackupPlanRequest) SetBackupType(backupType string) {
    r.BackupType = backupType
}

/* param enableBackupLogs: 是否开启日志备份；true：开启；false：关闭(Optional) */
func (r *InitBackupPlanRequest) SetEnableBackupLogs(enableBackupLogs bool) {
    r.EnableBackupLogs = &enableBackupLogs
}

/* param logBackupRetentionPeriod: 日志备份保存天数，支持7-3650 天，默认7天(Optional) */
func (r *InitBackupPlanRequest) SetLogBackupRetentionPeriod(logBackupRetentionPeriod int) {
    r.LogBackupRetentionPeriod = &logBackupRetentionPeriod
}

/* param fullBackupRetentionPeriod: 全量备份保存天数，支持7-3650 天，默认7天(Optional) */
func (r *InitBackupPlanRequest) SetFullBackupRetentionPeriod(fullBackupRetentionPeriod int) {
    r.FullBackupRetentionPeriod = &fullBackupRetentionPeriod
}

/* param fullBackupSchedule: 全量备份的备份周期(Required) */
func (r *InitBackupPlanRequest) SetFullBackupSchedule(fullBackupSchedule *dbs.BackupSchedule) {
    r.FullBackupSchedule = fullBackupSchedule
}

/* param sourceEndpoint: 备份目标的详细信息(Required) */
func (r *InitBackupPlanRequest) SetSourceEndpoint(sourceEndpoint *dbs.SourceEndpoint) {
    r.SourceEndpoint = sourceEndpoint
}

/* param backupObjects: 逻辑备份中要备份的对象的信息，物理备份无须该信息(Optional) */
func (r *InitBackupPlanRequest) SetBackupObjects(backupObjects *dbs.BackupObjects) {
    r.BackupObjects = backupObjects
}

/* param createNewEndpoint: 是否开启日志备份；true：开启；false：关闭(Required) */
func (r *InitBackupPlanRequest) SetCreateNewEndpoint(createNewEndpoint bool) {
    r.CreateNewEndpoint = createNewEndpoint
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r InitBackupPlanRequest) GetRegionId() string {
    return r.RegionId
}

type InitBackupPlanResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result InitBackupPlanResult `json:"result"`
}

type InitBackupPlanResult struct {
}