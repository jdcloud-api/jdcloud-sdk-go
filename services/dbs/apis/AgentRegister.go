// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type AgentRegisterRequest struct {

    core.JDCloudRequest

    /* 地域代码，取值范围参见[《各地域及可用区对照表》]  */
    RegionId string `json:"regionId"`

    /* agent的IP (Optional) */
    Ip *string `json:"ip"`

    /* agent的 MAC  */
    Mac string `json:"mac"`

    /* agent的hostname (Optional) */
    Hostname *string `json:"hostname"`

    /* agent的状态  */
    Stat string `json:"stat"`

    /* agent的版本号 (Optional) */
    Ver *string `json:"ver"`
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》] (Required)
 * param mac: agent的 MAC (Required)
 * param stat: agent的状态 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewAgentRegisterRequest(
    regionId string,
    mac string,
    stat string,
) *AgentRegisterRequest {

	return &AgentRegisterRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/agent",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        RegionId: regionId,
        Mac: mac,
        Stat: stat,
	}
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》] (Required)
 * param ip: agent的IP (Optional)
 * param mac: agent的 MAC (Required)
 * param hostname: agent的hostname (Optional)
 * param stat: agent的状态 (Required)
 * param ver: agent的版本号 (Optional)
 */
func NewAgentRegisterRequestWithAllParams(
    regionId string,
    ip *string,
    mac string,
    hostname *string,
    stat string,
    ver *string,
) *AgentRegisterRequest {

    return &AgentRegisterRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/agent",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        RegionId: regionId,
        Ip: ip,
        Mac: mac,
        Hostname: hostname,
        Stat: stat,
        Ver: ver,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewAgentRegisterRequestWithoutParam() *AgentRegisterRequest {

    return &AgentRegisterRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/agent",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](Required) */
func (r *AgentRegisterRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param ip: agent的IP(Optional) */
func (r *AgentRegisterRequest) SetIp(ip string) {
    r.Ip = &ip
}

/* param mac: agent的 MAC(Required) */
func (r *AgentRegisterRequest) SetMac(mac string) {
    r.Mac = mac
}

/* param hostname: agent的hostname(Optional) */
func (r *AgentRegisterRequest) SetHostname(hostname string) {
    r.Hostname = &hostname
}

/* param stat: agent的状态(Required) */
func (r *AgentRegisterRequest) SetStat(stat string) {
    r.Stat = stat
}

/* param ver: agent的版本号(Optional) */
func (r *AgentRegisterRequest) SetVer(ver string) {
    r.Ver = &ver
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r AgentRegisterRequest) GetRegionId() string {
    return r.RegionId
}

type AgentRegisterResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result AgentRegisterResult `json:"result"`
}

type AgentRegisterResult struct {
    CreateTime string `json:"createTime"`
    Hostname string `json:"hostname"`
    Id string `json:"id"`
    Ip string `json:"ip"`
    LastActiveTime string `json:"lastActiveTime"`
    Name string `json:"name"`
    Stat string `json:"stat"`
    UpdateTime string `json:"updateTime"`
    Version string `json:"version"`
}