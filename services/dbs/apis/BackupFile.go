// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/lshuining/jdcloud-sdk-go/core"
)

type BackupFileRequest struct {

    core.JDCloudRequest

    /* 地域代码，取值范围参见[《各地域及可用区对照表》]  */
    RegionId string `json:"regionId"`

    /*   */
    PlanId string `json:"planId"`

    /*   */
    BackupType string `json:"backupType"`

    /*   */
    DataSourceId string `json:"dataSourceId"`

    /* 0代表自动备份 1代表的是手动触发备份  */
    IsManual int `json:"isManual"`

    /*   */
    Filename string `json:"filename"`

    /*   */
    ExtInfo string `json:"extInfo"`

    /*   */
    Path string `json:"path"`

    /*   */
    Size int64 `json:"size"`

    /*  (Optional) */
    SrcSize *int64 `json:"srcSize"`

    /*   */
    StorageType string `json:"storageType"`

    /*   */
    TaskId string `json:"taskId"`

    /*  (Optional) */
    BinlogStartTime *string `json:"binlogStartTime"`

    /*  (Optional) */
    BinlogEndTime *string `json:"binlogEndTime"`

    /*  (Optional) */
    BinlogStartPos *int `json:"binlogStartPos"`

    /*  (Optional) */
    BinlogEndPos *int `json:"binlogEndPos"`

    /*  (Optional) */
    Version *string `json:"version"`
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》] (Required)
 * param planId:  (Required)
 * param backupType:  (Required)
 * param dataSourceId:  (Required)
 * param isManual: 0代表自动备份 1代表的是手动触发备份 (Required)
 * param filename:  (Required)
 * param extInfo:  (Required)
 * param path:  (Required)
 * param size:  (Required)
 * param storageType:  (Required)
 * param taskId:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewBackupFileRequest(
    regionId string,
    planId string,
    backupType string,
    dataSourceId string,
    isManual int,
    filename string,
    extInfo string,
    path string,
    size int64,
    storageType string,
    taskId string,
) *BackupFileRequest {

	return &BackupFileRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/backupFile",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        RegionId: regionId,
        PlanId: planId,
        BackupType: backupType,
        DataSourceId: dataSourceId,
        IsManual: isManual,
        Filename: filename,
        ExtInfo: extInfo,
        Path: path,
        Size: size,
        StorageType: storageType,
        TaskId: taskId,
	}
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》] (Required)
 * param planId:  (Required)
 * param backupType:  (Required)
 * param dataSourceId:  (Required)
 * param isManual: 0代表自动备份 1代表的是手动触发备份 (Required)
 * param filename:  (Required)
 * param extInfo:  (Required)
 * param path:  (Required)
 * param size:  (Required)
 * param srcSize:  (Optional)
 * param storageType:  (Required)
 * param taskId:  (Required)
 * param binlogStartTime:  (Optional)
 * param binlogEndTime:  (Optional)
 * param binlogStartPos:  (Optional)
 * param binlogEndPos:  (Optional)
 * param version:  (Optional)
 */
func NewBackupFileRequestWithAllParams(
    regionId string,
    planId string,
    backupType string,
    dataSourceId string,
    isManual int,
    filename string,
    extInfo string,
    path string,
    size int64,
    srcSize *int64,
    storageType string,
    taskId string,
    binlogStartTime *string,
    binlogEndTime *string,
    binlogStartPos *int,
    binlogEndPos *int,
    version *string,
) *BackupFileRequest {

    return &BackupFileRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/backupFile",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        RegionId: regionId,
        PlanId: planId,
        BackupType: backupType,
        DataSourceId: dataSourceId,
        IsManual: isManual,
        Filename: filename,
        ExtInfo: extInfo,
        Path: path,
        Size: size,
        SrcSize: srcSize,
        StorageType: storageType,
        TaskId: taskId,
        BinlogStartTime: binlogStartTime,
        BinlogEndTime: binlogEndTime,
        BinlogStartPos: binlogStartPos,
        BinlogEndPos: binlogEndPos,
        Version: version,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewBackupFileRequestWithoutParam() *BackupFileRequest {

    return &BackupFileRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/backupFile",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](Required) */
func (r *BackupFileRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param planId: (Required) */
func (r *BackupFileRequest) SetPlanId(planId string) {
    r.PlanId = planId
}

/* param backupType: (Required) */
func (r *BackupFileRequest) SetBackupType(backupType string) {
    r.BackupType = backupType
}

/* param dataSourceId: (Required) */
func (r *BackupFileRequest) SetDataSourceId(dataSourceId string) {
    r.DataSourceId = dataSourceId
}

/* param isManual: 0代表自动备份 1代表的是手动触发备份(Required) */
func (r *BackupFileRequest) SetIsManual(isManual int) {
    r.IsManual = isManual
}

/* param filename: (Required) */
func (r *BackupFileRequest) SetFilename(filename string) {
    r.Filename = filename
}

/* param extInfo: (Required) */
func (r *BackupFileRequest) SetExtInfo(extInfo string) {
    r.ExtInfo = extInfo
}

/* param path: (Required) */
func (r *BackupFileRequest) SetPath(path string) {
    r.Path = path
}

/* param size: (Required) */
func (r *BackupFileRequest) SetSize(size int64) {
    r.Size = size
}

/* param srcSize: (Optional) */
func (r *BackupFileRequest) SetSrcSize(srcSize int64) {
    r.SrcSize = &srcSize
}

/* param storageType: (Required) */
func (r *BackupFileRequest) SetStorageType(storageType string) {
    r.StorageType = storageType
}

/* param taskId: (Required) */
func (r *BackupFileRequest) SetTaskId(taskId string) {
    r.TaskId = taskId
}

/* param binlogStartTime: (Optional) */
func (r *BackupFileRequest) SetBinlogStartTime(binlogStartTime string) {
    r.BinlogStartTime = &binlogStartTime
}

/* param binlogEndTime: (Optional) */
func (r *BackupFileRequest) SetBinlogEndTime(binlogEndTime string) {
    r.BinlogEndTime = &binlogEndTime
}

/* param binlogStartPos: (Optional) */
func (r *BackupFileRequest) SetBinlogStartPos(binlogStartPos int) {
    r.BinlogStartPos = &binlogStartPos
}

/* param binlogEndPos: (Optional) */
func (r *BackupFileRequest) SetBinlogEndPos(binlogEndPos int) {
    r.BinlogEndPos = &binlogEndPos
}

/* param version: (Optional) */
func (r *BackupFileRequest) SetVersion(version string) {
    r.Version = &version
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r BackupFileRequest) GetRegionId() string {
    return r.RegionId
}

type BackupFileResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result BackupFileResult `json:"result"`
}

type BackupFileResult struct {
    Id string `json:"id"`
}