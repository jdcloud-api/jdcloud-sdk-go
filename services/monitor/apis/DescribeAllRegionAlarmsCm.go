// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    monitor "github.com/jdcloud-api/jdcloud-sdk-go/services/monitor/models"
)

type DescribeAllRegionAlarmsCmRequest struct {

    core.JDCloudRequest

    /* 当前所在页，默认为1 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 页面大小，默认为20；取值范围[1, 100] (Optional) */
    PageSize *int `json:"pageSize"`

    /* 命名空间名称 (Optional) */
    Namespace *string `json:"namespace"`

    /* 对象名称 (Optional) */
    Obj *string `json:"obj"`

    /* 产品名称 (Optional) */
    ServiceCode *string `json:"serviceCode"`

    /* 资源Id (Optional) */
    ResourceId *string `json:"resourceId"`

    /* 规则报警状态, 1：正常, 2：报警，4：数据不足 (Optional) */
    Status *int `json:"status"`

    /* 是否为正在报警的规则，0为忽略，1为是，与 status 同时只能生效一个,isAlarming 优先生效 (Optional) */
    IsAlarming *int `json:"isAlarming"`

    /* 规则状态：1为启用，0为禁用 (Optional) */
    Enabled *int `json:"enabled"`

    /* region info (Optional) */
    Region *string `json:"region"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeAllRegionAlarmsCmRequest(
) *DescribeAllRegionAlarmsCmRequest {

	return &DescribeAllRegionAlarmsCmRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/cm/alarms",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param pageNumber: 当前所在页，默认为1 (Optional)
 * param pageSize: 页面大小，默认为20；取值范围[1, 100] (Optional)
 * param namespace: 命名空间名称 (Optional)
 * param obj: 对象名称 (Optional)
 * param serviceCode: 产品名称 (Optional)
 * param resourceId: 资源Id (Optional)
 * param status: 规则报警状态, 1：正常, 2：报警，4：数据不足 (Optional)
 * param isAlarming: 是否为正在报警的规则，0为忽略，1为是，与 status 同时只能生效一个,isAlarming 优先生效 (Optional)
 * param enabled: 规则状态：1为启用，0为禁用 (Optional)
 * param region: region info (Optional)
 */
func NewDescribeAllRegionAlarmsCmRequestWithAllParams(
    pageNumber *int,
    pageSize *int,
    namespace *string,
    obj *string,
    serviceCode *string,
    resourceId *string,
    status *int,
    isAlarming *int,
    enabled *int,
    region *string,
) *DescribeAllRegionAlarmsCmRequest {

    return &DescribeAllRegionAlarmsCmRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/cm/alarms",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        PageNumber: pageNumber,
        PageSize: pageSize,
        Namespace: namespace,
        Obj: obj,
        ServiceCode: serviceCode,
        ResourceId: resourceId,
        Status: status,
        IsAlarming: isAlarming,
        Enabled: enabled,
        Region: region,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeAllRegionAlarmsCmRequestWithoutParam() *DescribeAllRegionAlarmsCmRequest {

    return &DescribeAllRegionAlarmsCmRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/cm/alarms",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param pageNumber: 当前所在页，默认为1(Optional) */
func (r *DescribeAllRegionAlarmsCmRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}

/* param pageSize: 页面大小，默认为20；取值范围[1, 100](Optional) */
func (r *DescribeAllRegionAlarmsCmRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

/* param namespace: 命名空间名称(Optional) */
func (r *DescribeAllRegionAlarmsCmRequest) SetNamespace(namespace string) {
    r.Namespace = &namespace
}

/* param obj: 对象名称(Optional) */
func (r *DescribeAllRegionAlarmsCmRequest) SetObj(obj string) {
    r.Obj = &obj
}

/* param serviceCode: 产品名称(Optional) */
func (r *DescribeAllRegionAlarmsCmRequest) SetServiceCode(serviceCode string) {
    r.ServiceCode = &serviceCode
}

/* param resourceId: 资源Id(Optional) */
func (r *DescribeAllRegionAlarmsCmRequest) SetResourceId(resourceId string) {
    r.ResourceId = &resourceId
}

/* param status: 规则报警状态, 1：正常, 2：报警，4：数据不足(Optional) */
func (r *DescribeAllRegionAlarmsCmRequest) SetStatus(status int) {
    r.Status = &status
}

/* param isAlarming: 是否为正在报警的规则，0为忽略，1为是，与 status 同时只能生效一个,isAlarming 优先生效(Optional) */
func (r *DescribeAllRegionAlarmsCmRequest) SetIsAlarming(isAlarming int) {
    r.IsAlarming = &isAlarming
}

/* param enabled: 规则状态：1为启用，0为禁用(Optional) */
func (r *DescribeAllRegionAlarmsCmRequest) SetEnabled(enabled int) {
    r.Enabled = &enabled
}

/* param region: region info(Optional) */
func (r *DescribeAllRegionAlarmsCmRequest) SetRegion(region string) {
    r.Region = &region
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeAllRegionAlarmsCmRequest) GetRegionId() string {
    return ""
}

type DescribeAllRegionAlarmsCmResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeAllRegionAlarmsCmResult `json:"result"`
}

type DescribeAllRegionAlarmsCmResult struct {
    AlarmList []monitor.CmAlarm `json:"alarmList"`
    NumberPages int64 `json:"numberPages"`
    NumberRecords int64 `json:"numberRecords"`
    PageNumber int64 `json:"pageNumber"`
    PageSize int64 `json:"pageSize"`
}