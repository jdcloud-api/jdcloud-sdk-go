// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    monitor "github.com/jdcloud-api/jdcloud-sdk-go/services/monitor/models"
)

type UpdateTemplateRequest struct {

    core.JDCloudRequest

    /* 模板描述 (Optional) */
    Description *string `json:"description"`

    /* 规则的资源类型  */
    RuleServiceCode string `json:"ruleServiceCode"`

    /* 模板的资源类型  */
    ServiceCode string `json:"serviceCode"`

    /* 模板ID  */
    TemplateId int64 `json:"templateId"`

    /* 模板名称  */
    TemplateName string `json:"templateName"`

    /* 模板内包含的规则  */
    TemplateRules []monitor.BaseRuleT `json:"templateRules"`
}

/*
 * param ruleServiceCode: 规则的资源类型 (Required)
 * param serviceCode: 模板的资源类型 (Required)
 * param templateId: 模板ID (Required)
 * param templateName: 模板名称 (Required)
 * param templateRules: 模板内包含的规则 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateTemplateRequest(
    ruleServiceCode string,
    serviceCode string,
    templateId int64,
    templateName string,
    templateRules []monitor.BaseRuleT,
) *UpdateTemplateRequest {

	return &UpdateTemplateRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/template",
			Method:  "PATCH",
			Header:  nil,
			Version: "v1",
		},
        RuleServiceCode: ruleServiceCode,
        ServiceCode: serviceCode,
        TemplateId: templateId,
        TemplateName: templateName,
        TemplateRules: templateRules,
	}
}

/*
 * param description: 模板描述 (Optional)
 * param ruleServiceCode: 规则的资源类型 (Required)
 * param serviceCode: 模板的资源类型 (Required)
 * param templateId: 模板ID (Required)
 * param templateName: 模板名称 (Required)
 * param templateRules: 模板内包含的规则 (Required)
 */
func NewUpdateTemplateRequestWithAllParams(
    description *string,
    ruleServiceCode string,
    serviceCode string,
    templateId int64,
    templateName string,
    templateRules []monitor.BaseRuleT,
) *UpdateTemplateRequest {

    return &UpdateTemplateRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/template",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
        Description: description,
        RuleServiceCode: ruleServiceCode,
        ServiceCode: serviceCode,
        TemplateId: templateId,
        TemplateName: templateName,
        TemplateRules: templateRules,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateTemplateRequestWithoutParam() *UpdateTemplateRequest {

    return &UpdateTemplateRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/template",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param description: 模板描述(Optional) */
func (r *UpdateTemplateRequest) SetDescription(description string) {
    r.Description = &description
}

/* param ruleServiceCode: 规则的资源类型(Required) */
func (r *UpdateTemplateRequest) SetRuleServiceCode(ruleServiceCode string) {
    r.RuleServiceCode = ruleServiceCode
}

/* param serviceCode: 模板的资源类型(Required) */
func (r *UpdateTemplateRequest) SetServiceCode(serviceCode string) {
    r.ServiceCode = serviceCode
}

/* param templateId: 模板ID(Required) */
func (r *UpdateTemplateRequest) SetTemplateId(templateId int64) {
    r.TemplateId = templateId
}

/* param templateName: 模板名称(Required) */
func (r *UpdateTemplateRequest) SetTemplateName(templateName string) {
    r.TemplateName = templateName
}

/* param templateRules: 模板内包含的规则(Required) */
func (r *UpdateTemplateRequest) SetTemplateRules(templateRules []monitor.BaseRuleT) {
    r.TemplateRules = templateRules
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateTemplateRequest) GetRegionId() string {
    return ""
}

type UpdateTemplateResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateTemplateResult `json:"result"`
}

type UpdateTemplateResult struct {
    Success bool `json:"success"`
    TemplateId int64 `json:"templateId"`
}