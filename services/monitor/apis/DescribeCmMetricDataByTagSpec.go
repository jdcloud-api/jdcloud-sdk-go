// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    monitor "github.com/jdcloud-api/jdcloud-sdk-go/services/monitor/models"
)

type DescribeCmMetricDataByTagSpecRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* namespace  */
    Namespace string `json:"namespace"`

    /* 监控项英文标识(id)，监控项名称  */
    Metric string `json:"metric"`

    /* 指标聚合方式，每个指标都有默认的聚合方式， 可选值包括：sum,avg.max.min；多个对象的数据如何合并(resourceId -> cluster) (Optional) */
    AggrType *string `json:"aggrType"`

    /* 指标采样方式，默认avg， 可选值包括：sum,avg,max,min,last；同一对象的数据，在改变时间点粒度时如何合并(1m->20m) (Optional) */
    DownSampleType *string `json:"downSampleType"`

    /* 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd'T'HH:mm:ssZ（默认为当前时间，早于30d时，将被重置为30d） (Optional) */
    StartTime *string `json:"startTime"`

    /* 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd'T'HH:mm:ssZ（为空时，将由startTime与timeInterval计算得出） (Optional) */
    EndTime *string `json:"endTime"`

    /* 时间间隔：1h，6h，12h，1d，3d，7d，14d，固定时间间隔，timeInterval 与 endTime 至少填一项 (Optional) */
    TimeInterval *string `json:"timeInterval"`

    /* 自定义标签 (Optional) */
    Tags []monitor.TagFilter `json:"tags"`

    /* 是否对查询的tags分组 (Optional) */
    GroupBy *bool `json:"groupBy"`
}

/*
 * param regionId: 地域 Id (Required)
 * param namespace: namespace (Required)
 * param metric: 监控项英文标识(id)，监控项名称 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeCmMetricDataByTagSpecRequest(
    regionId string,
    namespace string,
    metric string,
) *DescribeCmMetricDataByTagSpecRequest {

	return &DescribeCmMetricDataByTagSpecRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/cm/namespaces/{namespace}/metrics/{metric}/metricData",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        Namespace: namespace,
        Metric: metric,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param namespace: namespace (Required)
 * param metric: 监控项英文标识(id)，监控项名称 (Required)
 * param aggrType: 指标聚合方式，每个指标都有默认的聚合方式， 可选值包括：sum,avg.max.min；多个对象的数据如何合并(resourceId -> cluster) (Optional)
 * param downSampleType: 指标采样方式，默认avg， 可选值包括：sum,avg,max,min,last；同一对象的数据，在改变时间点粒度时如何合并(1m->20m) (Optional)
 * param startTime: 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd'T'HH:mm:ssZ（默认为当前时间，早于30d时，将被重置为30d） (Optional)
 * param endTime: 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd'T'HH:mm:ssZ（为空时，将由startTime与timeInterval计算得出） (Optional)
 * param timeInterval: 时间间隔：1h，6h，12h，1d，3d，7d，14d，固定时间间隔，timeInterval 与 endTime 至少填一项 (Optional)
 * param tags: 自定义标签 (Optional)
 * param groupBy: 是否对查询的tags分组 (Optional)
 */
func NewDescribeCmMetricDataByTagSpecRequestWithAllParams(
    regionId string,
    namespace string,
    metric string,
    aggrType *string,
    downSampleType *string,
    startTime *string,
    endTime *string,
    timeInterval *string,
    tags []monitor.TagFilter,
    groupBy *bool,
) *DescribeCmMetricDataByTagSpecRequest {

    return &DescribeCmMetricDataByTagSpecRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/cm/namespaces/{namespace}/metrics/{metric}/metricData",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Namespace: namespace,
        Metric: metric,
        AggrType: aggrType,
        DownSampleType: downSampleType,
        StartTime: startTime,
        EndTime: endTime,
        TimeInterval: timeInterval,
        Tags: tags,
        GroupBy: groupBy,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeCmMetricDataByTagSpecRequestWithoutParam() *DescribeCmMetricDataByTagSpecRequest {

    return &DescribeCmMetricDataByTagSpecRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/cm/namespaces/{namespace}/metrics/{metric}/metricData",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *DescribeCmMetricDataByTagSpecRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param namespace: namespace(Required) */
func (r *DescribeCmMetricDataByTagSpecRequest) SetNamespace(namespace string) {
    r.Namespace = namespace
}

/* param metric: 监控项英文标识(id)，监控项名称(Required) */
func (r *DescribeCmMetricDataByTagSpecRequest) SetMetric(metric string) {
    r.Metric = metric
}

/* param aggrType: 指标聚合方式，每个指标都有默认的聚合方式， 可选值包括：sum,avg.max.min；多个对象的数据如何合并(resourceId -> cluster)(Optional) */
func (r *DescribeCmMetricDataByTagSpecRequest) SetAggrType(aggrType string) {
    r.AggrType = &aggrType
}

/* param downSampleType: 指标采样方式，默认avg， 可选值包括：sum,avg,max,min,last；同一对象的数据，在改变时间点粒度时如何合并(1m->20m)(Optional) */
func (r *DescribeCmMetricDataByTagSpecRequest) SetDownSampleType(downSampleType string) {
    r.DownSampleType = &downSampleType
}

/* param startTime: 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd'T'HH:mm:ssZ（默认为当前时间，早于30d时，将被重置为30d）(Optional) */
func (r *DescribeCmMetricDataByTagSpecRequest) SetStartTime(startTime string) {
    r.StartTime = &startTime
}

/* param endTime: 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd'T'HH:mm:ssZ（为空时，将由startTime与timeInterval计算得出）(Optional) */
func (r *DescribeCmMetricDataByTagSpecRequest) SetEndTime(endTime string) {
    r.EndTime = &endTime
}

/* param timeInterval: 时间间隔：1h，6h，12h，1d，3d，7d，14d，固定时间间隔，timeInterval 与 endTime 至少填一项(Optional) */
func (r *DescribeCmMetricDataByTagSpecRequest) SetTimeInterval(timeInterval string) {
    r.TimeInterval = &timeInterval
}

/* param tags: 自定义标签(Optional) */
func (r *DescribeCmMetricDataByTagSpecRequest) SetTags(tags []monitor.TagFilter) {
    r.Tags = tags
}

/* param groupBy: 是否对查询的tags分组(Optional) */
func (r *DescribeCmMetricDataByTagSpecRequest) SetGroupBy(groupBy bool) {
    r.GroupBy = &groupBy
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeCmMetricDataByTagSpecRequest) GetRegionId() string {
    return r.RegionId
}

type DescribeCmMetricDataByTagSpecResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeCmMetricDataByTagSpecResult `json:"result"`
}

type DescribeCmMetricDataByTagSpecResult struct {
    MetricDatas []monitor.MetricData `json:"metricDatas"`
}