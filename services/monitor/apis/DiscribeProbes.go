// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    monitor "github.com/jdcloud-api/jdcloud-sdk-go/services/monitor/models"
)

type DiscribeProbesRequest struct {

    core.JDCloudRequest

    /* 探测任务的task_id  */
    ProbeTaskID string `json:"probeTaskID"`

    /* 自定义标签 (Optional) */
    Filters []monitor.Filter `json:"filters"`
}

/*
 * param probeTaskID: 探测任务的task_id (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDiscribeProbesRequest(
    probeTaskID string,
) *DiscribeProbesRequest {

	return &DiscribeProbesRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/am/probeTask/{probeTaskID}/probeList",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        ProbeTaskID: probeTaskID,
	}
}

/*
 * param probeTaskID: 探测任务的task_id (Required)
 * param filters: 自定义标签 (Optional)
 */
func NewDiscribeProbesRequestWithAllParams(
    probeTaskID string,
    filters []monitor.Filter,
) *DiscribeProbesRequest {

    return &DiscribeProbesRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/am/probeTask/{probeTaskID}/probeList",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        ProbeTaskID: probeTaskID,
        Filters: filters,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDiscribeProbesRequestWithoutParam() *DiscribeProbesRequest {

    return &DiscribeProbesRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/am/probeTask/{probeTaskID}/probeList",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param probeTaskID: 探测任务的task_id(Required) */
func (r *DiscribeProbesRequest) SetProbeTaskID(probeTaskID string) {
    r.ProbeTaskID = probeTaskID
}

/* param filters: 自定义标签(Optional) */
func (r *DiscribeProbesRequest) SetFilters(filters []monitor.Filter) {
    r.Filters = filters
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DiscribeProbesRequest) GetRegionId() string {
    return ""
}

type DiscribeProbesResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DiscribeProbesResult `json:"result"`
}

type DiscribeProbesResult struct {
    ProbeList []monitor.ProbeInfo `json:"probeList"`
}