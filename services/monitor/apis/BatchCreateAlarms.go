// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    monitor "github.com/jdcloud-api/jdcloud-sdk-go/services/monitor/models"
)

type BatchCreateAlarmsRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* 幂等性校验参数，最长36位  */
    ClientToken string `json:"clientToken"`

    /* 通知的联系人 (Optional) */
    Contacts []monitor.BaseContact `json:"contacts"`

    /* 地域 (Optional) */
    Datacenter *string `json:"datacenter"`

    /* 是否启用, 1表示启用规则，0表示禁用规则，默认为1 (Optional) */
    Enabled *int64 `json:"enabled"`

    /* 报警规则对应实例列表，每次最多100个，例如"['resourceId1','resourceId2']"  */
    ResourceIds []string `json:"resourceIds"`

    /* 规则类型, 1表示资源监控，6表示站点监控，默认为1 (Optional) */
    RuleType *int64 `json:"ruleType"`

    /* 要批量创建的规则列表  */
    Rules []monitor.BaseRule `json:"rules"`

    /* 是否保存为模板 (Optional) */
    SaveTemplate *bool `json:"saveTemplate"`

    /* 产品线标识，规则对应的serviceCode  */
    ServiceCode string `json:"serviceCode"`

    /* 模板名称，保存模板时，不能为空 (Optional) */
    TemplateName *string `json:"templateName"`

    /* 产品线标识，保存为模板时，模板对应的serviceCode (Optional) */
    TemplateServiceCode *string `json:"templateServiceCode"`

    /* 回调content 注：仅webHookUrl和webHookContent均不为空时，才会创建webHook (Optional) */
    WebHookContent *string `json:"webHookContent"`

    /* webHook协议 (Optional) */
    WebHookProtocol *string `json:"webHookProtocol"`

    /* 回调secret，用户请求签名，防伪造 (Optional) */
    WebHookSecret *string `json:"webHookSecret"`

    /* 回调url (Optional) */
    WebHookUrl *string `json:"webHookUrl"`
}

/*
 * param regionId: 地域 Id (Required)
 * param clientToken: 幂等性校验参数，最长36位 (Required)
 * param resourceIds: 报警规则对应实例列表，每次最多100个，例如"['resourceId1','resourceId2']" (Required)
 * param rules: 要批量创建的规则列表 (Required)
 * param serviceCode: 产品线标识，规则对应的serviceCode (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewBatchCreateAlarmsRequest(
    regionId string,
    clientToken string,
    resourceIds []string,
    rules []monitor.BaseRule,
    serviceCode string,
) *BatchCreateAlarmsRequest {

	return &BatchCreateAlarmsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/alarms/batch",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        ClientToken: clientToken,
        ResourceIds: resourceIds,
        Rules: rules,
        ServiceCode: serviceCode,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param clientToken: 幂等性校验参数，最长36位 (Required)
 * param contacts: 通知的联系人 (Optional)
 * param datacenter: 地域 (Optional)
 * param enabled: 是否启用, 1表示启用规则，0表示禁用规则，默认为1 (Optional)
 * param resourceIds: 报警规则对应实例列表，每次最多100个，例如"['resourceId1','resourceId2']" (Required)
 * param ruleType: 规则类型, 1表示资源监控，6表示站点监控，默认为1 (Optional)
 * param rules: 要批量创建的规则列表 (Required)
 * param saveTemplate: 是否保存为模板 (Optional)
 * param serviceCode: 产品线标识，规则对应的serviceCode (Required)
 * param templateName: 模板名称，保存模板时，不能为空 (Optional)
 * param templateServiceCode: 产品线标识，保存为模板时，模板对应的serviceCode (Optional)
 * param webHookContent: 回调content 注：仅webHookUrl和webHookContent均不为空时，才会创建webHook (Optional)
 * param webHookProtocol: webHook协议 (Optional)
 * param webHookSecret: 回调secret，用户请求签名，防伪造 (Optional)
 * param webHookUrl: 回调url (Optional)
 */
func NewBatchCreateAlarmsRequestWithAllParams(
    regionId string,
    clientToken string,
    contacts []monitor.BaseContact,
    datacenter *string,
    enabled *int64,
    resourceIds []string,
    ruleType *int64,
    rules []monitor.BaseRule,
    saveTemplate *bool,
    serviceCode string,
    templateName *string,
    templateServiceCode *string,
    webHookContent *string,
    webHookProtocol *string,
    webHookSecret *string,
    webHookUrl *string,
) *BatchCreateAlarmsRequest {

    return &BatchCreateAlarmsRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/alarms/batch",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        ClientToken: clientToken,
        Contacts: contacts,
        Datacenter: datacenter,
        Enabled: enabled,
        ResourceIds: resourceIds,
        RuleType: ruleType,
        Rules: rules,
        SaveTemplate: saveTemplate,
        ServiceCode: serviceCode,
        TemplateName: templateName,
        TemplateServiceCode: templateServiceCode,
        WebHookContent: webHookContent,
        WebHookProtocol: webHookProtocol,
        WebHookSecret: webHookSecret,
        WebHookUrl: webHookUrl,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewBatchCreateAlarmsRequestWithoutParam() *BatchCreateAlarmsRequest {

    return &BatchCreateAlarmsRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/alarms/batch",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *BatchCreateAlarmsRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param clientToken: 幂等性校验参数，最长36位(Required) */
func (r *BatchCreateAlarmsRequest) SetClientToken(clientToken string) {
    r.ClientToken = clientToken
}

/* param contacts: 通知的联系人(Optional) */
func (r *BatchCreateAlarmsRequest) SetContacts(contacts []monitor.BaseContact) {
    r.Contacts = contacts
}

/* param datacenter: 地域(Optional) */
func (r *BatchCreateAlarmsRequest) SetDatacenter(datacenter string) {
    r.Datacenter = &datacenter
}

/* param enabled: 是否启用, 1表示启用规则，0表示禁用规则，默认为1(Optional) */
func (r *BatchCreateAlarmsRequest) SetEnabled(enabled int64) {
    r.Enabled = &enabled
}

/* param resourceIds: 报警规则对应实例列表，每次最多100个，例如"['resourceId1','resourceId2']"(Required) */
func (r *BatchCreateAlarmsRequest) SetResourceIds(resourceIds []string) {
    r.ResourceIds = resourceIds
}

/* param ruleType: 规则类型, 1表示资源监控，6表示站点监控，默认为1(Optional) */
func (r *BatchCreateAlarmsRequest) SetRuleType(ruleType int64) {
    r.RuleType = &ruleType
}

/* param rules: 要批量创建的规则列表(Required) */
func (r *BatchCreateAlarmsRequest) SetRules(rules []monitor.BaseRule) {
    r.Rules = rules
}

/* param saveTemplate: 是否保存为模板(Optional) */
func (r *BatchCreateAlarmsRequest) SetSaveTemplate(saveTemplate bool) {
    r.SaveTemplate = &saveTemplate
}

/* param serviceCode: 产品线标识，规则对应的serviceCode(Required) */
func (r *BatchCreateAlarmsRequest) SetServiceCode(serviceCode string) {
    r.ServiceCode = serviceCode
}

/* param templateName: 模板名称，保存模板时，不能为空(Optional) */
func (r *BatchCreateAlarmsRequest) SetTemplateName(templateName string) {
    r.TemplateName = &templateName
}

/* param templateServiceCode: 产品线标识，保存为模板时，模板对应的serviceCode(Optional) */
func (r *BatchCreateAlarmsRequest) SetTemplateServiceCode(templateServiceCode string) {
    r.TemplateServiceCode = &templateServiceCode
}

/* param webHookContent: 回调content 注：仅webHookUrl和webHookContent均不为空时，才会创建webHook(Optional) */
func (r *BatchCreateAlarmsRequest) SetWebHookContent(webHookContent string) {
    r.WebHookContent = &webHookContent
}

/* param webHookProtocol: webHook协议(Optional) */
func (r *BatchCreateAlarmsRequest) SetWebHookProtocol(webHookProtocol string) {
    r.WebHookProtocol = &webHookProtocol
}

/* param webHookSecret: 回调secret，用户请求签名，防伪造(Optional) */
func (r *BatchCreateAlarmsRequest) SetWebHookSecret(webHookSecret string) {
    r.WebHookSecret = &webHookSecret
}

/* param webHookUrl: 回调url(Optional) */
func (r *BatchCreateAlarmsRequest) SetWebHookUrl(webHookUrl string) {
    r.WebHookUrl = &webHookUrl
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r BatchCreateAlarmsRequest) GetRegionId() string {
    return r.RegionId
}

type BatchCreateAlarmsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result BatchCreateAlarmsResult `json:"result"`
}

type BatchCreateAlarmsResult struct {
    AlarmIDList []string `json:"alarmIDList"`
}