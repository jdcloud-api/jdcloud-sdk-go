// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    monitor "github.com/jdcloud-api/jdcloud-sdk-go/services/monitor/models"
)

type DescribeAlarmsRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* 产品名称 (Optional) */
    ServiceCode *string `json:"serviceCode"`

    /* 资源Id (Optional) */
    ResourceId *string `json:"resourceId"`

    /* 规则报警状态, 1：正常, 2：报警，4：数据不足 (Optional) */
    Status *int `json:"status"`

    /* 是否为正在报警的规则，0为忽略，1为是，与 status 同时只能生效一个,isAlarming 优先生效 (Optional) */
    IsAlarming *int `json:"isAlarming"`

    /* 规则状态：1为启用，0为禁用 (Optional) */
    Enabled *int `json:"enabled"`

    /* 页码, 默认为1, 取值范围：[1,∞) (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 分页大小，默认为20，取值范围：[10,100] (Optional) */
    PageSize *int `json:"pageSize"`
}

/*
 * param regionId: 地域 Id (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeAlarmsRequest(
    regionId string,
) *DescribeAlarmsRequest {

	return &DescribeAlarmsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/alarms",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param serviceCode: 产品名称 (Optional)
 * param resourceId: 资源Id (Optional)
 * param status: 规则报警状态, 1：正常, 2：报警，4：数据不足 (Optional)
 * param isAlarming: 是否为正在报警的规则，0为忽略，1为是，与 status 同时只能生效一个,isAlarming 优先生效 (Optional)
 * param enabled: 规则状态：1为启用，0为禁用 (Optional)
 * param pageNumber: 页码, 默认为1, 取值范围：[1,∞) (Optional)
 * param pageSize: 分页大小，默认为20，取值范围：[10,100] (Optional)
 */
func NewDescribeAlarmsRequestWithAllParams(
    regionId string,
    serviceCode *string,
    resourceId *string,
    status *int,
    isAlarming *int,
    enabled *int,
    pageNumber *int,
    pageSize *int,
) *DescribeAlarmsRequest {

    return &DescribeAlarmsRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/alarms",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        ServiceCode: serviceCode,
        ResourceId: resourceId,
        Status: status,
        IsAlarming: isAlarming,
        Enabled: enabled,
        PageNumber: pageNumber,
        PageSize: pageSize,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeAlarmsRequestWithoutParam() *DescribeAlarmsRequest {

    return &DescribeAlarmsRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/alarms",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *DescribeAlarmsRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param serviceCode: 产品名称(Optional) */
func (r *DescribeAlarmsRequest) SetServiceCode(serviceCode string) {
    r.ServiceCode = &serviceCode
}

/* param resourceId: 资源Id(Optional) */
func (r *DescribeAlarmsRequest) SetResourceId(resourceId string) {
    r.ResourceId = &resourceId
}

/* param status: 规则报警状态, 1：正常, 2：报警，4：数据不足(Optional) */
func (r *DescribeAlarmsRequest) SetStatus(status int) {
    r.Status = &status
}

/* param isAlarming: 是否为正在报警的规则，0为忽略，1为是，与 status 同时只能生效一个,isAlarming 优先生效(Optional) */
func (r *DescribeAlarmsRequest) SetIsAlarming(isAlarming int) {
    r.IsAlarming = &isAlarming
}

/* param enabled: 规则状态：1为启用，0为禁用(Optional) */
func (r *DescribeAlarmsRequest) SetEnabled(enabled int) {
    r.Enabled = &enabled
}

/* param pageNumber: 页码, 默认为1, 取值范围：[1,∞)(Optional) */
func (r *DescribeAlarmsRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}

/* param pageSize: 分页大小，默认为20，取值范围：[10,100](Optional) */
func (r *DescribeAlarmsRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeAlarmsRequest) GetRegionId() string {
    return r.RegionId
}

type DescribeAlarmsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeAlarmsResult `json:"result"`
}

type DescribeAlarmsResult struct {
    AlarmList []monitor.Alarm `json:"alarmList"`
    PageNumber int `json:"pageNumber"`
    NumberPages int `json:"numberPages"`
    NumberRecords int `json:"numberRecords"`
    PageSize int `json:"pageSize"`
}